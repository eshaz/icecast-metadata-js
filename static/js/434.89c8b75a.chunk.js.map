{"version":3,"file":"static/js/434.89c8b75a.chunk.js","mappings":"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","sources":["../../icecast-metadata-player/node_modules/@eshaz/web-worker/cjs/browser.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../../icecast-metadata-player/node_modules/@wasm-audio-decoders/common/src/WASMAudioDecoderCommon.js","../../icecast-metadata-player/node_modules/@wasm-audio-decoders/common/src/WASMAudioDecoderWorker.js","../../icecast-metadata-player/node_modules/@wasm-audio-decoders/common/src/utilities.js"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","export default function WASMAudioDecoderCommon() {\n  // setup static methods\n  const uint8Array = Uint8Array;\n  const float32Array = Float32Array;\n\n  if (!WASMAudioDecoderCommon.modules) {\n    Object.defineProperties(WASMAudioDecoderCommon, {\n      modules: {\n        value: new WeakMap(),\n      },\n\n      setModule: {\n        value(Ref, module) {\n          WASMAudioDecoderCommon.modules.set(Ref, Promise.resolve(module));\n        },\n      },\n\n      getModule: {\n        value(Ref, wasmString) {\n          let module = WASMAudioDecoderCommon.modules.get(Ref);\n\n          if (!module) {\n            if (!wasmString) {\n              wasmString = Ref.wasm;\n              module = WASMAudioDecoderCommon.inflateDynEncodeString(\n                wasmString,\n              ).then((data) => WebAssembly.compile(data));\n            } else {\n              module = WebAssembly.compile(\n                WASMAudioDecoderCommon.decodeDynString(wasmString),\n              );\n            }\n\n            WASMAudioDecoderCommon.modules.set(Ref, module);\n          }\n\n          return module;\n        },\n      },\n\n      concatFloat32: {\n        value(buffers, length) {\n          let ret = new float32Array(length),\n            i = 0,\n            offset = 0;\n\n          while (i < buffers.length) {\n            ret.set(buffers[i], offset);\n            offset += buffers[i++].length;\n          }\n\n          return ret;\n        },\n      },\n\n      getDecodedAudio: {\n        value: (errors, channelData, samplesDecoded, sampleRate, bitDepth) => ({\n          errors,\n          channelData,\n          samplesDecoded,\n          sampleRate,\n          bitDepth,\n        }),\n      },\n\n      getDecodedAudioMultiChannel: {\n        value(\n          errors,\n          input,\n          channelsDecoded,\n          samplesDecoded,\n          sampleRate,\n          bitDepth,\n        ) {\n          let channelData = [],\n            i,\n            j;\n\n          for (i = 0; i < channelsDecoded; i++) {\n            const channel = [];\n            for (j = 0; j < input.length; ) channel.push(input[j++][i] || []);\n            channelData.push(\n              WASMAudioDecoderCommon.concatFloat32(channel, samplesDecoded),\n            );\n          }\n\n          return WASMAudioDecoderCommon.getDecodedAudio(\n            errors,\n            channelData,\n            samplesDecoded,\n            sampleRate,\n            bitDepth,\n          );\n        },\n      },\n\n      /*\n       ******************\n       * Compression Code\n       ******************\n       */\n\n      crc32Table: {\n        value: (() => {\n          let crc32Table = new Int32Array(256),\n            i,\n            j,\n            c;\n\n          for (i = 0; i < 256; i++) {\n            for (c = i << 24, j = 8; j > 0; --j)\n              c = c & 0x80000000 ? (c << 1) ^ 0x04c11db7 : c << 1;\n            crc32Table[i] = c;\n          }\n          return crc32Table;\n        })(),\n      },\n\n      decodeDynString: {\n        value(source) {\n          let output = new uint8Array(source.length);\n          let offset = parseInt(source.substring(11, 13), 16);\n          let offsetReverse = 256 - offset;\n\n          let crcIdx,\n            escaped = false,\n            byteIndex = 0,\n            byte,\n            i = 21,\n            expectedCrc,\n            resultCrc = 0xffffffff;\n\n          for (; i < source.length; i++) {\n            byte = source.charCodeAt(i);\n\n            if (byte === 61 && !escaped) {\n              escaped = true;\n              continue;\n            }\n\n            // work around for encoded strings that are UTF escaped\n            if (\n              byte === 92 && // /\n              i < source.length - 5\n            ) {\n              const secondCharacter = source.charCodeAt(i + 1);\n\n              if (\n                secondCharacter === 117 || // u\n                secondCharacter === 85 //     U\n              ) {\n                byte = parseInt(source.substring(i + 2, i + 6), 16);\n                i += 5;\n              }\n            }\n\n            if (escaped) {\n              escaped = false;\n              byte -= 64;\n            }\n\n            output[byteIndex] =\n              byte < offset && byte > 0 ? byte + offsetReverse : byte - offset;\n\n            resultCrc =\n              (resultCrc << 8) ^\n              WASMAudioDecoderCommon.crc32Table[\n                ((resultCrc >> 24) ^ output[byteIndex++]) & 255\n              ];\n          }\n\n          // expected crc\n          for (crcIdx = 0; crcIdx <= 8; crcIdx += 2)\n            expectedCrc |=\n              parseInt(source.substring(13 + crcIdx, 15 + crcIdx), 16) <<\n              (crcIdx * 4);\n\n          if (expectedCrc !== resultCrc)\n            throw new Error(\"WASM string decode failed crc32 validation\");\n\n          return output.subarray(0, byteIndex);\n        },\n      },\n\n      inflateDynEncodeString: {\n        value(source) {\n          source = WASMAudioDecoderCommon.decodeDynString(source);\n\n          return new Promise((resolve) => {\n            // prettier-ignore\n            const puffString = String.raw`dynEncode0114db91da9b\u0014u\u0015\u0014\u0014\u0014\u0015*\u0017t\u0016\u0015t\u0018\u0015t\u0017\u0015\u0017\u001a\u0019\u0014\u0015\u0014\u0016\u0015\u0019\u0017\u0015\u0014$\u001a#\u0016\u0015U¤¤\u0018\u001f\u0014U¤¤\u0018\u001f\u001b3\u0017\u001ay\u0016\u0014\u0018zz\u0014\u0018\u001fss|yusvuy\u0017\u0015\u001eÚ&\u0019\u0015\u00184\u0014<\u001605\u00164\u0014<\u0016,5\u0017\u0017T4\u00154\u0016^\u0018T4\u00144\u0014<\u0016(6\u0018U\u0015~J\u0016(4\u00184\u0014<\u0016 ~A\u0014\u00145\u00194\u00144\u0016U\u001c~6\u0018J\u001604\u00174\u00194\u00165\u00174\u00185\u0016 \u0015\u001f\u001f4\u00144\u00164\u0015J\u001604\u00144\u00174\u0015J\u0016,4\u0017U4\u0015U\u001fÒ\u0016\u0015\u001a7\u0014U45\u001b\u00174\u0018U4Z\u00184\u0017U\u00144\u0017U\u0014^/6\u001c5\u00184\u00165\u0019\u0017T4\u0018\u0018T4\u00144\u0019B\u0015\u0014U\u0015~6\u001a4\u001aC\u0015\u0014U\u0015~O\u0015\u00144\u0018U\u00155\u00184\u0019U\u0016~5\u0019 \u0015\u001f\u001fU\u00145\u001a\u0016T4\u0014B\u0015\u00144\u0017Z!\u00144\u0014U\u0016~5\u0019U\u00145\u0018U\u00155\u001a\u0017T4\u0018U\u0016~6\u0017U4Z\u0018TU\u00145\u0019U\u00165\u0018\u0017T4\u00184\u001b~4\u0019O\u0015\u00144\u0018U2Z\u0018TU\u00145\u0018\u0017T4\u00184\u001cZ!\u00194\u0016B\u0015\u00146\u0014\u0018T4\u001b4\u0014U\u0015~6\u00144\u0014B\u0015\u00146\u0014U\u0015~O\u0015\u00144\u00154\u0014U\u0015~4\u0018O\u0015\u0014\u001f4\u0016U\u0016~5\u00164\u0018U\u0015~5\u0018 \u0014\u001f\u0014\u00194\u00144\u0018~C\u0015\u00144\u0019~5\u00194\u0018U\u0016~5\u0018 \u0015\u001f\u0014\u001f\u0014\u001f4\u00184\u0019~5\u001d4\u00175\u00184\u001aU\u00154\u001dB\u0015\u00146\u001aU\u0014b!\u0014\u001f\u001f4\u001a\u00194\u00144\u0018~U\u0014O\u0015\u00144\u0018U\u0016~5\u0018 \u0015\u001f\u001f\u001f\u0015\u0019U\u00165\u0016\u00174\u0016U4Z\u0018TU#\u001f4\u00184\u0014U\u0015$\u00144\u00176\u00174\u0015<\u0016\u00144\u0016~B\u0015\u00146\u0019^\u00184\u0015<\u0016\u00184\u001a4\u00184\u0017~U\u0015~B\u0015\u0014\u00194\u0016U\u0016~5\u00164\u0017U\u00155\u00174\u00194\u001a~5\u001a4\u00184\u0019~U\u00155\u0018 \u0015\u001f\u001f\u001fµ\u0017\u0015\u0019Uä#U\u0014J\u0016\u0014Uè#5\u0018\u0016T\u0017T4\u0017U0Z\u0018T\u0016TUX5\u0017U\u00155\u0018\u0017T4\u0017\u0018T4\u0017Uà#~4\u0018O\u0015\u0014U\u00154\u0017U $~C\u0015\u00144\u0018~5\u00184\u0017U\u0016~5\u0017 \u0015\u0019\u0017T4\u00144\u0015$\u00166\u0019U\u0014\\!\u001a\u0016T\u0016T\u0016T4\u0019U\u0013\u0015a\u0018T4\u0014<\u0016\u00146\u0017\u0018T4\u0014<\u0016\u001c6\u00184\u0014<\u0016\u0018Z!\u001c4\u00174\u0018~4\u0019N\u0014\u0014\u001f4\u0014<\u0016\u001cU\u0015~5\u001a \u0015\u001f4\u0019U\u0016Z!\u00164\u0019U±\u0016_\u0018TU#\u001f4\u00144\u0019U\u0016U\u00156\u0018UÔ\u001c~B\u0015\u0014$\u00145\u001a4\u00144\u0016$\u00166\u0019U\u0014\\!\u001d4\u0019U\u00156\u0017U¤#~B\u0015\u00144\u00144\u0017Uä#~B\u0015\u0014$\u0014~6\u001b4\u0014<\u0016\u001c6\u0017_\u0018TU#\u001f4\u00174\u001a4\u0018U\u001c~B\u0015\u0014~6\u0018~5\u001a4\u0014<\u0016\u0014Y!\u00144\u001a4\u0014<\u0016\u0018_!\u001a\u0017T4\u0018Y!\u00164\u0014<\u0016\u00146\u001a4\u0017~4\u001a4\u00174\u001b~A\u0014\u0014N\u0014\u00144\u00144\u0014<\u0016\u001cU\u0015~6\u0017J\u0016\u001c4\u0018U\u00155\u0018 \u0014\u001f\u0014\u001f4\u00144\u001aJ\u0016\u001c\u001f4\u0019U\u0016[!\u0015\u001f\u001fU\u0014#\u001f\u0014\u001f\u0014\u001f\u00194\u00184\u0017U\u0015O\u0015\u00144\u0018U\u0016~5\u00184\u0017U\u0015~5\u0017 \u0015\u001f\u001fU\u00155\u0019\u001f4\u0019\u001f\u0013\u001e\u0015 7\u0014U\u0004\u001e6\u00188\u00144\u00184\u0014J\u0016\u00144\u00184\u0016J\u0016 4\u0018U\u0014J\u0016\u001c4\u0018U\u0014J\u001604\u0018V\u0014K\u0016(4\u00184\u0015<\u0016\u0014J\u0016\u00184\u00184\u0017<\u0016\u0014J\u0016$4\u0018U´\u001e~5\u001f4\u0018U\u0004\u001d~5 4\u0018U¤\u001c~5!\u0016T\u0016T\u0017T4\u0018U\u0015$\u00145\"U5\u0014\u0016T\u0016T\u0016T\u0016T\u0016T\u0016T\u0016T4\u0018U\u0016$\u0014\"\u0017\u0014\u0015\u0018\u001c\u001f4\u0018V\u0014K\u0017,U\u00165\u00194\u0018<\u0016(6\u0014U\u0018~6\u00164\u0018<\u0016$6\u001d_!\u001c4\u0018<\u0016 6\u001c4\u0014~6\u001aA\u0014\u00145\u001b4\u001aA\u0014\u00155\u001e4\u00184\u0014U\u0017~6#J\u0016(U5\u00144\u001aA\u0014\u00164\u001bU\u0013\u0015[!\u001b4\u00184\u0016J\u0016(4\u001c4#~A\u0014\u00144\u001eU\u001c6\u001aUU\u001cU\u0013\u0015[!\u001b4\u001a4\u001b6\u00144\u0016~6\u001b4\u001d_!\u001c4\u0018<\u0016\u001c6\u00194\u0014~5\u001a4\u0018<\u0016\u00146\u001d\u0018T4\u0018<\u0016\u00184\u001a]\u0018TU\u00155\u0019 \u001e\u001f\u0017T4\u0014Y!\u00174\u00194\u001d~4\u00164\u001c~A\u0014\u0014N\u0014\u00144\u0019U\u0015~5\u00194\u0016U\u0015~5\u00164\u0014U\u00155\u0014 \u0014\u001f\u0014\u001f4\u00184\u001bJ\u0016(4\u00184\u001aJ\u0016\u001c \u0016\u001fUÄ\u001dA\u0014\u0014!\u0017U\u00145\u0016U#Uô\u001dJ\u0016\u0014U\u0010\"UÔ\u001dJ\u0016\u0014U#UÔ\"J\u0016\u0014U#U´\"J\u0016\u0014\u0017T4\u0016U´\u0016Z\u0018TU\u00145\u0016\u0017T4\u0016Uô\u0015Z\u0018TU\u00145\u0016\u0017T4\u0016UDZ\u0018TU\u00145\u0016\u0017T4\u0016U$[\u0018T4\u00164\u001f~U\u001cO\u0015\u00144\u0016U\u0016~5\u0016 \u0015\u001f\u001fUÔ\u001dUô\u001d4\u0018U\u0004\u0019~U´\u0016$\u0015.U\u00145\u0016\u0017T4\u0016UP[\u0018T4\u0018U\u0004\u0019~4\u0016~U\u0019O\u0015\u00144\u0016U\u0016~5\u0016 \u0015\u001f\u001fU#<\u0016\u0014U#<\u0016\u00144\u0018U\u0004\u0019~U2$\u0015.UÄ\u001dU\u0015N\u0014\u0014 \u001d\u00194\u00164 ~U\u001bO\u0015\u00144\u0016U\u0016~5\u0016 \u0015\u001f\u0014\u001f\u0014\u00194\u00164!~U\u001dO\u0015\u00144\u0016U\u0016~5\u0016 \u0015\u001f\u0014\u001f\u0014\u00194\u0018U\u0004\u0019~4\u0016~U\u001cO\u0015\u00144\u0016U\u0016~5\u0016 \u0015\u001f\u0014\u001f\u0014\u001f4\u00184\u0019J\u0016\u001c4\u00184\u0016J\u0016(\u001fU\u00145\u0014 \u0016\u001f4\u00184\u0018U¤\u0015~J\u0016@4\u00184\u0018Uä\u0019~J\u0016<4\u00184\u0018UD~J\u001684\u00184\u0018U\u0004\u0014~J\u001644\u0018U\u0019$\u00145\u00164\u0018U\u0019$\u00145\u0019U5\u00144\u0018U\u0018$\u00145\u001b4\u0016U1^4\u0019U1^!\u00154\u0016U\u0016~5\u001c4\u0019U\u0015~5\u001aU\u001d5\u00144\u001bU\u0018~6\u0016U\u00144\u0016U\u0014^/6\u00195\u0016\u0017T4\u0016\u0018T4\u0018U\u0017$\u00145\u001b4\u0018U\u0004\u0019~4\u0014B\u0015\u0014U\u0015~4\u001bO\u0015\u00144\u0016U\u00155\u00164\u0014U\u0016~5\u0014 \u0015\u0019U\u0014U'4\u00196\u00144\u0014U'_/5\u00164\u0019U\u0015U\u001d~5\u0014\u0017T4\u0016\u0018T4\u0018U\u0004\u0019~4\u0014B\u0015\u0014U\u0015~U\u0014O\u0015\u00144\u0016U\u00155\u00164\u0014U\u0016~5\u0014 \u0015\u001f\u001fU5\u00144\u0018Uä\u0019~4\u0018U¤\u0015~4\u0018U\u0004\u0019~U'$\u0015!\u00174\u001a4\u001c~5\u001bU\u00145\u0019\u0017T4\u00194\u001b\\\u0018T4\u00184\u0018U<~$\u00166\u0014U\u0014\\!\u00194\u0014U#a\u0018T4\u0018U\u0004\u0019~4\u0019U\u0015~4\u0014O\u0015\u00144\u0019U\u0015~5\u0019 \u0016\u001fU\u00145\u001dU\u00175\u001eU\u00175\u0016\u0016T\u0016T\u0016T4\u0014U$\"\u0016\u0014\u0016\u0015\u001f4\u0019Y\u0018TU5\u0014 \u001c\u001f4\u0019U\u00154\u0018~C\u0015\u0002\u00195\u001dU\u00165\u0016 \u0015\u001fU\u001f5\u001eU\u001b5\u0016\u001f4\u001b4\u00184\u0016$\u00144\u001e~6\u00164\u0019~\\\u0018TU5\u0014 \u001a\u001f4\u0018U\u0004\u0019~4\u0019U\u0015~5\u0014\u0017T4\u0016Y!\u00164\u00144\u001dO\u0015\u00144\u0014U\u0016~5\u00144\u0019U\u0015~5\u00194\u0016U\u00155\u0016 \u0014\u001f\u0014\u001f\u001f4\u0018C\u0015\u0004\u001dY\u0018TU5\u0014 \u0018\u001f4\u0018Uä\u0019~4\u0018U¤\u0015~4\u0018U\u0004\u0019~4\u001c$\u00156\u0016\u0018TU5\u00144\u0016U\u0014\\!\u00184\u001c4\u0018B\u0015æ\u00194\u0018B\u0015ä\u0019~[!\u0018\u001f4\u0018U\u0004\u0014~4\u0018UD~4\u0018U\u0004\u0019~4\u001cU\u0015~4\u001a$\u00156\u0016\u0018TU5\u00144\u0016U\u0014\\!\u00184\u001a4\u0018B\u00154\u0018B\u0015~[!\u0018\u001f4\u00184\u0018U<~4\u0018U4~$\u00175\u0014 \u0017\u001f\u0014\u001f\u0014\u001f4\u0018U\u0010\"U#$\u00175\u0014\u001f4\u00144\"Y!\u0014\u001f4\u00145\u00194\u0014U\u0014^!\u0015\u001f4\u00154\u0018<\u0016\u001cJ\u0016\u00144\u00174\u0018<\u0016(J\u0016\u00144\u00145\u0019\u001f4\u0018U\u0004\u001e~8\u00144\u0019\u001f\u001f­\u0015\u0017\u0014U\u001c\u001fN\u0017\u0014\u0018\u0014\u0019\u0014\u001a\u0014\u001b\u0014\u001c\u0014\u001d\u0014\u001e\u0014\u001f\u0014!\u0014#\u0014%\u0014'\u0014+\u0014/\u00143\u00147\u0014?\u0014G\u0014O\u0014W\u0014g\u0014w\u0014\u0014\u0014·\u0014×\u0014÷\u0014\u0016\u0015\u0014Uä\u001c\u001f;\u0015\u0014\u0015\u0014\u0015\u0014\u0015\u0014\u0016\u0014\u0016\u0014\u0016\u0014\u0016\u0014\u0017\u0014\u0017\u0014\u0017\u0014\u0017\u0014\u0018\u0014\u0018\u0014\u0018\u0014\u0018\u0014\u0019\u0014\u0019\u0014\u0019\u0014\u0019\u0014U\u001d\u001f9$\u0014%\u0014&\u0014\u0014\u0014\u001c\u0014\u001b\u0014\u001d\u0014\u001a\u0014\u001e\u0014\u0019\u0014\u001f\u0014\u0018\u0014 \u0014\u0017\u0014!\u0014\u0016\u0014\"\u0014\u0015\u0014#`;\n\n            WASMAudioDecoderCommon.getModule(WASMAudioDecoderCommon, puffString)\n              .then((wasm) => WebAssembly.instantiate(wasm, {}))\n              .then(({ exports }) => {\n                // required for minifiers that mangle the __heap_base property\n                const instanceExports = new Map(Object.entries(exports));\n\n                const puff = instanceExports.get(\"puff\");\n                const memory = instanceExports.get(\"memory\")[\"buffer\"];\n                const dataArray = new uint8Array(memory);\n                const heapView = new DataView(memory);\n\n                let heapPos = instanceExports.get(\"__heap_base\");\n\n                // source length\n                const sourceLength = source.length;\n                const sourceLengthPtr = heapPos;\n                heapPos += 4;\n                heapView.setInt32(sourceLengthPtr, sourceLength, true);\n\n                // source data\n                const sourcePtr = heapPos;\n                heapPos += sourceLength;\n                dataArray.set(source, sourcePtr);\n\n                // destination length\n                const destLengthPtr = heapPos;\n                heapPos += 4;\n                heapView.setInt32(\n                  destLengthPtr,\n                  dataArray.byteLength - heapPos,\n                  true,\n                );\n\n                // destination data fills in the rest of the heap\n                puff(heapPos, destLengthPtr, sourcePtr, sourceLengthPtr);\n\n                resolve(\n                  dataArray.slice(\n                    heapPos,\n                    heapPos + heapView.getInt32(destLengthPtr, true),\n                  ),\n                );\n              });\n          });\n        },\n      },\n    });\n  }\n\n  Object.defineProperty(this, \"wasm\", {\n    enumerable: true,\n    get: () => this._wasm,\n  });\n\n  this.getOutputChannels = (outputData, channelsDecoded, samplesDecoded) => {\n    let output = [],\n      i = 0;\n\n    while (i < channelsDecoded)\n      output.push(\n        outputData.slice(\n          i * samplesDecoded,\n          i++ * samplesDecoded + samplesDecoded,\n        ),\n      );\n\n    return output;\n  };\n\n  this.allocateTypedArray = (len, TypedArray, setPointer = true) => {\n    const ptr = this._wasm.malloc(TypedArray.BYTES_PER_ELEMENT * len);\n    if (setPointer) this._pointers.add(ptr);\n\n    return {\n      ptr: ptr,\n      len: len,\n      buf: new TypedArray(this._wasm.HEAP, ptr, len),\n    };\n  };\n\n  this.free = () => {\n    this._pointers.forEach((ptr) => {\n      this._wasm.free(ptr);\n    });\n    this._pointers.clear();\n  };\n\n  this.codeToString = (ptr) => {\n    const characters = [],\n      heap = new Uint8Array(this._wasm.HEAP);\n    for (let character = heap[ptr]; character !== 0; character = heap[++ptr])\n      characters.push(character);\n\n    return String.fromCharCode.apply(null, characters);\n  };\n\n  this.addError = (\n    errors,\n    message,\n    frameLength,\n    frameNumber,\n    inputBytes,\n    outputSamples,\n  ) => {\n    errors.push({\n      message: message,\n      frameLength: frameLength,\n      frameNumber: frameNumber,\n      inputBytes: inputBytes,\n      outputSamples: outputSamples,\n    });\n  };\n\n  this.instantiate = (_EmscriptenWASM, _module) => {\n    if (_module) WASMAudioDecoderCommon.setModule(_EmscriptenWASM, _module);\n    this._wasm = new _EmscriptenWASM(WASMAudioDecoderCommon).instantiate();\n    this._pointers = new Set();\n\n    return this._wasm.ready.then(() => this);\n  };\n}\n","import NodeWorker from \"@eshaz/web-worker\";\nimport WASMAudioDecoderCommon from \"./WASMAudioDecoderCommon.js\";\n\nconst getWorker = () => globalThis.Worker || NodeWorker;\n\nexport default class WASMAudioDecoderWorker extends getWorker() {\n  constructor(options, name, Decoder, EmscriptenWASM) {\n    if (!WASMAudioDecoderCommon.modules) new WASMAudioDecoderCommon();\n\n    let source = WASMAudioDecoderCommon.modules.get(Decoder);\n\n    if (!source) {\n      let type = \"text/javascript\",\n        isNode,\n        webworkerSourceCode =\n          \"'use strict';\" +\n          // dependencies need to be manually resolved when stringifying this function\n          `(${((_Decoder, _WASMAudioDecoderCommon, _EmscriptenWASM) => {\n            // We're in a Web Worker\n\n            // setup Promise that will be resolved once the WebAssembly Module is received\n            let decoder,\n              moduleResolve,\n              modulePromise = new Promise((resolve) => {\n                moduleResolve = resolve;\n              });\n\n            self.onmessage = ({ data: { id, command, data } }) => {\n              let messagePromise = modulePromise,\n                messagePayload = { id },\n                transferList;\n\n              if (command === \"init\") {\n                Object.defineProperties(_Decoder, {\n                  WASMAudioDecoderCommon: { value: _WASMAudioDecoderCommon },\n                  EmscriptenWASM: { value: _EmscriptenWASM },\n                  module: { value: data.module },\n                  isWebWorker: { value: true },\n                });\n\n                decoder = new _Decoder(data.options);\n                moduleResolve();\n              } else if (command === \"free\") {\n                decoder.free();\n              } else if (command === \"ready\") {\n                messagePromise = messagePromise.then(() => decoder.ready);\n              } else if (command === \"reset\") {\n                messagePromise = messagePromise.then(() => decoder.reset());\n              } else {\n                // \"decode\":\n                // \"decodeFrame\":\n                // \"decodeFrames\":\n                Object.assign(\n                  messagePayload,\n                  decoder[command](\n                    // detach buffers\n                    Array.isArray(data)\n                      ? data.map((data) => new Uint8Array(data))\n                      : new Uint8Array(data),\n                  ),\n                );\n                // The \"transferList\" parameter transfers ownership of channel data to main thread,\n                // which avoids copying memory.\n                transferList = messagePayload.channelData\n                  ? messagePayload.channelData.map((channel) => channel.buffer)\n                  : [];\n              }\n\n              messagePromise.then(() =>\n                self.postMessage(messagePayload, transferList),\n              );\n            };\n          }).toString()})(${Decoder}, ${WASMAudioDecoderCommon}, ${EmscriptenWASM})`;\n\n      try {\n        isNode = typeof process.versions.node !== \"undefined\";\n      } catch {}\n\n      source = isNode\n        ? `data:${type};base64,${Buffer.from(webworkerSourceCode).toString(\n            \"base64\",\n          )}`\n        : URL.createObjectURL(new Blob([webworkerSourceCode], { type }));\n\n      WASMAudioDecoderCommon.modules.set(Decoder, source);\n    }\n\n    super(source, { name });\n\n    this._id = Number.MIN_SAFE_INTEGER;\n    this._enqueuedOperations = new Map();\n\n    this.onmessage = ({ data }) => {\n      const { id, ...rest } = data;\n      this._enqueuedOperations.get(id)(rest);\n      this._enqueuedOperations.delete(id);\n    };\n\n    new EmscriptenWASM(WASMAudioDecoderCommon).getModule().then((module) => {\n      this.postToDecoder(\"init\", { module, options });\n    });\n  }\n\n  async postToDecoder(command, data) {\n    return new Promise((resolve) => {\n      this.postMessage({\n        command,\n        id: this._id,\n        data,\n      });\n\n      this._enqueuedOperations.set(this._id++, resolve);\n    });\n  }\n\n  get ready() {\n    return this.postToDecoder(\"ready\");\n  }\n\n  async free() {\n    await this.postToDecoder(\"free\").finally(() => {\n      this.terminate();\n    });\n  }\n\n  async reset() {\n    await this.postToDecoder(\"reset\");\n  }\n}\n","export const assignNames = (Class, name) => {\n  Object.defineProperty(Class, \"name\", { value: name });\n};\n"],"names":["module","exports","Worker","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","WASMAudioDecoderCommon","_this","uint8Array","Uint8Array","float32Array","Float32Array","modules","WeakMap","setModule","Ref","set","Promise","resolve","getModule","wasmString","get","WebAssembly","compile","decodeDynString","wasm","inflateDynEncodeString","then","data","concatFloat32","buffers","length","ret","i","offset","getDecodedAudio","errors","channelData","samplesDecoded","sampleRate","bitDepth","getDecodedAudioMultiChannel","input","channelsDecoded","j","channel","push","crc32Table","c","Int32Array","source","crcIdx","byte","expectedCrc","output","parseInt","substring","offsetReverse","escaped","byteIndex","resultCrc","charCodeAt","secondCharacter","Error","subarray","puffString","String","_templateObject","instantiate","_ref","instanceExports","Map","entries","puff","memory","dataArray","heapView","DataView","heapPos","sourceLength","sourceLengthPtr","setInt32","sourcePtr","destLengthPtr","byteLength","getInt32","defineProperty","this","enumerable","_wasm","getOutputChannels","outputData","allocateTypedArray","len","TypedArray","setPointer","arguments","undefined","ptr","malloc","BYTES_PER_ELEMENT","_pointers","add","buf","HEAP","free","forEach","clear","codeToString","characters","heap","character","fromCharCode","apply","addError","message","frameLength","frameNumber","inputBytes","outputSamples","_EmscriptenWASM","_module","Set","ready","WASMAudioDecoderWorker","getWorker","globalThis","NodeWorker","constructor","options","name","Decoder","EmscriptenWASM","isNode","type","webworkerSourceCode","concat","_Decoder","_WASMAudioDecoderCommon","decoder","moduleResolve","modulePromise","self","onmessage","transferList","id","command","messagePromise","messagePayload","isWebWorker","reset","assign","Array","isArray","map","buffer","postMessage","toString","process","versions","node","Buffer","from","URL","createObjectURL","Blob","super","_id","Number","MIN_SAFE_INTEGER","_enqueuedOperations","_ref2","rest","delete","postToDecoder","finally","terminate","assignNames","Class"],"sourceRoot":""}