{"version":3,"file":"static/js/synaudio.bc9e7437.chunk.js","mappings":"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","sources":["../../icecast-metadata-player/node_modules/@eshaz/web-worker/cjs/browser.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../../icecast-metadata-player/node_modules/simple-yenc/dist/esm.js","../../icecast-metadata-player/node_modules/synaudio/src/SynAudio.js","../../icecast-metadata-player/node_modules/synaudio/index.js"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","const t=(t,e=4294967295,n=79764919)=>{const r=new Int32Array(256);let o,s,c,i=e;for(o=0;o<256;o++){for(c=o<<24,s=8;s>0;--s)c=2147483648&c?c<<1^n:c<<1;r[o]=c}for(o=0;o<t.length;o++)i=i<<8^r[255&(i>>24^t[o])];return i},e=t=>{const e=[];for(const n of t){let t=(n+42)%256;0===t||10===t||13===t||61===t?e.push(\"=\"+String.fromCharCode((t+64)%256)):e.push(String.fromCharCode(t))}return e.join(\"\")},n=(e,n=t)=>{const r=t=>new Uint8Array(t.length/2).map(((e,n)=>parseInt(t.substring(2*n,2*(n+1)),16))),o=t=>r(t)[0],s=new Map;[,8364,,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,,381,,,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,,382,376].forEach(((t,e)=>s.set(t,e)));const c=new Uint8Array(e.length);let i,l,a,f=!1,g=0,h=42,p=e.length>13&&\"dynEncode\"===e.substring(0,9),u=0;p&&(u=11,l=o(e.substring(9,u)),l<=1&&(u+=2,h=o(e.substring(11,u))),1===l&&(u+=8,a=(t=>new DataView(r(t).buffer).getInt32(0,!0))(e.substring(13,u))));const d=256-h;for(let t=u;t<e.length;t++)if(i=e.charCodeAt(t),61!==i||f){if(i>255){const t=s.get(i);t&&(i=t+127)}f&&(f=!1,i-=64),c[g++]=i<h&&i>0?i+d:i-h}else f=!0;const m=c.subarray(0,g);if(p&&1===l){const t=n(m);if(t!==a){const e=\"Decode failed crc32 validation\";throw console.error(\"`simple-yenc`\\n\",e+\"\\n\",\"Expected: \"+a+\"; Got: \"+t+\"\\n\",\"Visit https://github.com/eshaz/simple-yenc for more information\"),Error(e)}}return m},r=(e,n='\"',r=t)=>{const o=(t,e)=>(t%e+e)%e,s=(t,e)=>e.push(String.fromCharCode(61,(t+64)%256)),c=t=>t.map((t=>t.toString(16).padStart(2,\"0\")));let i,l,a=[],f=1/0,g=Array(256).fill(0),h=0;'\"'===n?(l=[0,8,9,10,11,12,13,34,92,61],i=t=>0===t||8===t||9===t||10===t||11===t||12===t||13===t||34===t||92===t||61===t):\"'\"===n?(l=[0,8,9,10,11,12,13,39,92,61],i=t=>0===t||8===t||9===t||10===t||11===t||12===t||13===t||39===t||92===t||61===t):\"`\"===n&&(l=[13,61,96],a=[7,205,231],i=(t,e)=>13===t||36===t&&123===e||61===t||92===t&&(85===e||117===e)||96===t);for(let t=0;t<e.length;t++){const n=0|e[t];g[n]++;for(let r=0;r<a.length;r++){const s=a[r];o(n-e[t+1]|0,256)===s&&g[n]++}}for(let t=0;t<256;t++){let e=0;for(let n=0;n<l.length;n++)e+=g[o(l[n]-t,256)];e<f&&(f=e,h=t)}const p=[\"dynEncode\",\"01\",c([h]),...c((t=>{const e=new Uint8Array(4);return new DataView(e.buffer).setInt32(0,t,!0),[...e]})(r(e)))];for(let t=0;t<e.length;t++){const n=(e[t]+h)%256;i(n,(e[t+1]+h)%256)?s(n,p):p.push(String.fromCharCode(n))}return\"\\\\\"===p[p.length-1]&&(p.pop(),s(\"\\\\\",p)),p.join(\"\")},o=t=>t.replace(/[\\\\]/g,\"\\\\\\\\\").replace(/[`]/g,\"\\\\`\").replace(/\\${/g,\"\\\\${\");export{t as crc32,n as decode,r as dynamicEncode,e as encode,o as stringify};\n","/* Copyright 2022-2023 Ethan Halsall\n    \n    This file is part of synaudio.\n    \n    synaudio is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    synaudio is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { decode } from \"simple-yenc\";\nimport Worker from \"@eshaz/web-worker\";\n\n// prettier-ignore\nconst simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]))\n\nconst wasmModule = new WeakMap();\n\n/* WASM strings are embeded during the build */\nconst simdWasm = String.raw`dynEncode01658cce3922eÆØÒfeeefsfÅoääääääääääegtfhÊÓÛkÒÊÒÔ×Þgeghgfekmfäe¦åíiplgnÈÔ××ÊÑÆÙÊeepÄÄÍÊÆÕÄÇÆØÊheo\u0016f\u0013ivälànâiá©eeeeeeeeg¥g¥g¦g­reg¦fÐ|f¦v³i¥f¦uÐz¦efÐ}ef¦gÙxÏ~e¦¥Ðuth¥ffwÑvÏ{tpuo¦eqh¥eqg¦gÙÏqqbeeeegvÏ¦gÙÏbeeebIfbpeeeg¦i×q¦gÙÏrrbeeeeqvÏ¦gÙÏbeeebIfbpeeeg¦m×q¦gÙÏrrbeeeeqvÏ¦gÙÏbeeebIfbpeeeg¦q×q¦gÙÏrrbeeeeqvÏ¦gÙÏbeeebIfbpeepr¦¥Ðpos¦¥Ðog¦uÏqz­repg¥fq±reg¥fqÐo¦i®reeqvÏ¦gÙÏ~®iäeq¦gÙÏe{¦gÙÏ®j¦epreo¦áÖ{¦iÐp¦gÛ¦fÏ¦fÖg¥pªi¥¦egqfpzgÐ¦áÖ¦iÐ¦gÛ¦fÏ¦cdddlÖp¦egh¥srbegesbegebIfbpgesrbegusbegubIfbpgur¦Ïrs¦Ïsg¦mÏgp¦gÐpreppi¥egqÏg¦gÙÏpegvÏ¦gÙÏbegepbegebIfbpgepo{«rffq{ÏqÐopq¦äØgo¦fÖiäeq¦gÙÏoeqvÏ¦gÙÏgeoge÷geq¦fÏjqpqg}«refqÐpyq¦gÙoÏregh¥goÏqgrÏsgeqge÷geqsgiqgi÷gig¦mÏgp¦gÐpreppxyÏytxÏtw¦fÏw|¬repqfpf¦e±re¦efÐtf¦fÖuef¦gÙvÏwf¦i®yf¦áÖo¦q«zh¥frÑs¦egg¥g¥yreeefsÏ¦gÙÏ®wes¦gÙÏq°ÖreeqbegeebegebIfbpgeg¥o¦i«reeqbeguebegubIfbpguo¦m«reeqbegebegbIfbpgzreeqbegebegbIfbpgpfog«rfpg¦äØquiäeg¦gÙÏxegsÏ¦gÙÏgexge÷geg¦f×jgpgqt«refgÐqpg¦gÙxÏ{egh¥gxÏsg{Ï}gesge÷ges}gisgi÷gig¦mÏgq¦gÐqrepppvÏpr¦fÏr|¬reppg¥j¦g­rej¦fÐvi¦v³i¥i¦uÐ|¦ey¦eiÐ{hi¦gÙzÏ}h¦¥Ðjt¦ewh¥iiwÑuÏxtpjo¦eqh¥hqg¦gÙÏqqbeeehguÏ¦gÙÏbeeebIfbpeehg¦i×q¦gÙÏrrbeeehquÏ¦gÙÏbeeebIfbpeehg¦m×q¦gÙÏrrbeeehquÏ¦gÙÏbeeebIfbpeehg¦q×q¦gÙÏrrbeeehquÏ¦gÙÏbeeebIfbpeepr¦¥Ðpos¦¥Ðog¦uÏq|­repg¥iq±reg¥iqÐo¦i®rehquÏ¦gÙÏ}®iähq¦gÙÏhx¦gÙÏ®j¦epreo¦áÖx¦iÐp¦gÛ¦fÏ¦fÖ~g¥pªi¥¦egqfp|gÐ¦áÖ¦iÐ¦gÛ¦fÏ¦cdddlÖp¦egh¥srbegesbegebIfbpgesrbegusbegubIfbpgur¦Ïrs¦Ïsg¦mÏgp¦gÐprepp~i¥hgqÏg¦gÙÏphguÏ¦gÙÏbegepbegebIfbpgepox«rfiqxÏqÐopq¦äØgo¦fÖiähq¦gÙÏohquÏ¦gÙÏgeoge÷geq¦fÏjqpqg{«reiqÐpyq¦gÙoÏrhgh¥goÏqgrÏsgeqge÷geqsgiqgi÷gig¦mÏgp¦gÐpreppyzÏytzÏtw¦fÏwv¬repqfpi¦e±re¦ep¦eiÐsi¦fÖthi¦gÙuÏwi¦i®yi¦áÖj¦q«|¦erh¥irÑo¦egg¥g¥yrehhioÏ¦gÙÏ®who¦gÙÏq°ÖrehqbegehbegebIfbpgeg¥j¦i«rehqbeguhbegubIfbpguj¦m«rehqbeghbegbIfbpg|rehqbeghbegbIfbpgpjgi«rfpg¦äØqtiähg¦gÙÏzhgoÏ¦gÙÏgezge÷geg¦f×jgpgqs«reigÐqpg¦gÙzÏxhgh¥gzÏogxÏ{geoge÷geo{giogi÷gig¦mÏgq¦gÐqrepppuÏpr¦fÏrv¬repp¦ein¦egem¦egeg¥k¦e¯i¥k¦hÖjg¥k¦fÐi¦h®i¥¦eoqfpegk¦áÖoqh¥gge \u0005ggi \u0005ggm \u0005ggq \u0005g¦uÏgq¦iÐqreppji¥eo¦gÙÏgjqh¥gge \u0005g¦iÏgq¦fÐqreppg¥i¦h®i¥¦eoqfphgk¦áÖoqh¥gge \u0005ggi \u0005ggm \u0005ggq \u0005g¦uÏgq¦iÐqreppji¥ho¦gÙÏgh¥gge \u0005g¦iÏgj¦fÐjreppk¦uÐsk\u001c\b\u001bk¦v­i¥¦ei¦eqqgpbx¦ejhgh¥gbeeebJfbKfbIfgbeeubJfbKfbIfgbeebJfbKfbIfgbeebJfbKfbIfg¦¥Ðgj¦uÏjs­repi¦ÕÖq¦fiqfpk¦uÐsk\u001c\b\u001b¦eqpbhbgbebf÷÷÷g¥kq±req¦äØkÏpk¦hÖoiähq¦gÙÏgojh¥ggeøù÷g¦iÏgj¦fÐjrepoq×jqpqp¦h®rekqÐjhq¦gÙÏgh¥ggqøùggmøùggiøùggeøù÷÷÷÷g¦uÏgj¦iÐjrepp¦ejii¥bxhgh¥ggbeeebJfbpeeggbeeubJfbpeuggbeebJfbpeggbeebJfbpeg¦¥Ðgj¦uÏjs­reppk\u0017¨eeå$÷úfkÐtg¥jk³rekkjÐf¦h°iäf¦áÖr¦iÐg¦gÛ¦fÏo¦hÖqbx¦epg¦q´i¥o¦adddlÖohj¦gÙÏgh¥ggbegebJfbpgeggbegubJfbpguggbegbJfbpgggbegbJfbpgg¦¥Ðgp¦uÏpo¦iÐoreppqi¥hjpÏ¦gÙÏgh¥ggbegebJfbpgeg¦uÏgq¦fÐqreppfr«rfjrÏjjpjÐqhj¦gÙÏgh¥gggeøgeg¦iÏgq¦fÐqreppöt¦e¯i¥l¦gÙu¦er¦ekÐvk¦fÖwk¦fÐ¦ÕÖq eoh¥er¦gÙÏygeekrÏ¦gÙÏ|\b\u001bgäiªi¥bqeeeeeeeeeeeeeeeebqeeeeeeeeeeeeeeee¦eqfpbx¦eg¦epbqeeeeeeeeeeeeeeeebqeeeeeeeeeeeeeeeeh¥goÏfbeeebJfghÏjbeeebKfbIffbeeubJfjbeeubKfbIffbeebJfjbeebKfbIffbeebJfjbeebKfbIfbKfbIfbKfbIfbKfbIfbKfbIfg¦¥Ðgp¦uÏps­repqpf|gebhbgbebf÷÷÷bhbgbebf÷÷÷g¥fk³ref¦äØgwiäyf¦gÙjÏgeøhjÏgeù÷ù÷f¦f×jfpfgv«ref¦gÙgkfÐjh¥goÏfgiøghÏpgiùfgeøpgeù÷÷ùù÷÷g¦mÏgj¦gÐjreppú ú \u0004\u0007\b\u001bmgeÃi¥nrgemgep \u0006 \u0005ouÏolrÏrt­reppg¥l¦f±rengefllÑgÏjtjt­t¦epfgÐf¦ef¦e¯rg¥k¦e±i¥qfpk¦hÖjg¥k¦fÐ¦h®i¥qfper¦gÙÏgk¦áÖpqh¥gge \u0005ggi \u0005ggm \u0005ggq \u0005g¦uÏgq¦iÐqreppjªreeprÏ¦gÙÏgh¥gge \u0005g¦iÏgj¦fÐjrepprt³re¦ekÐpk¦fÖuer¦gÙÏok¦fÐ¦ÕÖl h¥er¦gÙÏvgeekrÏ¦gÙÏw\b\u001bgäiªi¥bqeeeeeeeeeeeeeeeebqeeeeeeeeeeeeeeee¦eqfpbx¦eqoghjbqeeeeeeeeeeeeeeeebqeeeeeeeeeeeeeeeeh¥gbeeebJfjbeeebKfbIfgbeeubJfjbeeubKfbIfgbeebJfjbeebKfbIfgbeebJfjbeebKfbIfbKfbIfbKfbIfbKfbIfbKfbIfg¦¥Ðgj¦¥Ðjq¦uÏqs­replpfwgebhbgbebf÷÷÷bhbgbebf÷÷÷g¥fk³ref¦äØguiävf¦gÙjÏgeøhjÏgeù÷ù÷f¦f×jfpfgp«ref¦gÙgkfÐjh¥goÏfgiøghÏqgiùfgeøqgeù÷÷ùù÷÷g¦mÏgj¦gÐjreppú ú \u0004\u0007\b\u001bmgeÃi¥nrgemgep \u0006 \u0005o¦iÏor¦fÏrt¬reppppetÙÆ×ÌÊÙÄËÊÆÙÚ×ÊØflØÎÒÉ`;\nconst scalarWasm = String.raw`dynEncode010e15d7b662\u000eo{\u000f\u000e\u000e\u000e\u000f+\u0011n\u0011\u000en\u0013\u000fn\u0018\u000e\u0010\u001d\u000f\u0011s|\u0014{s{}\u0010\u000e\u0010\u0011\u0012\u0011\u000e\u000f\u0010\u0014\u0016\u000f\u000eO\u0012\u0019\u0015)\u0010\u0017q}szos\u000e\u0010\u0019mmvso~mpos\u0011\u000e\u0018  \u0011Ú\u0011\u0010\u0019\u000f\u0010N.\u0010O\u0010V\u001b\u000e.\u0010O\u000fy/\u0014.\u000fO\u0013\\\u0012N.\u000fO\u0012y/\u0015.\u000fO\u0010/\u0016.\u000fO\u000f/\u0017\u0011N.\u000e/\u0010O\u000f/\u0012\u0011N.\u0010.\u0010.\u0013x0\u00118\u0010\u000e.\u00108\u0010\u000e F\u0010\u000e.\u0010.\u00118\u0010\u0012.\u00108\u0010\u0012 F\u0010\u0012.\u0010.\u00118\u0010\u0016.\u00108\u0010\u0016 F\u0010\u0016.\u0010.\u00118\u0010\u001a.\u00108\u0010\u001a F\u0010\u001a.\u0010O\u001ex/\u0010.\u0012O\u0011x/\u0011.\u0012O\u0012x/\u0012.\u0011.\u0015V\u001b\u000e\u0019\u0010N.\u000f.\u0012O\u000fy0\u0011Z\u001b\u000e.\u0017\u0012.\u0010.\u0010.\u0013x8\u0010\u000e.\u00108\u0010\u000e F\u0010\u000e.\u0012\u0013.\u0011\u0019/\u0010.\u000f.\u0012T\u001b\u000e.\u000f.\u0010y/\u0012.\u0013.\u0010O\u00100\u0018x/\u0019.\u000e/\u0010\u0011N.\u0010.\u0018x0\u0011.\u0010.\u0019x0\u001a8\u0010\u000e.\u00118\u0010\u000e F\u0010\u000e.\u0011.\u001a8\u0010\u0012.\u00118\u0010\u0012 F\u0010\u0012.\u0010O\u0016x/\u0010.\u0012O\u0010y0\u0012\u001b\u000e\u0019\u0019.\u0013.\u0016x/\u0013.\u0014.\u001bO\u000fx0\u001bU\u001b\u000e\u0019\u001a\u000f\u0019.\u000fO\u000eZ\u001b\u000e.\u000fO\u0010/\u0012.\u000e8\u0010\u000e/\u001c.\u000fO\u000fT/\u0011.\u000fO\u0011T/\u0013.\u000e/\u0010\u0011N.\u000e.\u00108\u0010\u000e.\u001c 0\u001cF\u0010\u000e\u0010N.\u0011\u001b\u000e.\u000e.\u00108\u0010\u0012.\u000e8\u0010\u0012 F\u0010\u0012.\u000fO\u0010T\u001b\u000e.\u000e.\u00108\u0010\u0016.\u000e8\u0010\u0016 F\u0010\u0016.\u0013\u001b\u000e.\u000e.\u00108\u0010\u001a.\u000e8\u0010\u001a F\u0010\u001a\u0019.\u0010.\u0012x/\u0010.\u0014O\u000fy0\u0014\u001b\u000e\u0019\u0019\u0019\u0011\u0010\u0013\u0014\u0010N.\u00120\u0013O\u0013V\u0012O\u000e\u0013.\u0013O\u0012y/\u0017\u0011N.\u000e.\u0014x0\u00128\u0010\u001a.\u0010¡0\u0018.\u000f.\u0014x0\u00168\u0010\u001a¢.\u00128\u0010\u0016.\u0010¡0\u001b.\u00168\u0010\u0016¢.\u00128\u0010\u0012.\u0010¡0\u001c.\u00168\u0010\u0012¢.\u00128\u0010\u000e.\u0010¡0\u001d.\u00168\u0010\u000e¢.\u0019    /\u0019.\u0018.\u0018¢.\u001b.\u001b¢.\u001c.\u001c¢.\u001d.\u001d¢.\u001a    /\u001a.\u0014O\u001ex/\u0014.\u0015O\u0012x0\u0015.\u0017V\u001b\u000e\u0019.\u0013O\u000fyO\u00190\u0012.\u0013\\\u001b\u000e.\u0012O/\u0014.\u0013O\u000f\u0012.\u000e.\u0012O\u00100\u0015x8\u0010\u000e.\u0010¡0\u0018.\u000f.\u0015x8\u0010\u000e¢.\u0019 /\u0019.\u0018.\u0018¢.\u001a /\u001a.\u0012O\u000f\u0013.\u0012\u0019/\u0012O\u000e.\u0013y.\u0014T\u001b\u000e.\u0013.\u0012y/\u0015.\u000e.\u0012O\u00100\u000ex/\u0014.\u000e.\u000fx/\u000e\u0011N.\u00148\u0010\u0012.\u0010¡0\u0018.\u0018¢.\u00148\u0010\u000e.\u0010¡0\u001b.\u001b¢.\u001a  /\u001a.\u0018.\u000e8\u0010\u0012¢.\u001b.\u000e8\u0010\u000e¢.\u0019  /\u0019.\u0014O\u0016x/\u0014.\u000eO\u0016x/\u000e.\u0015O\u0010y0\u0015\u001b\u000e\u0019\u0019.\u0019.\u0013ÀQ\u000e\u000eÍ 0\u0010£É.\u001a.\u0010£É­.\u0011É°±Ä\u0019Ê\u0019\u0011\u0012\u0012\u0013R\u000e\u000e\u000e\u000e\u000e\u000e\u000e\u000e/$\u0010N.\u000e.\u000f.\u0010\u001e\u000e.\u0011.\u0012.\u0013\u001e\u000e.\u0017O\u000eD\u0010\u000e.\u0016O\u000eD\u0010\u000e\u0010N.\u0014O\u000eX\u0012N.\u0014O\u0011/\u0013.\u0014O\u000fy0\u0018O\u0011]\u0012N.\u000e/\u0012.\u0014O0\u001a/\u0010\u0011N. .\u00128\u0010\u000eÉ®.\u00128\u0010\u0012É®.\u00128\u0010\u0016É®.\u00128\u0010\u001aÉ®/ .\u0012O\u001ex/\u0012.\u0010O\u0012y0\u0010\u001b\u000e\u0019\u0019.\u0013\u0012N.\u001aO\u0010.\u000ex/\u0012.\u0013/\u0010\u0011N. .\u00128\u0010\u000eÉ®/ .\u0012O\u0012x/\u0012.\u0010O\u000fy0\u0010\u001b\u000e\u0019\u0019\u0010N.\u0018O\u0011W\u0012NO\u000e/\u001a\u001a\u000f\u0019.\u0011/\u0012.\u0014O0\u001a/\u0010\u0011N.!.\u00128\u0010\u000eÉ®.\u00128\u0010\u0012É®.\u00128\u0010\u0016É®.\u00128\u0010\u001aÉ®/!.\u0012O\u001ex/\u0012.\u0010O\u0012y0\u0010\u001b\u000e\u0019\u0019.\u0013\u0012N.\u001aO\u0010.\u0011x/\u0012\u0011N.!.\u00128\u0010\u000eÉ®/!.\u0012O\u0012x/\u0012.\u0013O\u000fy0\u0013\u001b\u000e\u0019\u0019.\u0014O\u0012y/\u001a.\u0014À/\u001f.\u0014O\u0013V\u0012NO\u000e/\u0018O\u000e/\u0010\u001a\u0010\u0019.!Ä.\u001f£/\u001cO\u000e/\u0013.\u0011/\u0012\u0011N.\u00128\u0010\u001a.\u001c¡0\u001d.\u001d¢.\u00128\u0010\u0016.\u001c¡0\u001d.\u001d¢.\u00128\u0010\u0012.\u001c¡0\u001d.\u001d¢.\u00128\u0010\u000e.\u001c¡0\u001d.\u001d¢.\u001e    /\u001e.\u0012O\u001ex/\u0012.\u0013O\u0012x0\u0013.\u001aV\u001b\u000e\u0019.\u0018O/\u0010O\u000f/\u0018\u001a\u000f\u0019.\u0014O\u0012y/\u001a.\u0014À/\u001fO\u000e/\u0010\u0019.!.\u0014Å0!±Ä/\u001c\u0010N.\u0010.\u0014\\\u001b\u000e.\u0014.\u0010Ox/\u001b.\u0014O\u00110\u0019\u0012.\u0010O\u0010.\u0011x/\u0012.\u0019/\u0013\u0011N.\u00128\u0010\u000e.\u001c¡0\u001d.\u001d¢.\u001e /\u001e.\u0012O\u0012x/\u0012.\u0013O\u000fy0\u0013\u001b\u000e\u0019.\u0010.\u0019\u0013.\u0010\u0019/\u0010.\u001bO\u0011W\u001b\u000e.\u0014.\u0010y/\u0013.\u0010O\u0010.\u0011x/\u0012\u0011N.\u00128\u0010\u001a.\u001c¡0\u001d.\u001d¢.\u00128\u0010\u0016.\u001c¡0\u001d.\u001d¢.\u00128\u0010\u0012.\u001c¡0\u001d.\u001d¢.\u00128\u0010\u000e.\u001c¡0\u001d.\u001d¢.\u001e    /\u001e.\u0012O\u001ex/\u0012.\u0013O\u0012y0\u0013\u001b\u000e\u0019\u0019O\u000e/\u0013.\u0018\u0012N.\u0011/\u0012\u0011N.\u0012.\u00128\u0010\u000e.\u001c¡F\u0010\u000e.\u0012.\u00128\u0010\u0012.\u001c¡F\u0010\u0012.\u0012.\u00128\u0010\u0016.\u001c¡F\u0010\u0016.\u0012.\u00128\u0010\u001a.\u001c¡F\u0010\u001a.\u0012O\u001ex/\u0012.\u0013O\u0012x0\u0013.\u001aV\u001b\u000e\u0019\u0019.\u001e.\u001fQ\u000e\u000eÍ £/\u001e.\u000f.\u0014y/\u0010\u0010N.\u0013.\u0014\\\u001b\u000e.\u0014.\u0013Ox/\u000f.\u0014.\u0013yO\u00110\u001a\u0012N.\u0013O\u0010.\u0011x/\u0012\u0011N.\u0012.\u00128\u0010\u000e.\u001c¡F\u0010\u000e.\u0012O\u0012x/\u0012.\u0013O\u000fx/\u0013.\u001aO\u000fy0\u001a\u001b\u000e\u0019\u0019.\u000fO\u0011W\u001b\u000e.\u0014.\u0013y/\u001a.\u0013O\u0010.\u0011x/\u0012\u0011N.\u0012.\u00128\u0010\u000e.\u001c¡F\u0010\u000e.\u0012.\u00128\u0010\u0012.\u001c¡F\u0010\u0012.\u0012.\u00128\u0010\u0016.\u001c¡F\u0010\u0016.\u0012.\u00128\u0010\u001a.\u001c¡F\u0010\u001a.\u0012O\u001ex/\u0012.\u001aO\u0012y0\u001a\u001b\u000e\u0019\u0019.\u001e/\u001c\u0010N.\u0010O\u000eZ\u0012NO\u000e/\u0018\u001a\u000f\u0019.\u0015O\u0010/\u0019.\u0014O\u0010/\u001aO\u000e/\u0018.\u000e/\u0012O\u000e/\u0013\u0011N. .\u00128\u0010\u000eÉ¯/\".\u0012.\u001ax8\u0010\u000eÉ/#.\u00168\u0010\u000e/\u001e.\u0012.\u0011. .!±Ä.\u001c.\u0014\u001e\u000f0\u001f.\u001el\u0012.\u0017.\u0013D\u0010\u000e.\u0016.\u001fF\u0010\u000e.\u0013\u0013.\u0018\u0019/\u0018.\".#®/ .\u0012.\u0019x/\u0012.\u0013.\u0015x0\u0013.\u0010V\u001b\u000e\u0019\u0019\u0010N.\u0015O\u000fZ\u001b\u000e.\u0018.\u0015.\u0015z0\u0012x0\u000f.\u0010.\u000f.\u0010V)/\u0015O\u000e/\u000f.\u0018.\u0012y0\u0010O\u000e.\u0010O\u000eX)/\u0010\u0010N.\u0014O\u000eZ\u0012N.$/ \u001a\u000f\u0019.\u0014O\u0011/\u0013\u0010N.\u0014O\u000fyO\u0011W\u0012N.$/ \u001a\u000f\u0019.\u0010O\u0010.\u000ex/\u0012.$/ .\u0014O0\u000f/\u001a\u0011N. .\u00128\u0010\u000eÉ®.\u00128\u0010\u0012É®.\u00128\u0010\u0016É®.\u00128\u0010\u001aÉ®/ .\u0012O\u001ex/\u0012.\u001aO\u0012y0\u001a\u001b\u000e\u0019\u0019.\u0013S\u001b\u000e.\u000f.\u0010xO\u0010.\u000ex/\u0012\u0011N. .\u00128\u0010\u000eÉ®/ .\u0012O\u0012x/\u0012.\u0013O\u000fy0\u0013\u001b\u000e\u0019\u0019.\u0010.\u0015\\\u001b\u000e.\u0010O\u0010.\u000ex/\u0012.\u0010.\u0014xO\u0010.\u000ex/\u0013\u0011N. .\u00128\u0010\u000eÉ¯/\".\u00138\u0010\u000eÉ/#.\u00168\u0010\u000e/\u001e.\u0012.\u0011. .!±Ä.\u001c.\u0014\u001e\u000f0\u001f.\u001el\u0012N.\u0017.\u0010D\u0010\u000e.\u0016.\u001fF\u0010\u000e\u0019.\".#®/ .\u0012O\u0012x/\u0012.\u0013O\u0012x/\u0013.\u0010O\u000fx0\u0010.\u0015U\u001b\u000e\u0019\u0019\u0019\u0019`;\n\nexport default class SynAudio {\n  constructor(options = {}) {\n    this._correlationSampleSize =\n      options.correlationSampleSize > 0 ? options.correlationSampleSize : 11025;\n    this._initialGranularity =\n      options.initialGranularity > 0 ? options.initialGranularity : 16;\n    this._correlationThreshold =\n      options.correlationThreshold >= 0 ? options.correlationThreshold : 0.5;\n\n    this._module = wasmModule.get(SynAudio);\n\n    if (!this._module) {\n      this._module = simd().then((simdSupported) =>\n        simdSupported\n          ? WebAssembly.compile(decode(simdWasm))\n          : WebAssembly.compile(decode(scalarWasm))\n      );\n      wasmModule.set(this._module);\n    }\n\n    this.SynAudioWorker = function SynAudioWorker(\n      module,\n      correlationSampleSize,\n      initialGranularity\n    ) {\n      this._sourceCache = new Map();\n\n      // correlation sample size must not exceed the size of each audio clip\n      this._getCorrelationSampleSize = (a, b) =>\n        Math.min(\n          a.samplesDecoded,\n          b.samplesDecoded,\n          this._correlationSampleSize\n        );\n\n      // initial granularity must not exceed the size of each audio clip\n      this._getInitialGranularity = (a, b) =>\n        Math.min(a.samplesDecoded, b.samplesDecoded, this._initialGranularity);\n\n      this._setAudioDataOnHeap = (input, output, heapPos) => {\n        const bytesPerElement = output.BYTES_PER_ELEMENT;\n\n        let floatPos = heapPos / bytesPerElement;\n\n        for (let i = 0; i < input.length; i++) {\n          heapPos += input[i].length * bytesPerElement;\n          output.set(input[i], floatPos);\n          floatPos += input[i].length;\n        }\n\n        return heapPos;\n      };\n\n      this._executeAsWorker = (functionName, params) => {\n        let source = this._sourceCache.get(functionName);\n\n        if (!source) {\n          let type = \"text/javascript\",\n            isNode,\n            webworkerSourceCode =\n              \"'use strict';\" +\n              `(${((\n                SynAudioWorker,\n                functionName,\n                correlationSampleSize,\n                initialGranularity\n              ) => {\n                self.onmessage = (msg) => {\n                  const worker = new SynAudioWorker(\n                    Promise.resolve(msg.data.module),\n                    correlationSampleSize,\n                    initialGranularity\n                  );\n\n                  worker._workerMethods\n                    .get(functionName)\n                    .apply(null, msg.data.params)\n                    .then((results) => {\n                      self.postMessage(results);\n                    });\n                };\n              }).toString()})(${SynAudioWorker.toString()}, \"${functionName}\", ${\n                this._correlationSampleSize\n              }, ${this._initialGranularity})`;\n\n          try {\n            isNode = typeof process.versions.node !== \"undefined\";\n          } catch {}\n\n          source = isNode\n            ? `data:${type};base64,${Buffer.from(webworkerSourceCode).toString(\n                \"base64\"\n              )}`\n            : URL.createObjectURL(new Blob([webworkerSourceCode], { type }));\n\n          this._sourceCache.set(functionName, source);\n        }\n\n        const worker = new (globalThis.Worker || Worker)(source, {\n          name: \"SynAudio\",\n        });\n\n        const result = new Promise((resolve) => {\n          worker.onmessage = (message) => {\n            worker.terminate();\n            resolve(message.data);\n          };\n        });\n\n        this._module.then((module) => {\n          worker.postMessage({\n            module,\n            params,\n          });\n        });\n\n        return result;\n      };\n\n      this._sync = (a, b) => {\n        const pageSize = 64 * 1024;\n        const floatByteLength = Float32Array.BYTES_PER_ELEMENT;\n\n        const correlationSampleSize = this._getCorrelationSampleSize(a, b);\n        const initialGranularity = this._getInitialGranularity(a, b);\n\n        const memory = new WebAssembly.Memory({\n          initial:\n            ((a.samplesDecoded * a.channelData.length +\n              b.samplesDecoded * b.channelData.length) *\n              floatByteLength) /\n              pageSize +\n            4,\n        });\n\n        return this._module\n          .then((module) =>\n            WebAssembly.instantiate(module, {\n              env: { memory },\n            })\n          )\n          .then(({ exports }) => {\n            const instanceExports = new Map(Object.entries(exports));\n\n            const correlate = instanceExports.get(\"correlate\");\n            const dataArray = new Float32Array(memory.buffer);\n            const heapView = new DataView(memory.buffer);\n\n            const aPtr = instanceExports.get(\"__heap_base\").value;\n            const bPtr = this._setAudioDataOnHeap(\n              a.channelData,\n              dataArray,\n              aPtr\n            );\n            const bestCorrelationPtr = this._setAudioDataOnHeap(\n              b.channelData,\n              dataArray,\n              bPtr\n            );\n            const bestSampleOffsetPtr = bestCorrelationPtr + floatByteLength;\n\n            correlate(\n              aPtr,\n              a.samplesDecoded,\n              a.channelData.length,\n              bPtr,\n              b.samplesDecoded,\n              b.channelData.length,\n              correlationSampleSize,\n              initialGranularity,\n              bestCorrelationPtr,\n              bestSampleOffsetPtr\n            );\n\n            const bestCorrelation = heapView.getFloat32(\n              bestCorrelationPtr,\n              true\n            );\n            const bestSampleOffset = heapView.getInt32(\n              bestSampleOffsetPtr,\n              true\n            );\n\n            return {\n              correlation: bestCorrelation,\n              sampleOffset: bestSampleOffset,\n            };\n          });\n      };\n\n      this._syncWorkerConcurrent = (a, b, threads) => {\n        const promises = [];\n        const lengths = [0];\n\n        // |-----------|       |-----------|     \"end\"\n        // \"start\"   |-|---------|       |-----------|\n        //           | |\n        //           | |correlationSampleSize\n\n        // split a buffer into equal chunks for threads\n        // overlap at the start of the buffer by correlation sample size\n        // overlap at the end of the buffer by correlation sample size\n\n        // initial granularity  low -> high, more -> less threads\n        // correlation sample   low -> high, less -> more threads\n        // file size            low -> high, less -> more threads\n\n        const correlationSampleSize = this._getCorrelationSampleSize(a, b);\n\n        // rough estimate for a good max thread count for performance\n        const maxThreads =\n          (Math.log(a.samplesDecoded * correlationSampleSize) /\n            Math.log(this._initialGranularity + 1)) *\n          Math.log(correlationSampleSize / 10000 + 1);\n\n        threads = Math.max(\n          Math.round(\n            Math.min(\n              threads,\n              maxThreads,\n              a.samplesDecoded / correlationSampleSize / 4\n            )\n          ),\n          1\n        );\n\n        const aLength = Math.ceil(a.samplesDecoded / threads);\n\n        let offset = 0;\n        for (let t = 0; t < threads; t++) {\n          const aSplit = {\n            channelData: [],\n          };\n\n          for (let i = 0; i < a.channelData.length; i++) {\n            const cutChannel = a.channelData[i].subarray(\n              offset,\n              offset + aLength + correlationSampleSize\n            );\n            aSplit.channelData.push(cutChannel);\n            aSplit.samplesDecoded = cutChannel.length;\n          }\n\n          offset += aLength - correlationSampleSize;\n          lengths.push(offset);\n\n          promises.push(this._syncWorker(aSplit, b));\n        }\n\n        return Promise.all(promises).then((results) => {\n          // find the result with the highest correlation and calculate the offset relative to the input data\n          let bestResultIdx = 0;\n          let bestCorrelation = -1;\n          for (let i = 0; i < results.length; i++)\n            if (results[i].correlation > bestCorrelation) {\n              bestResultIdx = i;\n              bestCorrelation = results[i].correlation;\n            }\n\n          return {\n            correlation: results[bestResultIdx].correlation,\n            sampleOffset:\n              results[bestResultIdx].sampleOffset + lengths[bestResultIdx],\n          };\n        });\n      };\n\n      this._syncWorker = (a, b) => {\n        return this._executeAsWorker(\"_sync\", [a, b]);\n      };\n\n      this._syncWorkerConcurrentMain = (a, b, threads) => {\n        // can't serialize the webworker polyfill in nodejs\n        return globalThis.Worker\n          ? this._executeAsWorker(\"_syncWorkerConcurrent\", [a, b, threads])\n          : this._syncWorkerConcurrent(a, b, threads);\n      };\n\n      // constructor\n\n      // needed to serialize minified code when methods are refererenced as a string\n      // prettier-ignore\n      this._workerMethods = new Map([\n        [\"_sync\", this._sync],\n        [\"_syncWorker\", this._syncWorker],\n        [\"_syncWorkerConcurrent\", this._syncWorkerConcurrent],\n      ]);\n\n      this._module = module;\n      this._correlationSampleSize = correlationSampleSize;\n      this._initialGranularity = initialGranularity;\n    };\n\n    this._instance = new this.SynAudioWorker(\n      this._module,\n      this._correlationSampleSize,\n      this._initialGranularity\n    );\n  }\n\n  async syncWorkerConcurrent(a, b, threads) {\n    return this._instance._syncWorkerConcurrentMain(\n      a,\n      b,\n      threads >= 1 ? threads : 1\n    );\n  }\n\n  async syncWorker(a, b) {\n    return this._instance._syncWorker(a, b);\n  }\n\n  async sync(a, b) {\n    return this._instance._sync(a, b);\n  }\n\n  async syncMultiple(clips, threads) {\n    threads = threads >= 1 ? threads : 8;\n\n    const workers = [];\n    const graph = [];\n\n    let notify = () => {},\n      wait = Promise.resolve(),\n      runningThreads = 0;\n\n    const resetNotify = () => {\n      wait = new Promise((resolve) => {\n        notify = resolve;\n      });\n    };\n\n    for (let i = 0; i < clips.length; i++) graph.push({ vertex: {} });\n\n    for (let v = 0; v < clips.length; v++) {\n      const vertexClip = clips[v];\n      const vertex = graph[v].vertex;\n\n      vertex.name = vertexClip.name;\n      vertex.samplesDecoded = vertexClip.data.samplesDecoded;\n      vertex.edges = new Set();\n\n      for (let e = 0; e < clips.length; e++) {\n        if (v === e) continue;\n\n        const edgeClip = clips[e];\n        const edge = graph[e];\n\n        runningThreads++;\n        workers.push(\n          this.syncWorker(vertexClip.data, edgeClip.data).then(\n            (correlationResult) => {\n              if (correlationResult.correlation > this._correlationThreshold) {\n                vertex.edges.add({\n                  parent: vertex,\n                  vertex: edge.vertex,\n                  samplesDecoded: edgeClip.data.samplesDecoded,\n                  ...correlationResult,\n                });\n              }\n              runningThreads--;\n              notify();\n            }\n          )\n        );\n\n        if (runningThreads >= threads) {\n          resetNotify();\n          await wait;\n        }\n      }\n    }\n\n    await Promise.all(workers);\n\n    // prettier-ignore\n    const weighResults = (a, b) => {\n      if (a.parent && b.parent && a.parent.samplesDecoded !== b.parent.samplesDecoded) return a.parent.samplesDecoded > b.parent.samplesDecoded;\n      if (a.correlation !== b.correlation) return a.correlation > b.correlation;\n      if (a.sampleOffset !== b.sampleOffset) return a.sampleOffset > b.sampleOffset;\n      return a.vertex && b.vertex && a.vertex.name.localeCompare(b.vertex.name) < 0;\n    };\n\n    // detect cycles and weigh for which edge to remove\n    const path = new Map();\n    const cycles = new Set();\n\n    const detectCycle = (vertex) => {\n      for (const edge of vertex.edges.values()) {\n        if (path.has(vertex)) return path.get(vertex);\n\n        path.set(vertex, edge);\n\n        const cycleStartEdge = detectCycle(edge.vertex);\n        const cycleEndEdge = edge;\n\n        if (cycleStartEdge) {\n          let keep, remove;\n          if (weighResults(cycleStartEdge, cycleEndEdge)) {\n            keep = cycleStartEdge;\n            remove = cycleEndEdge;\n          } else {\n            keep = cycleEndEdge;\n            remove = cycleStartEdge;\n          }\n\n          if (!remove.cycleWith) {\n            remove.cycleWith = new Set();\n            cycles.add(remove);\n          }\n\n          remove.cycleWith.add(keep);\n\n          if (keep.cycleWith) {\n            keep.cycleWith.delete(remove);\n          }\n        }\n\n        path.delete(vertex);\n      }\n    };\n\n    for (const { vertex } of graph) detectCycle(vertex);\n\n    // delete any cycles\n    for (const edge of cycles)\n      if (edge.cycleWith.size) edge.parent.edges.delete(edge);\n\n    // find the root elements\n    const roots = new Set();\n    for (const v of graph) roots.add(v.vertex);\n    for (const v of graph)\n      for (const edge of v.vertex.edges) roots.delete(edge.vertex);\n\n    // build a unique sequence of matches for each root\n    const traverseRoot = (path, root, edges, sampleOffsetFromRoot = 0) => {\n      for (const edge of edges) {\n        if (\n          !(path.has(edge.vertex) && weighResults(path.get(edge.vertex), edge))\n        )\n          path.set(edge.vertex, {\n            name: edge.vertex.name,\n            correlation: edge.correlation,\n            sampleOffset: sampleOffsetFromRoot + edge.sampleOffset,\n          });\n\n        traverseRoot(\n          path,\n          root,\n          edge.vertex.edges,\n          sampleOffsetFromRoot + edge.sampleOffset\n        );\n      }\n    };\n\n    const results = [];\n\n    for (const root of roots) {\n      const path = new Map();\n      path.set(root, {\n        name: root.name,\n        sampleOffset: 0,\n      });\n      traverseRoot(path, root, root.edges);\n\n      results.push(\n        [...path.values()].sort(\n          (a, b) =>\n            a.sampleOffset - b.sampleOffset ||\n            (a.correlation || 0) - (b.correlation || 0) ||\n            b.name.localeCompare(a.name)\n        )\n      );\n    }\n\n    return results;\n  }\n}\n","import SynAudio from \"./src/SynAudio.js\";\n\nexport default SynAudio;\n"],"names":["module","exports","Worker","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","t","o","s","c","e","arguments","length","undefined","n","r","Int32Array","i","Uint8Array","map","parseInt","substring","Map","forEach","set","l","a","f","g","h","p","u","DataView","buffer","getInt32","d","charCodeAt","get","m","subarray","console","error","Error","simd","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","WebAssembly","validate","stop","apply","wasmModule","WeakMap","simdWasm","String","_templateObject","scalarWasm","_templateObject2","SynAudio","options","_classCallCheck","this","_correlationSampleSize","correlationSampleSize","_initialGranularity","initialGranularity","_correlationThreshold","correlationThreshold","_module","then","simdSupported","compile","decode","SynAudioWorker","_this","_sourceCache","_getCorrelationSampleSize","b","Math","min","samplesDecoded","_getInitialGranularity","_setAudioDataOnHeap","input","output","heapPos","bytesPerElement","BYTES_PER_ELEMENT","floatPos","_executeAsWorker","functionName","params","source","isNode","type","webworkerSourceCode","concat","self","onmessage","msg","Promise","resolve","data","_workerMethods","results","postMessage","toString","process","versions","node","_unused","Buffer","from","URL","createObjectURL","Blob","worker","globalThis","name","result","message","terminate","_sync","floatByteLength","Float32Array","memory","Memory","initial","channelData","instantiate","env","_ref2","instanceExports","entries","correlate","dataArray","heapView","aPtr","bPtr","bestCorrelationPtr","bestSampleOffsetPtr","correlation","getFloat32","sampleOffset","_syncWorkerConcurrent","threads","promises","lengths","maxThreads","log","max","round","aLength","ceil","offset","aSplit","cutChannel","push","_syncWorker","all","bestResultIdx","bestCorrelation","_syncWorkerConcurrentMain","_instance","_createClass","key","_callee2","_context2","_x","_x2","_x3","_callee3","_context3","_x4","_x5","_callee4","_context4","_x6","_x7","_syncMultiple","_callee5","clips","workers","graph","notify","wait","runningThreads","resetNotify","_loop","v","weighResults","path","cycles","detectCycle","_i2","_graph","vertex","_iterator2","_step2","_edge2","roots","_i3","_graph2","_v","_i4","_graph3","_v2","_iterator3","_step3","edge","traverseRoot","_iterator5","_step5","root","_path","_this2","_context7","vertexClip","_loop2","_context6","edges","Set","edgeClip","_context5","syncWorker","correlationResult","add","_objectSpread","parent","delegateYield","t0","localeCompare","_step","_iterator","_createForOfIteratorHelper","values","done","has","cycleStartEdge","cycleEndEdge","keep","remove","cycleWith","delete","err","size","_step4","sampleOffsetFromRoot","_iterator4","_toConsumableArray","sort","_x8","_x9"],"sourceRoot":""}