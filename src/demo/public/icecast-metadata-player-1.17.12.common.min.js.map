{"version":3,"file":"icecast-metadata-player-1.17.12.common.min.js","mappings":"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","sources":["webpack://IcecastMetadataPlayer/./node_modules/@wasm-audio-decoders/common/src/utilities.js","webpack://IcecastMetadataPlayer/./node_modules/@wasm-audio-decoders/common/src/WASMAudioDecoderCommon.js","webpack://IcecastMetadataPlayer/./node_modules/@wasm-audio-decoders/common/src/WASMAudioDecoderWorker.js"],"sourcesContent":["export const assignNames = (Class, name) => {\n  Object.defineProperty(Class, \"name\", { value: name });\n};\n","import { decode } from \"simple-yenc\";\n\nexport default function WASMAudioDecoderCommon() {\n  // setup static methods\n  const uint8Array = Uint8Array;\n  const float32Array = Float32Array;\n\n  if (!WASMAudioDecoderCommon.modules) {\n    Object.defineProperties(WASMAudioDecoderCommon, {\n      modules: {\n        value: new WeakMap(),\n      },\n\n      setModule: {\n        value(Ref, module) {\n          WASMAudioDecoderCommon.modules.set(Ref, Promise.resolve(module));\n        },\n      },\n\n      getModule: {\n        value(Ref, wasmString) {\n          let module = WASMAudioDecoderCommon.modules.get(Ref);\n\n          if (!module) {\n            if (!wasmString) {\n              wasmString = Ref.wasm;\n              module = WASMAudioDecoderCommon.inflateDynEncodeString(\n                wasmString,\n              ).then((data) => WebAssembly.compile(data));\n            } else {\n              module = WebAssembly.compile(decode(wasmString));\n            }\n\n            WASMAudioDecoderCommon.modules.set(Ref, module);\n          }\n\n          return module;\n        },\n      },\n\n      concatFloat32: {\n        value(buffers, length) {\n          let ret = new float32Array(length),\n            i = 0,\n            offset = 0;\n\n          while (i < buffers.length) {\n            ret.set(buffers[i], offset);\n            offset += buffers[i++].length;\n          }\n\n          return ret;\n        },\n      },\n\n      getDecodedAudio: {\n        value: (errors, channelData, samplesDecoded, sampleRate, bitDepth) => ({\n          errors,\n          channelData,\n          samplesDecoded,\n          sampleRate,\n          bitDepth,\n        }),\n      },\n\n      getDecodedAudioMultiChannel: {\n        value(\n          errors,\n          input,\n          channelsDecoded,\n          samplesDecoded,\n          sampleRate,\n          bitDepth,\n        ) {\n          let channelData = [],\n            i,\n            j;\n\n          for (i = 0; i < channelsDecoded; i++) {\n            const channel = [];\n            for (j = 0; j < input.length; ) channel.push(input[j++][i] || []);\n            channelData.push(\n              WASMAudioDecoderCommon.concatFloat32(channel, samplesDecoded),\n            );\n          }\n\n          return WASMAudioDecoderCommon.getDecodedAudio(\n            errors,\n            channelData,\n            samplesDecoded,\n            sampleRate,\n            bitDepth,\n          );\n        },\n      },\n\n      /*\n       ******************\n       * Compression Code\n       ******************\n       */\n\n      inflateDynEncodeString: {\n        value(source) {\n          source = decode(source);\n\n          return new Promise((resolve) => {\n            // prettier-ignore\n            const puffString = String.raw`dynEncode0128e975dc2c()((()>+*§§)§,§§§§)§+§§§)§+.-()(*)-+)(8.7*§)i¸¸,3§(i¸¸,3/G+.¡*(,(,3+)2å:-),§H(P*DI*H(P*@I++hH)H*r,hH(H(P*<J,i)^*<H,H(P*4U((I-H(H*i0J,^*DH+H-H*I+H,I*4)33H(H*H)^*DH(H+H)^*@H+i§H)i§3æ*).§K(iHI/+§H,iHn,§H+i(H+i(rCJ0I,H*I-+hH,,hH(H-V)(i)J.H.W)(i)c)(H,i)I,H-i*I-4)33i(I.*hH(V)(H+n5(H(i*I-i(I,i)I.+hH,i*J+iHn,hi(I-i*I,+hH,H/H-c)(H,iFn,hi(I,+hH,H0n5-H*V)(J(,hH/H(i)J(H(V)(J(i)c)(H)H(i)H,c)(3H*i*I*H,i)I,4(3(-H(H,W)(H-I-H,i*I,4)3(3(3H,H-I1H+I,H.i)H1V)(J.i(v5(33H.-H(H,i(c)(H,i*I,4)333)-§i*I*+§H*iHn,hi73H,H(i)8(H+J+H)P*(H*V)(J-r,§H)P*,H.i)H+H,i)V)(-H*i*I*H+i)I+H-H.I.H,H-i)I,4)333Ã+)-§iø7i(^*(iü7I,*h+hH+iDn,h*hilI+i)I,+hH+,hH+iô7H,c)(i)H+i´8W)(H,I,H+i*I+4)-+hH(H)8*J-i(p5.*h*h*hH-i')u,hH(P*(J+,hH(P*0J,H(P*,n50H+H,H-b((3H(P*0i)I.4)3H-i¨*n5*H-iÅ*s,hi73H-i)J+V)&+I,H(H+V)æ,8(I.H(H*8*J-i(p51H-i)J+i¸7V)(H(H+iø7V)(8(J/H(P*0J+s,hi73H+H,H.J,I.H(P*(m5(H.H(P*,s5.+hH,m5*H(P*(J.H+H.H+H/U((b((H(H(P*0i)J+^*0H,i)I,4(3(3H(H.^*03H-i¨*o5)33i(73(3(3-H,H+i)c)(H,i*I,H+i)I+4)33i)I-3H-3!2)0§K(i\u00182J,L(H,H(^*(H,H*^*4H,i(^*0H,i(^*DH,j(_*<H,H)P*(^*,H,H+P*(^*8*h*h+hH,i)8(I3i§I**h*h*h*h*h*h*hH,i*8(6+(),03H,j(_*@i*I-H,P*<J.i,J(H,P*8J/s50H,H.i+J0^*<i¦I*H.H,P*4J1J.U(*H.U((J2i')o5/H.U()I.H,H(^*<H0H1U((H.i0J.i§i0i')o5/H/H.H2J*H(J.q50H,P*0J/H*I-H,P*(J0,hH,P*,H-q,hi)I-423+hH*m5+H/H0H(H1U((b((H/i)I/H(i)I(H*i)I*4(3(3H,H.^*<H,H-^*04*3iØ1U((5+i(I(i¨7i\b1^*(i$6iè1^*(i°7iè6^*(i¬7iÈ6^*(+hH(iÈ*n,hiÈ*I(+hH(i¨,n,hi¨,I(+hH(iØ,n,hiØ,I(+hH(iè,o,hH,i\u0018-H(i0c)(H(i*I(4)33iè1i\b1H,i\u0018-iÈ*8)Bi(I(+hH(ido,hH,i\u0018-H(i-c)(H(i*I(4)33iÈ6iè6H,i\u0018-iF8)BiØ1i)b((41-H,i\u0018-H(i/c)(H(i*I(4)3(3(-H,i\u0018-H(i1c)(H(i*I(4)3(3(-H,i\u0018-H(i0c)(H(i*I(4)3(3(3H,H/^*0H,H(^*<3i(I*4*3H,H,i¸)^*TH,H,iø-^*PH,H,iX^*LH,H,i\u0018(^*HH,i-8(I(H,i-8(I-i¥I*H,i,8(I.H(iErH-iEr5)H(i©*I1H-i)I0i(i;H.i,J(i(H(i(rCJ(J*H*i;sCI*i¨1I-H(I/+hH/,hH,i\u0018-H-V)(i)H,i+8(c)(H/i)I/H-i*I-H*i)I*4)-H(i)i¨1I/+hH(H*o,hH,i\u0018-H/V)(i)i(c)(H/i*I/H(i)I(4)33i¤I*H,iø-H,i¸)H,i\u0018-i;8)5+H0H1I2i(I-+hH-H2p,hH,H,iP8*J*i(p5-H*i7u,hH,i\u0018-H-i)H*c)(H-i)I-4*3i(I/i+I.i+I(*h*h*hH*i86*(*)3H-m,hi£I*403H-i)H,W)\u0016-I/i*I(4)3i3I.i/I(3H2H,H(8(H.J(H-J.p,hi¢I*4.3H,i\u0018-H-i)I*+hH(,hH*H/c)(H*i*I*H(i)I(4)-H.I-4+3(3(33H,W)\u00181m,hiI*4,3H,iø-H,i¸)H,i\u0018-H18)J(,hi¡I*H(i(p5,H1H,V)ú-H,V)ø-o5,3H,i\u0018(H,iXH,i\u0018-H1i)H08)J(,hi I*H(i(p5,H0H,V)H,V)o5,3H,H,iPH,iH8+I*4+3(3(3H,i$6i¬78+I*3H*H3m5(3i)I-H*i(r5)3H)H,P*0^*(H+H,P*<^*(H*I-3H,i\u00182L(H-33Á)+(i¨03b+(,(-(.(/(0(1(2(3(5(7(9(;(?(C(G(K(S([(c(k({(((«(Ë(ë(\u000b(*)(iø03O)()()()(*(*(*(*(+(+(+(+(,(,(,(,(-(-(-(-(i¨13M8(9(:(((0(/(1(.(2(-(3(,(4(+(5(*(6()(7(T7*S7US0U `;\n\n            WASMAudioDecoderCommon.getModule(WASMAudioDecoderCommon, puffString)\n              .then((wasm) => WebAssembly.instantiate(wasm, {}))\n              .then(({ exports }) => {\n                // required for minifiers that mangle the __heap_base property\n                const instanceExports = new Map(Object.entries(exports));\n\n                const puff = instanceExports.get(\"puff\");\n                const memory = instanceExports.get(\"memory\")[\"buffer\"];\n                const dataArray = new uint8Array(memory);\n                const heapView = new DataView(memory);\n\n                let heapPos = instanceExports.get(\"__heap_base\");\n\n                // source length\n                const sourceLength = source.length;\n                const sourceLengthPtr = heapPos;\n                heapPos += 4;\n                heapView.setInt32(sourceLengthPtr, sourceLength, true);\n\n                // source data\n                const sourcePtr = heapPos;\n                heapPos += sourceLength;\n                dataArray.set(source, sourcePtr);\n\n                // destination length\n                const destLengthPtr = heapPos;\n                heapPos += 4;\n                heapView.setInt32(\n                  destLengthPtr,\n                  dataArray.byteLength - heapPos,\n                  true,\n                );\n\n                // destination data fills in the rest of the heap\n                puff(heapPos, destLengthPtr, sourcePtr, sourceLengthPtr);\n\n                resolve(\n                  dataArray.slice(\n                    heapPos,\n                    heapPos + heapView.getInt32(destLengthPtr, true),\n                  ),\n                );\n              });\n          });\n        },\n      },\n    });\n  }\n\n  Object.defineProperty(this, \"wasm\", {\n    enumerable: true,\n    get: () => this._wasm,\n  });\n\n  this.getOutputChannels = (outputData, channelsDecoded, samplesDecoded) => {\n    let output = [],\n      i = 0;\n\n    while (i < channelsDecoded)\n      output.push(\n        outputData.slice(\n          i * samplesDecoded,\n          i++ * samplesDecoded + samplesDecoded,\n        ),\n      );\n\n    return output;\n  };\n\n  this.allocateTypedArray = (len, TypedArray, setPointer = true) => {\n    const ptr = this._wasm.malloc(TypedArray.BYTES_PER_ELEMENT * len);\n    if (setPointer) this._pointers.add(ptr);\n\n    return {\n      ptr: ptr,\n      len: len,\n      buf: new TypedArray(this._wasm.HEAP, ptr, len),\n    };\n  };\n\n  this.free = () => {\n    this._pointers.forEach((ptr) => {\n      this._wasm.free(ptr);\n    });\n    this._pointers.clear();\n  };\n\n  this.codeToString = (ptr) => {\n    const characters = [],\n      heap = new Uint8Array(this._wasm.HEAP);\n    for (let character = heap[ptr]; character !== 0; character = heap[++ptr])\n      characters.push(character);\n\n    return String.fromCharCode.apply(null, characters);\n  };\n\n  this.addError = (\n    errors,\n    message,\n    frameLength,\n    frameNumber,\n    inputBytes,\n    outputSamples,\n  ) => {\n    errors.push({\n      message: message,\n      frameLength: frameLength,\n      frameNumber: frameNumber,\n      inputBytes: inputBytes,\n      outputSamples: outputSamples,\n    });\n  };\n\n  this.instantiate = (_EmscriptenWASM, _module) => {\n    if (_module) WASMAudioDecoderCommon.setModule(_EmscriptenWASM, _module);\n    this._wasm = new _EmscriptenWASM(WASMAudioDecoderCommon).instantiate();\n    this._pointers = new Set();\n\n    return this._wasm.ready.then(() => this);\n  };\n}\n","import NodeWorker from \"@eshaz/web-worker\";\nimport WASMAudioDecoderCommon from \"./WASMAudioDecoderCommon.js\";\n\nconst getWorker = () => globalThis.Worker || NodeWorker;\n\nexport default class WASMAudioDecoderWorker extends getWorker() {\n  constructor(options, name, Decoder, EmscriptenWASM) {\n    if (!WASMAudioDecoderCommon.modules) new WASMAudioDecoderCommon();\n\n    let source = WASMAudioDecoderCommon.modules.get(Decoder);\n\n    if (!source) {\n      let type = \"text/javascript\",\n        isNode,\n        webworkerSourceCode =\n          \"'use strict';\" +\n          // dependencies need to be manually resolved when stringifying this function\n          `(${((_Decoder, _WASMAudioDecoderCommon, _EmscriptenWASM) => {\n            // We're in a Web Worker\n\n            // setup Promise that will be resolved once the WebAssembly Module is received\n            let decoder,\n              moduleResolve,\n              modulePromise = new Promise((resolve) => {\n                moduleResolve = resolve;\n              });\n\n            self.onmessage = ({ data: { id, command, data } }) => {\n              let messagePromise = modulePromise,\n                messagePayload = { id },\n                transferList;\n\n              if (command === \"init\") {\n                Object.defineProperties(_Decoder, {\n                  WASMAudioDecoderCommon: { value: _WASMAudioDecoderCommon },\n                  EmscriptenWASM: { value: _EmscriptenWASM },\n                  module: { value: data.module },\n                  isWebWorker: { value: true },\n                });\n\n                decoder = new _Decoder(data.options);\n                moduleResolve();\n              } else if (command === \"free\") {\n                decoder.free();\n              } else if (command === \"ready\") {\n                messagePromise = messagePromise.then(() => decoder.ready);\n              } else if (command === \"reset\") {\n                messagePromise = messagePromise.then(() => decoder.reset());\n              } else {\n                // \"decode\":\n                // \"decodeFrame\":\n                // \"decodeFrames\":\n                Object.assign(\n                  messagePayload,\n                  decoder[command](\n                    // detach buffers\n                    Array.isArray(data)\n                      ? data.map((data) => new Uint8Array(data))\n                      : new Uint8Array(data),\n                  ),\n                );\n                // The \"transferList\" parameter transfers ownership of channel data to main thread,\n                // which avoids copying memory.\n                transferList = messagePayload.channelData\n                  ? messagePayload.channelData.map((channel) => channel.buffer)\n                  : [];\n              }\n\n              messagePromise.then(() =>\n                self.postMessage(messagePayload, transferList),\n              );\n            };\n          }).toString()})(${Decoder}, ${WASMAudioDecoderCommon}, ${EmscriptenWASM})`;\n\n      try {\n        isNode = typeof process.versions.node !== \"undefined\";\n      } catch {}\n\n      source = isNode\n        ? `data:${type};base64,${Buffer.from(webworkerSourceCode).toString(\n            \"base64\",\n          )}`\n        : URL.createObjectURL(new Blob([webworkerSourceCode], { type }));\n\n      WASMAudioDecoderCommon.modules.set(Decoder, source);\n    }\n\n    super(source, { name });\n\n    this._id = Number.MIN_SAFE_INTEGER;\n    this._enqueuedOperations = new Map();\n\n    this.onmessage = ({ data }) => {\n      const { id, ...rest } = data;\n      this._enqueuedOperations.get(id)(rest);\n      this._enqueuedOperations.delete(id);\n    };\n\n    new EmscriptenWASM(WASMAudioDecoderCommon).getModule().then((module) => {\n      this.postToDecoder(\"init\", { module, options });\n    });\n  }\n\n  async postToDecoder(command, data) {\n    return new Promise((resolve) => {\n      this.postMessage({\n        command,\n        id: this._id,\n        data,\n      });\n\n      this._enqueuedOperations.set(this._id++, resolve);\n    });\n  }\n\n  get ready() {\n    return this.postToDecoder(\"ready\");\n  }\n\n  async free() {\n    await this.postToDecoder(\"free\").finally(() => {\n      this.terminate();\n    });\n  }\n\n  async reset() {\n    await this.postToDecoder(\"reset\");\n  }\n}\n"],"names":["assignNames","Class","name","Object","defineProperty","value","WASMAudioDecoderCommon","uint8Array","Uint8Array","float32Array","Float32Array","modules","defineProperties","WeakMap","setModule","Ref","module","set","Promise","resolve","getModule","wasmString","get","WebAssembly","compile","wasm","inflateDynEncodeString","then","data","concatFloat32","buffers","length","ret","i","offset","getDecodedAudio","errors","channelData","samplesDecoded","sampleRate","bitDepth","getDecodedAudioMultiChannel","input","channelsDecoded","j","channel","push","source","puffString","String","raw","instantiate","exports","instanceExports","Map","entries","puff","memory","dataArray","heapView","DataView","heapPos","sourceLength","sourceLengthPtr","setInt32","sourcePtr","destLengthPtr","byteLength","slice","getInt32","this","enumerable","_wasm","getOutputChannels","outputData","output","allocateTypedArray","len","TypedArray","setPointer","ptr","malloc","BYTES_PER_ELEMENT","_pointers","add","buf","HEAP","free","forEach","clear","codeToString","characters","heap","character","fromCharCode","apply","addError","message","frameLength","frameNumber","inputBytes","outputSamples","_EmscriptenWASM","_module","Set","ready","WASMAudioDecoderWorker","globalThis","Worker","getWorker","constructor","options","Decoder","EmscriptenWASM","isNode","type","webworkerSourceCode","_Decoder","_WASMAudioDecoderCommon","decoder","moduleResolve","modulePromise","self","onmessage","id","command","transferList","messagePromise","messagePayload","isWebWorker","reset","assign","Array","isArray","map","buffer","postMessage","toString","process","versions","node","Buffer","from","URL","createObjectURL","Blob","super","_id","Number","MIN_SAFE_INTEGER","_enqueuedOperations","rest","delete","postToDecoder","finally","terminate"],"sourceRoot":""}