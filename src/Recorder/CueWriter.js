const fs = require("fs");
const path = require("path");
const { Transform } = require("stream");

const CueBuilder = require("./CueBuilder");

class CueWriter extends Transform {
  constructor({
    startDate,
    cueRollover,
    prependDate,
    dateEntries,
    name,
    icyHeaders,
    fileName,
  }) {
    super({ objectMode: true });

    const FORMAT_MATCHER = /(?:\.([^.]+))?$/;

    this._startDate = startDate;
    this._cueRollover = cueRollover;
    this._name = name;
    this._fileName = fileName;
    this._dateEntries = dateEntries;
    this._prependDate = prependDate;
    this._name = name;
    this._icyHeaders = icyHeaders;

    this._fileNameNoExt = fileName.replace(FORMAT_MATCHER, "");

    this._cueFileWritable = null;
    this._cueBuilder = null;
    this._cueRolloverCount = 0;

    this._fileNames = [];
    this._newFile();
  }

  get fileNames() {
    return this._fileNames;
  }

  set cueRolloverCount(cueRolloverCount) {
    this._cueRolloverCount = cueRolloverCount;
  }

  set startDate(startDate) {
    this._startDate = startDate;
  }

  _newFile() {
    const cueFileName = this._cueRolloverCount
      ? `${this._fileNameNoExt}.${this._cueRolloverCount}.cue`
      : `${this._fileNameNoExt}.cue`;

    this._cueFileWritable = this._openFile(cueFileName);
    this.pipe(this._cueFileWritable);

    this._cueBuilder = new CueBuilder();

    const { name, ...icyHeaders } = this._icyHeaders;

    const cueHeader = CueBuilder.getHeader({
      comment:
        "Generated by IcecastMetadataRecorder https://github.com/eshaz/icecast-metadata-js",
      title: this._name || name, // override the header name if passed in
      ...(this._name ? this._icyHeaders : { ...icyHeaders }), // do not duplicate the header name if used in the title
      file: path.basename(this._fileName),
      date: this._startDate.toISOString(),
    });

    this.push(cueHeader, "ascii");
  }

  _openFile(fileName) {
    try {
      fs.mkdirSync(path.dirname(fileName), { recursive: true });
    } catch (e) {
      if (e.code !== "EEXIST") throw e;
    }

    this._fileNames.push(fileName);
    return fs.createWriteStream(fileName);
  }

  _checkRollover(trackCount, time) {
    if (trackCount + 1 === this._cueRollover) {
      this.push(this._cueBuilder.addTrack({ title: "END" }, time), "ascii");
      this._cueRolloverCount++;

      this.unpipe(this._cueFileWritable);
      this._cueFileWritable.end();

      this._newFile();
    }
  }

  _transform(meta, encoding, callback) {
    const trackCount = this._cueBuilder.trackCount;

    this._checkRollover(trackCount, meta.time);

    /**
     * When there is only one more cue entry remaining
     * until the next rollover, insert an END track.
     * There is no way to indicate the end of a cue file
     * so this will have to do.
     *
     * Reasonable rollover thresholds should be based on your player's limitations.
     * (i.e. Foobar2000 accepts up to 999 tracks in the cue file)
     */

    const timeStamp = new Date(
      this._startDate.getTime() + meta.time * 1000
    ).toISOString();

    const { StreamTitle, ...restOfMetadata } = meta.metadata;

    const track = this._cueBuilder.addTrack(
      {
        title: this._prependDate ? `${timeStamp} ${StreamTitle}` : StreamTitle,
        ...(this._dateEntries
          ? { date: `${timeStamp.substring(0, 16)}Z` }
          : {}),
        ...restOfMetadata,
      },
      (trackCount || this._cueRolloverCount) && meta.time // force metadata for first track to show immediately
    );

    callback(null, track);
  }
}

module.exports = CueWriter;
