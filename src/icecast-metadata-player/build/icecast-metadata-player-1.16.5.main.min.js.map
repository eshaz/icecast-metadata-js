{"version":3,"file":"icecast-metadata-player-1.16.5.main.min.js","mappings":"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","sources":["webpack://IcecastMetadataPlayer/webpack/runtime/chunk loaded","webpack://IcecastMetadataPlayer/webpack/runtime/load script","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/constants.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/utilities.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/HeaderCache.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/globals.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/Parser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/containers/Frame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/CodecFrame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/metadata/ID3v2.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/CodecHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/mpeg/MPEGHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/mpeg/MPEGFrame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/mpeg/MPEGParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/aac/AACHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/aac/AACFrame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/aac/AACParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/flac/FLACFrame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/flac/FLACHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/flac/FLACParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/containers/ogg/OggPageHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/containers/ogg/OggPage.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/opus/OpusFrame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/opus/OpusHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/opus/OpusParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/vorbis/VorbisFrame.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/vorbis/VorbisHeader.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/codecs/vorbis/VorbisParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/containers/ogg/OggParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/src/CodecParser.js","webpack://IcecastMetadataPlayer/./node_modules/codec-parser/index.js","webpack://IcecastMetadataPlayer/webpack/bootstrap","webpack://IcecastMetadataPlayer/webpack/runtime/chunk prefetch function","webpack://IcecastMetadataPlayer/webpack/runtime/define property getters","webpack://IcecastMetadataPlayer/webpack/runtime/ensure chunk","webpack://IcecastMetadataPlayer/webpack/runtime/get javascript chunk filename","webpack://IcecastMetadataPlayer/webpack/runtime/global","webpack://IcecastMetadataPlayer/webpack/runtime/hasOwnProperty shorthand","webpack://IcecastMetadataPlayer/webpack/runtime/make namespace object","webpack://IcecastMetadataPlayer/webpack/runtime/publicPath","webpack://IcecastMetadataPlayer/webpack/runtime/jsonp chunk loading","webpack://IcecastMetadataPlayer/webpack/runtime/startup prefetch","webpack://IcecastMetadataPlayer/./src/global.js","webpack://IcecastMetadataPlayer/./src/EventTargetPolyfill.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/MetadataParser/Stats.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/MetadataParser/MetadataParser.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/MetadataParser/IcyMetadataParser.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/MetadataParser/OggMetadataParser.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/MetadataParser/DualMetadataParser.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/IcecastMetadataReader.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/IcecastReadableStream.js","webpack://IcecastMetadataPlayer/./node_modules/icecast-metadata-js/src/IcecastMetadataQueue.js","webpack://IcecastMetadataPlayer/./src/FrameQueue.js","webpack://IcecastMetadataPlayer/./src/players/Player.js","webpack://IcecastMetadataPlayer/./src/players/HTML5Player.js","webpack://IcecastMetadataPlayer/./src/players/MediaSourcePlayer.js","webpack://IcecastMetadataPlayer/./src/players/WebAudioPlayer.js","webpack://IcecastMetadataPlayer/./src/PlayerFactory.js","webpack://IcecastMetadataPlayer/./src/IcecastMetadataPlayer.js"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"IcecastMetadataPlayer:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","const symbol = Symbol;\n\n// prettier-ignore\n/*\n[\n  [\n    \"left, right\",\n    \"left, right, center\",\n    \"left, center, right\",\n    \"center, left, right\",\n    \"center\"\n  ],\n  [\n    \"front left, front right\",\n    \"front left, front right, front center\",\n    \"front left, front center, front right\",\n    \"front center, front left, front right\",\n    \"front center\"\n  ],\n  [\n    \"side left, side right\",\n    \"side left, side right, side center\",\n    \"side left, side center, side right\",\n    \"side center, side left, side right\",\n    \"side center\"\n  ],\n  [\n    \"rear left, rear right\",\n    \"rear left, rear right, rear center\",\n    \"rear left, rear center, rear right\",\n    \"rear center, rear left, rear right\",\n    \"rear center\"\n  ]\n]\n*/\n\nconst mappingJoin = \", \";\n\nexport const channelMappings = (() => {\n  const front = \"front\";\n  const side = \"side\";\n  const rear = \"rear\";\n  const left = \"left\";\n  const center = \"center\";\n  const right = \"right\";\n\n  return [\"\", front + \" \", side + \" \", rear + \" \"].map((x) =>\n    [\n      [left, right],\n      [left, right, center],\n      [left, center, right],\n      [center, left, right],\n      [center],\n    ].flatMap((y) => y.map((z) => x + z).join(mappingJoin)),\n  );\n})();\n\nexport const lfe = \"LFE\";\nexport const monophonic = \"monophonic (mono)\";\nexport const stereo = \"stereo\";\nconst surround = \"surround\";\n\nexport const getChannelMapping = (channelCount, ...mappings) =>\n  `${\n    [\n      monophonic,\n      stereo,\n      `linear ${surround}`,\n      \"quadraphonic\",\n      `5.0 ${surround}`,\n      `5.1 ${surround}`,\n      `6.1 ${surround}`,\n      `7.1 ${surround}`,\n    ][channelCount - 1]\n  } (${mappings.join(mappingJoin)})`;\n\n// prettier-ignore\nexport const vorbisOpusChannelMapping = [\n  monophonic,\n  getChannelMapping(2,channelMappings[0][0]),\n  getChannelMapping(3,channelMappings[0][2]),\n  getChannelMapping(4,channelMappings[1][0],channelMappings[3][0]),\n  getChannelMapping(5,channelMappings[1][2],channelMappings[3][0]),\n  getChannelMapping(6,channelMappings[1][2],channelMappings[3][0],lfe),\n  getChannelMapping(7,channelMappings[1][2],channelMappings[2][0],channelMappings[3][4],lfe),\n  getChannelMapping(8,channelMappings[1][2],channelMappings[2][0],channelMappings[3][0],lfe),\n]\n\n// sampleRates\nexport const rate192000 = 192000;\nexport const rate176400 = 176400;\nexport const rate96000 = 96000;\nexport const rate88200 = 88200;\nexport const rate64000 = 64000;\nexport const rate48000 = 48000;\nexport const rate44100 = 44100;\nexport const rate32000 = 32000;\nexport const rate24000 = 24000;\nexport const rate22050 = 22050;\nexport const rate16000 = 16000;\nexport const rate12000 = 12000;\nexport const rate11025 = 11025;\nexport const rate8000 = 8000;\nexport const rate7350 = 7350;\n\n// header key constants\nexport const absoluteGranulePosition = \"absoluteGranulePosition\";\nexport const bandwidth = \"bandwidth\";\nexport const bitDepth = \"bitDepth\";\nexport const bitrate = \"bitrate\";\nexport const bitrateMaximum = bitrate + \"Maximum\";\nexport const bitrateMinimum = bitrate + \"Minimum\";\nexport const bitrateNominal = bitrate + \"Nominal\";\nexport const buffer = \"buffer\";\nexport const bufferFullness = buffer + \"Fullness\";\nexport const codec = \"codec\";\nexport const codecFrames = codec + \"Frames\";\nexport const coupledStreamCount = \"coupledStreamCount\";\nexport const crc = \"crc\";\nexport const crc16 = crc + \"16\";\nexport const crc32 = crc + \"32\";\nexport const data = \"data\";\nexport const description = \"description\";\nexport const duration = \"duration\";\nexport const emphasis = \"emphasis\";\nexport const hasOpusPadding = \"hasOpusPadding\";\nexport const header = \"header\";\nexport const isContinuedPacket = \"isContinuedPacket\";\nexport const isCopyrighted = \"isCopyrighted\";\nexport const isFirstPage = \"isFirstPage\";\nexport const isHome = \"isHome\";\nexport const isLastPage = \"isLastPage\";\nexport const isOriginal = \"isOriginal\";\nexport const isPrivate = \"isPrivate\";\nexport const isVbr = \"isVbr\";\nexport const layer = \"layer\";\nexport const length = \"length\";\nexport const mode = \"mode\";\nexport const modeExtension = mode + \"Extension\";\nexport const mpeg = \"mpeg\";\nexport const mpegVersion = mpeg + \"Version\";\nexport const numberAACFrames = \"numberAAC\" + \"Frames\";\nexport const outputGain = \"outputGain\";\nexport const preSkip = \"preSkip\";\nexport const profile = \"profile\";\nexport const profileBits = symbol();\nexport const protection = \"protection\";\nexport const rawData = \"rawData\";\nexport const segments = \"segments\";\nexport const subarray = \"subarray\";\nexport const version = \"version\";\nexport const vorbis = \"vorbis\";\nexport const vorbisComments = vorbis + \"Comments\";\nexport const vorbisSetup = vorbis + \"Setup\";\n\nconst block = \"block\";\nexport const blockingStrategy = block + \"ingStrategy\";\nexport const blockingStrategyBits = symbol();\nexport const blockSize = block + \"Size\";\nexport const blocksize0 = block + \"size0\";\nexport const blocksize1 = block + \"size1\";\nexport const blockSizeBits = symbol();\n\nconst channel = \"channel\";\nexport const channelMappingFamily = channel + \"MappingFamily\";\nexport const channelMappingTable = channel + \"MappingTable\";\nexport const channelMode = channel + \"Mode\";\nexport const channelModeBits = symbol();\nexport const channels = channel + \"s\";\n\nconst copyright = \"copyright\";\nexport const copyrightId = copyright + \"Id\";\nexport const copyrightIdStart = copyright + \"IdStart\";\n\nexport const frame = \"frame\";\nexport const frameCount = frame + \"Count\";\nexport const frameLength = frame + \"Length\";\n\nconst Number = \"Number\";\nexport const frameNumber = frame + Number;\nexport const framePadding = frame + \"Padding\";\nexport const frameSize = frame + \"Size\";\n\nconst Rate = \"Rate\";\nexport const inputSampleRate = \"inputSample\" + Rate;\n\nconst page = \"page\";\nexport const pageChecksum = page + \"Checksum\";\nexport const pageSegmentBytes = symbol();\nexport const pageSegmentTable = page + \"SegmentTable\";\nexport const pageSequenceNumber = page + \"Sequence\" + Number;\n\nconst sample = \"sample\";\nexport const sampleNumber = sample + Number;\nexport const sampleRate = sample + Rate;\nexport const sampleRateBits = symbol();\nexport const samples = sample + \"s\";\n\nconst stream = \"stream\";\nexport const streamCount = stream + \"Count\";\nexport const streamInfo = stream + \"Info\";\nexport const streamSerialNumber = stream + \"Serial\" + Number;\nexport const streamStructureVersion = stream + \"StructureVersion\";\n\nconst total = \"total\";\nexport const totalBytesOut = total + \"BytesOut\";\nexport const totalDuration = total + \"Duration\";\nexport const totalSamples = total + \"Samples\";\n\n// private methods\nexport const readRawData = symbol();\nexport const incrementRawData = symbol();\nexport const mapCodecFrameStats = symbol();\nexport const mapFrameStats = symbol();\nexport const logWarning = symbol();\nexport const logError = symbol();\nexport const syncFrame = symbol();\nexport const fixedLengthFrameSync = symbol();\nexport const getHeader = symbol();\nexport const setHeader = symbol();\nexport const getFrame = symbol();\nexport const parseFrame = symbol();\nexport const parseOggPage = symbol();\nexport const checkCodecUpdate = symbol();\nexport const reset = symbol();\nexport const enable = symbol();\nexport const getHeaderFromUint8Array = symbol();\nexport const checkFrameFooterCrc16 = symbol();\n\nexport const uint8Array = Uint8Array;\nexport const dataView = DataView;\n\nexport const reserved = \"reserved\";\nexport const bad = \"bad\";\nexport const free = \"free\";\nexport const none = \"none\";\nexport const sixteenBitCRC = \"16bit CRC\";\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { length, uint8Array } from \"./constants.js\";\n\nconst getCrcTable = (crcTable, crcInitialValueFunction, crcFunction) => {\n  for (let byte = 0; byte < crcTable[length]; byte++) {\n    let crc = crcInitialValueFunction(byte);\n\n    for (let bit = 8; bit > 0; bit--) crc = crcFunction(crc);\n\n    crcTable[byte] = crc;\n  }\n  return crcTable;\n};\n\nconst crc8Table = getCrcTable(\n  new uint8Array(256),\n  (b) => b,\n  (crc) => (crc & 0x80 ? 0x07 ^ (crc << 1) : crc << 1),\n);\n\nconst flacCrc16Table = [\n  getCrcTable(\n    new Uint16Array(256),\n    (b) => b << 8,\n    (crc) => (crc << 1) ^ (crc & (1 << 15) ? 0x8005 : 0),\n  ),\n];\n\nconst crc32Table = [\n  getCrcTable(\n    new Uint32Array(256),\n    (b) => b,\n    (crc) => (crc >>> 1) ^ ((crc & 1) * 0xedb88320),\n  ),\n];\n\n// build crc tables\nfor (let i = 0; i < 15; i++) {\n  flacCrc16Table.push(new Uint16Array(256));\n  crc32Table.push(new Uint32Array(256));\n\n  for (let j = 0; j <= 0xff; j++) {\n    flacCrc16Table[i + 1][j] =\n      flacCrc16Table[0][flacCrc16Table[i][j] >>> 8] ^\n      (flacCrc16Table[i][j] << 8);\n\n    crc32Table[i + 1][j] =\n      (crc32Table[i][j] >>> 8) ^ crc32Table[0][crc32Table[i][j] & 0xff];\n  }\n}\n\nconst crc8 = (data) => {\n  let crc = 0;\n  const dataLength = data[length];\n\n  for (let i = 0; i !== dataLength; i++) crc = crc8Table[crc ^ data[i]];\n\n  return crc;\n};\n\nconst flacCrc16 = (data) => {\n  const dataLength = data[length];\n  const crcChunkSize = dataLength - 16;\n  let crc = 0;\n  let i = 0;\n\n  while (i <= crcChunkSize) {\n    crc ^= (data[i++] << 8) | data[i++];\n    crc =\n      flacCrc16Table[15][crc >> 8] ^\n      flacCrc16Table[14][crc & 0xff] ^\n      flacCrc16Table[13][data[i++]] ^\n      flacCrc16Table[12][data[i++]] ^\n      flacCrc16Table[11][data[i++]] ^\n      flacCrc16Table[10][data[i++]] ^\n      flacCrc16Table[9][data[i++]] ^\n      flacCrc16Table[8][data[i++]] ^\n      flacCrc16Table[7][data[i++]] ^\n      flacCrc16Table[6][data[i++]] ^\n      flacCrc16Table[5][data[i++]] ^\n      flacCrc16Table[4][data[i++]] ^\n      flacCrc16Table[3][data[i++]] ^\n      flacCrc16Table[2][data[i++]] ^\n      flacCrc16Table[1][data[i++]] ^\n      flacCrc16Table[0][data[i++]];\n  }\n\n  while (i !== dataLength)\n    crc = ((crc & 0xff) << 8) ^ flacCrc16Table[0][(crc >> 8) ^ data[i++]];\n\n  return crc;\n};\n\nconst crc32Function = (data) => {\n  const dataLength = data[length];\n  const crcChunkSize = dataLength - 16;\n  let crc = 0;\n  let i = 0;\n\n  while (i <= crcChunkSize)\n    crc =\n      crc32Table[15][(data[i++] ^ crc) & 0xff] ^\n      crc32Table[14][(data[i++] ^ (crc >>> 8)) & 0xff] ^\n      crc32Table[13][(data[i++] ^ (crc >>> 16)) & 0xff] ^\n      crc32Table[12][data[i++] ^ (crc >>> 24)] ^\n      crc32Table[11][data[i++]] ^\n      crc32Table[10][data[i++]] ^\n      crc32Table[9][data[i++]] ^\n      crc32Table[8][data[i++]] ^\n      crc32Table[7][data[i++]] ^\n      crc32Table[6][data[i++]] ^\n      crc32Table[5][data[i++]] ^\n      crc32Table[4][data[i++]] ^\n      crc32Table[3][data[i++]] ^\n      crc32Table[2][data[i++]] ^\n      crc32Table[1][data[i++]] ^\n      crc32Table[0][data[i++]];\n\n  while (i !== dataLength)\n    crc = crc32Table[0][(crc ^ data[i++]) & 0xff] ^ (crc >>> 8);\n\n  return crc ^ -1;\n};\n\nconst concatBuffers = (...buffers) => {\n  const buffer = new uint8Array(\n    buffers.reduce((acc, buf) => acc + buf[length], 0),\n  );\n\n  buffers.reduce((offset, buf) => {\n    buffer.set(buf, offset);\n    return offset + buf[length];\n  }, 0);\n\n  return buffer;\n};\n\nconst bytesToString = (bytes) => String.fromCharCode(...bytes);\n\n// prettier-ignore\nconst reverseTable = [0x0,0x8,0x4,0xc,0x2,0xa,0x6,0xe,0x1,0x9,0x5,0xd,0x3,0xb,0x7,0xf];\nconst reverse = (val) =>\n  (reverseTable[val & 0b1111] << 4) | reverseTable[val >> 4];\n\nclass BitReader {\n  constructor(data) {\n    this._data = data;\n    this._pos = data[length] * 8;\n  }\n\n  set position(position) {\n    this._pos = position;\n  }\n\n  get position() {\n    return this._pos;\n  }\n\n  read(bits) {\n    const byte = Math.floor(this._pos / 8);\n    const bit = this._pos % 8;\n    this._pos -= bits;\n\n    const window =\n      (reverse(this._data[byte - 1]) << 8) + reverse(this._data[byte]);\n\n    return (window >> (7 - bit)) & 0xff;\n  }\n}\n\nexport {\n  crc8,\n  flacCrc16,\n  crc32Function,\n  reverse,\n  concatBuffers,\n  bytesToString,\n  BitReader,\n};\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport {\n  getHeader,\n  setHeader,\n  checkCodecUpdate,\n  reset,\n  enable,\n} from \"../constants.js\";\n\nexport default class HeaderCache {\n  constructor(onCodecHeader, onCodecUpdate) {\n    this._onCodecHeader = onCodecHeader;\n    this._onCodecUpdate = onCodecUpdate;\n    this[reset]();\n  }\n\n  [enable]() {\n    this._isEnabled = true;\n  }\n\n  [reset]() {\n    this._headerCache = new Map();\n    this._codecUpdateData = new WeakMap();\n    this._codecHeaderSent = false;\n    this._codecShouldUpdate = false;\n    this._bitrate = null;\n    this._isEnabled = false;\n  }\n\n  [checkCodecUpdate](bitrate, totalDuration) {\n    if (this._onCodecUpdate) {\n      if (this._bitrate !== bitrate) {\n        this._bitrate = bitrate;\n        this._codecShouldUpdate = true;\n      }\n\n      // only update if codec data is available\n      const codecData = this._codecUpdateData.get(\n        this._headerCache.get(this._currentHeader),\n      );\n\n      if (this._codecShouldUpdate && codecData) {\n        this._onCodecUpdate(\n          {\n            bitrate,\n            ...codecData,\n          },\n          totalDuration,\n        );\n      }\n\n      this._codecShouldUpdate = false;\n    }\n  }\n\n  [getHeader](key) {\n    const header = this._headerCache.get(key);\n\n    if (header) {\n      this._updateCurrentHeader(key);\n    }\n\n    return header;\n  }\n\n  [setHeader](key, header, codecUpdateFields) {\n    if (this._isEnabled) {\n      if (!this._codecHeaderSent) {\n        this._onCodecHeader({ ...header });\n        this._codecHeaderSent = true;\n      }\n      this._updateCurrentHeader(key);\n\n      this._headerCache.set(key, header);\n      this._codecUpdateData.set(header, codecUpdateFields);\n    }\n  }\n\n  _updateCurrentHeader(key) {\n    if (this._onCodecUpdate && key !== this._currentHeader) {\n      this._codecShouldUpdate = true;\n      this._currentHeader = key;\n    }\n  }\n}\n","export const headerStore = new WeakMap();\nexport const frameStore = new WeakMap();\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore } from \"../globals.js\";\nimport {\n  frame,\n  length,\n  incrementRawData,\n  mapFrameStats,\n  logWarning,\n  syncFrame,\n  fixedLengthFrameSync,\n  getFrame,\n  getHeader,\n  reset,\n  enable,\n} from \"../constants.js\";\n\n/**\n * @abstract\n * @description Abstract class containing methods for parsing codec frames\n */\nexport default class Parser {\n  constructor(codecParser, headerCache) {\n    this._codecParser = codecParser;\n    this._headerCache = headerCache;\n  }\n\n  *[syncFrame]() {\n    let frameData;\n\n    do {\n      frameData = yield* this.Frame[getFrame](\n        this._codecParser,\n        this._headerCache,\n        0,\n      );\n      if (frameData) return frameData;\n      this._codecParser[incrementRawData](1); // increment to continue syncing\n    } while (true);\n  }\n\n  /**\n   * @description Searches for Frames within bytes containing a sequence of known codec frames.\n   * @param {boolean} ignoreNextFrame Set to true to return frames even if the next frame may not exist at the expected location\n   * @returns {Frame}\n   */\n  *[fixedLengthFrameSync](ignoreNextFrame) {\n    let frameData = yield* this[syncFrame]();\n    const frameLength = frameStore.get(frameData)[length];\n\n    if (\n      ignoreNextFrame ||\n      this._codecParser._flushing ||\n      // check if there is a frame right after this one\n      (yield* this.Header[getHeader](\n        this._codecParser,\n        this._headerCache,\n        frameLength,\n      ))\n    ) {\n      this._headerCache[enable](); // start caching when synced\n\n      this._codecParser[incrementRawData](frameLength); // increment to the next frame\n      this._codecParser[mapFrameStats](frameData);\n      return frameData;\n    }\n\n    this._codecParser[logWarning](\n      `Missing ${frame} at ${frameLength} bytes from current position.`,\n      `Dropping current ${frame} and trying again.`,\n    );\n    this._headerCache[reset](); // frame is invalid and must re-sync and clear cache\n    this._codecParser[incrementRawData](1); // increment to invalidate the current frame\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore } from \"../globals.js\";\nimport { data, header } from \"../constants.js\";\n\n/**\n * @abstract\n */\nexport default class Frame {\n  constructor(headerValue, dataValue) {\n    frameStore.set(this, { [header]: headerValue });\n\n    this[data] = dataValue;\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore, headerStore } from \"../globals.js\";\nimport {\n  sampleRate,\n  length,\n  frameNumber,\n  header,\n  samples,\n  duration,\n  totalBytesOut,\n  totalSamples,\n  totalDuration,\n  frameLength,\n  subarray,\n  readRawData,\n  getFrame,\n  getHeader,\n} from \"../constants.js\";\nimport Frame from \"../containers/Frame.js\";\n\nexport default class CodecFrame extends Frame {\n  static *[getFrame](Header, Frame, codecParser, headerCache, readOffset) {\n    const headerValue = yield* Header[getHeader](\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n\n    if (headerValue) {\n      const frameLengthValue = headerStore.get(headerValue)[frameLength];\n      const samplesValue = headerStore.get(headerValue)[samples];\n\n      const frame = (yield* codecParser[readRawData](\n        frameLengthValue,\n        readOffset,\n      ))[subarray](0, frameLengthValue);\n\n      return new Frame(headerValue, frame, samplesValue);\n    } else {\n      return null;\n    }\n  }\n\n  constructor(headerValue, dataValue, samplesValue) {\n    super(headerValue, dataValue);\n\n    this[header] = headerValue;\n    this[samples] = samplesValue;\n    this[duration] = (samplesValue / headerValue[sampleRate]) * 1000;\n    this[frameNumber] = null;\n    this[totalBytesOut] = null;\n    this[totalSamples] = null;\n    this[totalDuration] = null;\n\n    frameStore.get(this)[length] = dataValue[length];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// https://id3.org/Developer%20Information\n\nimport { length, version, readRawData } from \"../constants.js\";\n\nconst unsynchronizationFlag = \"unsynchronizationFlag\";\nconst extendedHeaderFlag = \"extendedHeaderFlag\";\nconst experimentalFlag = \"experimentalFlag\";\nconst footerPresent = \"footerPresent\";\n\nexport default class ID3v2 {\n  static *getID3v2Header(codecParser, headerCache, readOffset) {\n    const headerLength = 10;\n    const header = {};\n\n    let data = yield* codecParser[readRawData](3, readOffset);\n    // Byte (0-2 of 9)\n    // ID3\n    if (data[0] !== 0x49 || data[1] !== 0x44 || data[2] !== 0x33) return null;\n\n    data = yield* codecParser[readRawData](headerLength, readOffset);\n\n    // Byte (3-4 of 9)\n    // * `BBBBBBBB|........`: Major version\n    // * `........|BBBBBBBB`: Minor version\n    header[version] = `id3v2.${data[3]}.${data[4]}`;\n\n    // Byte (5 of 9)\n    // * `....0000.: Zeros (flags not implemented yet)\n    if (data[5] & 0b00001111) return null;\n\n    // Byte (5 of 9)\n    // * `CDEF0000`: Flags\n    // * `C.......`: Unsynchronisation (indicates whether or not unsynchronisation is used)\n    // * `.D......`: Extended header (indicates whether or not the header is followed by an extended header)\n    // * `..E.....`: Experimental indicator (indicates whether or not the tag is in an experimental stage)\n    // * `...F....`: Footer present (indicates that a footer is present at the very end of the tag)\n    header[unsynchronizationFlag] = !!(data[5] & 0b10000000);\n    header[extendedHeaderFlag] = !!(data[5] & 0b01000000);\n    header[experimentalFlag] = !!(data[5] & 0b00100000);\n    header[footerPresent] = !!(data[5] & 0b00010000);\n\n    // Byte (6-9 of 9)\n    // * `0.......|0.......|0.......|0.......`: Zeros\n    if (\n      data[6] & 0b10000000 ||\n      data[7] & 0b10000000 ||\n      data[8] & 0b10000000 ||\n      data[9] & 0b10000000\n    )\n      return null;\n\n    // Byte (6-9 of 9)\n    // * `.FFFFFFF|.FFFFFFF|.FFFFFFF|.FFFFFFF`: Tag Length\n    // The ID3v2 tag size is encoded with four bytes where the most significant bit (bit 7)\n    // is set to zero in every byte, making a total of 28 bits. The zeroed bits are ignored,\n    // so a 257 bytes long tag is represented as $00 00 02 01.\n    const dataLength =\n      (data[6] << 21) | (data[7] << 14) | (data[8] << 7) | data[9];\n\n    header[length] = headerLength + dataLength;\n\n    return new ID3v2(header);\n  }\n\n  constructor(header) {\n    this[version] = header[version];\n    this[unsynchronizationFlag] = header[unsynchronizationFlag];\n    this[extendedHeaderFlag] = header[extendedHeaderFlag];\n    this[experimentalFlag] = header[experimentalFlag];\n    this[footerPresent] = header[footerPresent];\n    this[length] = header[length];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore } from \"../globals.js\";\nimport {\n  bitDepth,\n  channelMode,\n  sampleRate,\n  bitrate,\n  channels,\n} from \"../constants.js\";\n\nexport default class CodecHeader {\n  /**\n   * @private\n   */\n  constructor(header) {\n    headerStore.set(this, header);\n\n    this[bitDepth] = header[bitDepth];\n    this[bitrate] = null; // set during frame mapping\n    this[channels] = header[channels];\n    this[channelMode] = header[channelMode];\n    this[sampleRate] = header[sampleRate];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport {\n  reserved,\n  bad,\n  free,\n  none,\n  sixteenBitCRC,\n  rate44100,\n  rate48000,\n  rate32000,\n  rate22050,\n  rate24000,\n  rate16000,\n  rate11025,\n  rate12000,\n  rate8000,\n  monophonic,\n  stereo,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  bitrate,\n  channels,\n  isOriginal,\n  isPrivate,\n  layer,\n  length,\n  mpegVersion,\n  frameLength,\n  protection,\n  emphasis,\n  framePadding,\n  isCopyrighted,\n  modeExtension,\n  description,\n  samples,\n  subarray,\n  readRawData,\n  incrementRawData,\n  getHeader,\n  setHeader,\n} from \"../../constants.js\";\nimport { bytesToString } from \"../../utilities.js\";\n\nimport ID3v2 from \"../../metadata/ID3v2.js\";\nimport CodecHeader from \"../CodecHeader.js\";\n\n// http://www.mp3-tech.org/programmer/frame_header.html\n\nconst bitrateMatrix = {\n  // bits | V1,L1 | V1,L2 | V1,L3 | V2,L1 | V2,L2 & L3\n  0b00000000: [free, free, free, free, free],\n  0b00010000: [32, 32, 32, 32, 8],\n  // 0b00100000: [64,   48,  40,  48,  16,],\n  // 0b00110000: [96,   56,  48,  56,  24,],\n  // 0b01000000: [128,  64,  56,  64,  32,],\n  // 0b01010000: [160,  80,  64,  80,  40,],\n  // 0b01100000: [192,  96,  80,  96,  48,],\n  // 0b01110000: [224, 112,  96, 112,  56,],\n  // 0b10000000: [256, 128, 112, 128,  64,],\n  // 0b10010000: [288, 160, 128, 144,  80,],\n  // 0b10100000: [320, 192, 160, 160,  96,],\n  // 0b10110000: [352, 224, 192, 176, 112,],\n  // 0b11000000: [384, 256, 224, 192, 128,],\n  // 0b11010000: [416, 320, 256, 224, 144,],\n  // 0b11100000: [448, 384, 320, 256, 160,],\n  0b11110000: [bad, bad, bad, bad, bad],\n};\n\nconst calcBitrate = (idx, interval, intervalOffset) =>\n  8 *\n    (((idx + intervalOffset) % interval) + interval) *\n    (1 << ((idx + intervalOffset) / interval)) -\n  8 * interval * ((interval / 8) | 0);\n\n// generate bitrate matrix\nfor (let i = 2; i < 15; i++)\n  bitrateMatrix[i << 4] = [\n    i * 32, //                V1,L1\n    calcBitrate(i, 4, 0), //  V1,L2\n    calcBitrate(i, 4, -1), // V1,L3\n    calcBitrate(i, 8, 4), //  V2,L1\n    calcBitrate(i, 8, 0), //  V2,L2 & L3\n  ];\n\nconst v1Layer1 = 0;\nconst v1Layer2 = 1;\nconst v1Layer3 = 2;\nconst v2Layer1 = 3;\nconst v2Layer23 = 4;\n\nconst bands = \"bands \";\nconst to31 = \" to 31\";\nconst layer12ModeExtensions = {\n  0b00000000: bands + 4 + to31,\n  0b00010000: bands + 8 + to31,\n  0b00100000: bands + 12 + to31,\n  0b00110000: bands + 16 + to31,\n};\n\nconst bitrateIndex = \"bitrateIndex\";\nconst v2 = \"v2\";\nconst v1 = \"v1\";\n\nconst intensityStereo = \"Intensity stereo \";\nconst msStereo = \", MS stereo \";\nconst on = \"on\";\nconst off = \"off\";\nconst layer3ModeExtensions = {\n  0b00000000: intensityStereo + off + msStereo + off,\n  0b00010000: intensityStereo + on + msStereo + off,\n  0b00100000: intensityStereo + off + msStereo + on,\n  0b00110000: intensityStereo + on + msStereo + on,\n};\n\nconst layersValues = {\n  0b00000000: { [description]: reserved },\n  0b00000010: {\n    [description]: \"Layer III\",\n    [framePadding]: 1,\n    [modeExtension]: layer3ModeExtensions,\n    [v1]: {\n      [bitrateIndex]: v1Layer3,\n      [samples]: 1152,\n    },\n    [v2]: {\n      [bitrateIndex]: v2Layer23,\n      [samples]: 576,\n    },\n  },\n  0b00000100: {\n    [description]: \"Layer II\",\n    [framePadding]: 1,\n    [modeExtension]: layer12ModeExtensions,\n    [samples]: 1152,\n    [v1]: {\n      [bitrateIndex]: v1Layer2,\n    },\n    [v2]: {\n      [bitrateIndex]: v2Layer23,\n    },\n  },\n  0b00000110: {\n    [description]: \"Layer I\",\n    [framePadding]: 4,\n    [modeExtension]: layer12ModeExtensions,\n    [samples]: 384,\n    [v1]: {\n      [bitrateIndex]: v1Layer1,\n    },\n    [v2]: {\n      [bitrateIndex]: v2Layer1,\n    },\n  },\n};\n\nconst mpegVersionDescription = \"MPEG Version \";\nconst isoIec = \"ISO/IEC \";\nconst mpegVersions = {\n  0b00000000: {\n    [description]: `${mpegVersionDescription}2.5 (later extension of MPEG 2)`,\n    [layer]: v2,\n    [sampleRate]: {\n      0b00000000: rate11025,\n      0b00000100: rate12000,\n      0b00001000: rate8000,\n      0b00001100: reserved,\n    },\n  },\n  0b00001000: { [description]: reserved },\n  0b00010000: {\n    [description]: `${mpegVersionDescription}2 (${isoIec}13818-3)`,\n    [layer]: v2,\n    [sampleRate]: {\n      0b00000000: rate22050,\n      0b00000100: rate24000,\n      0b00001000: rate16000,\n      0b00001100: reserved,\n    },\n  },\n  0b00011000: {\n    [description]: `${mpegVersionDescription}1 (${isoIec}11172-3)`,\n    [layer]: v1,\n    [sampleRate]: {\n      0b00000000: rate44100,\n      0b00000100: rate48000,\n      0b00001000: rate32000,\n      0b00001100: reserved,\n    },\n  },\n  length,\n};\n\nconst protectionValues = {\n  0b00000000: sixteenBitCRC,\n  0b00000001: none,\n};\n\nconst emphasisValues = {\n  0b00000000: none,\n  0b00000001: \"50/15 ms\",\n  0b00000010: reserved,\n  0b00000011: \"CCIT J.17\",\n};\n\nconst channelModes = {\n  0b00000000: { [channels]: 2, [description]: stereo },\n  0b01000000: { [channels]: 2, [description]: \"joint \" + stereo },\n  0b10000000: { [channels]: 2, [description]: \"dual channel\" },\n  0b11000000: { [channels]: 1, [description]: monophonic },\n};\n\nexport default class MPEGHeader extends CodecHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // check for id3 header\n    const id3v2Header = yield* ID3v2.getID3v2Header(\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n\n    if (id3v2Header) {\n      // throw away the data. id3 parsing is not implemented yet.\n      yield* codecParser[readRawData](id3v2Header[length], readOffset);\n      codecParser[incrementRawData](id3v2Header[length]);\n    }\n\n    // Must be at least four bytes.\n    const data = yield* codecParser[readRawData](4, readOffset);\n\n    // Check header cache\n    const key = bytesToString(data[subarray](0, 4));\n    const cachedHeader = headerCache[getHeader](key);\n    if (cachedHeader) return new MPEGHeader(cachedHeader);\n\n    // Frame sync (all bits must be set): `11111111|111`:\n    if (data[0] !== 0xff || data[1] < 0xe0) return null;\n\n    // Byte (2 of 4)\n    // * `111BBCCD`\n    // * `...BB...`: MPEG Audio version ID\n    // * `.....CC.`: Layer description\n    // * `.......D`: Protection bit (0 - Protected by CRC (16bit CRC follows header), 1 = Not protected)\n\n    // Mpeg version (1, 2, 2.5)\n    const mpegVersionValues = mpegVersions[data[1] & 0b00011000];\n    if (mpegVersionValues[description] === reserved) return null;\n\n    // Layer (I, II, III)\n    const layerBits = data[1] & 0b00000110;\n    if (layersValues[layerBits][description] === reserved) return null;\n    const layerValues = {\n      ...layersValues[layerBits],\n      ...layersValues[layerBits][mpegVersionValues[layer]],\n    };\n\n    header[mpegVersion] = mpegVersionValues[description];\n    header[layer] = layerValues[description];\n    header[samples] = layerValues[samples];\n    header[protection] = protectionValues[data[1] & 0b00000001];\n\n    header[length] = 4;\n\n    // Byte (3 of 4)\n    // * `EEEEFFGH`\n    // * `EEEE....`: Bitrate index. 1111 is invalid, everything else is accepted\n    // * `....FF..`: Sample rate\n    // * `......G.`: Padding bit, 0=frame not padded, 1=frame padded\n    // * `.......H`: Private bit.\n    header[bitrate] =\n      bitrateMatrix[data[2] & 0b11110000][layerValues[bitrateIndex]];\n    if (header[bitrate] === bad) return null;\n\n    header[sampleRate] = mpegVersionValues[sampleRate][data[2] & 0b00001100];\n    if (header[sampleRate] === reserved) return null;\n\n    header[framePadding] = data[2] & 0b00000010 && layerValues[framePadding];\n    header[isPrivate] = !!(data[2] & 0b00000001);\n\n    header[frameLength] = Math.floor(\n      (125 * header[bitrate] * header[samples]) / header[sampleRate] +\n        header[framePadding],\n    );\n    if (!header[frameLength]) return null;\n\n    // Byte (4 of 4)\n    // * `IIJJKLMM`\n    // * `II......`: Channel mode\n    // * `..JJ....`: Mode extension (only if joint stereo)\n    // * `....K...`: Copyright\n    // * `.....L..`: Original\n    // * `......MM`: Emphasis\n    const channelModeBits = data[3] & 0b11000000;\n    header[channelMode] = channelModes[channelModeBits][description];\n    header[channels] = channelModes[channelModeBits][channels];\n\n    header[modeExtension] = layerValues[modeExtension][data[3] & 0b00110000];\n    header[isCopyrighted] = !!(data[3] & 0b00001000);\n    header[isOriginal] = !!(data[3] & 0b00000100);\n\n    header[emphasis] = emphasisValues[data[3] & 0b00000011];\n    if (header[emphasis] === reserved) return null;\n\n    header[bitDepth] = 16;\n\n    // set header cache\n    {\n      const { length, frameLength, samples, ...codecUpdateFields } = header;\n\n      headerCache[setHeader](key, header, codecUpdateFields);\n    }\n    return new MPEGHeader(header);\n  }\n\n  /**\n   * @private\n   * Call MPEGHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[bitrate] = header[bitrate];\n    this[emphasis] = header[emphasis];\n    this[framePadding] = header[framePadding];\n    this[isCopyrighted] = header[isCopyrighted];\n    this[isOriginal] = header[isOriginal];\n    this[isPrivate] = header[isPrivate];\n    this[layer] = header[layer];\n    this[modeExtension] = header[modeExtension];\n    this[mpegVersion] = header[mpegVersion];\n    this[protection] = header[protection];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { getFrame } from \"../../constants.js\";\n\nimport CodecFrame from \"../CodecFrame.js\";\nimport MPEGHeader from \"./MPEGHeader.js\";\n\nexport default class MPEGFrame extends CodecFrame {\n  static *[getFrame](codecParser, headerCache, readOffset) {\n    return yield* super[getFrame](\n      MPEGHeader,\n      MPEGFrame,\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n  }\n\n  constructor(header, frame, samples) {\n    super(header, frame, samples);\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport {\n  codec,\n  mpeg,\n  fixedLengthFrameSync,\n  parseFrame,\n} from \"../../constants.js\";\n\nimport Parser from \"../Parser.js\";\nimport MPEGFrame from \"./MPEGFrame.js\";\nimport MPEGHeader from \"./MPEGHeader.js\";\n\nexport default class MPEGParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = MPEGFrame;\n    this.Header = MPEGHeader;\n\n    onCodec(this[codec]);\n  }\n\n  get [codec]() {\n    return mpeg;\n  }\n\n  *[parseFrame]() {\n    return yield* this[fixedLengthFrameSync]();\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://wiki.multimedia.cx/index.php/ADTS\n\nAAAAAAAA AAAABCCD EEFFFFGH HHIJKLMM MMMMMMMM MMMOOOOO OOOOOOPP (QQQQQQQQ QQQQQQQQ)\n\nAACHeader consists of 7 or 9 bytes (without or with CRC).\nLetter  Length (bits)  Description\nA  12  syncword 0xFFF, all bits must be 1\nB  1   MPEG Version: 0 for MPEG-4, 1 for MPEG-2\nC  2   Layer: always 0\nD  1   protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\nE  2   profile, the MPEG-4 Audio Object Type minus 1\nF  4   MPEG-4 Sampling Frequency Index (15 is forbidden)\nG  1   private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\nH  3   MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\nI  1   originality, set to 0 when encoding, ignore when decoding\nJ  1   home, set to 0 when encoding, ignore when decoding\nK  1   copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\nL  1   copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\nM  13  frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\nO  11  Buffer fullness // 0x7FF for VBR\nP  2   Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\nQ  16  CRC if protection absent is 0 \n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { bytesToString } from \"../../utilities.js\";\nimport {\n  reserved,\n  bad,\n  none,\n  sixteenBitCRC,\n  rate96000,\n  rate88200,\n  rate64000,\n  rate48000,\n  rate44100,\n  rate32000,\n  rate24000,\n  rate22050,\n  rate16000,\n  rate12000,\n  rate11025,\n  rate8000,\n  rate7350,\n  channelMappings,\n  getChannelMapping,\n  monophonic,\n  lfe,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  channels,\n  copyrightId,\n  copyrightIdStart,\n  bufferFullness,\n  isHome,\n  isOriginal,\n  isPrivate,\n  layer,\n  length,\n  mpegVersion,\n  numberAACFrames,\n  profile,\n  protection,\n  frameLength,\n  description,\n  samples,\n  sampleRateBits,\n  profileBits,\n  channelModeBits,\n  buffer,\n  readRawData,\n  getHeader,\n  setHeader,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\n\nimport CodecHeader from \"../CodecHeader.js\";\n\nconst mpegVersionValues = {\n  0b00000000: \"MPEG-4\",\n  0b00001000: \"MPEG-2\",\n};\n\nconst layerValues = {\n  0b00000000: \"valid\",\n  0b00000010: bad,\n  0b00000100: bad,\n  0b00000110: bad,\n};\n\nconst protectionValues = {\n  0b00000000: sixteenBitCRC,\n  0b00000001: none,\n};\n\nconst profileValues = {\n  0b00000000: \"AAC Main\",\n  0b01000000: \"AAC LC (Low Complexity)\",\n  0b10000000: \"AAC SSR (Scalable Sample Rate)\",\n  0b11000000: \"AAC LTP (Long Term Prediction)\",\n};\n\nconst sampleRates = {\n  0b00000000: rate96000,\n  0b00000100: rate88200,\n  0b00001000: rate64000,\n  0b00001100: rate48000,\n  0b00010000: rate44100,\n  0b00010100: rate32000,\n  0b00011000: rate24000,\n  0b00011100: rate22050,\n  0b00100000: rate16000,\n  0b00100100: rate12000,\n  0b00101000: rate11025,\n  0b00101100: rate8000,\n  0b00110000: rate7350,\n  0b00110100: reserved,\n  0b00111000: reserved,\n  0b00111100: \"frequency is written explicitly\",\n};\n\n// prettier-ignore\nconst channelModeValues = {\n  0b000000000: { [channels]: 0, [description]: \"Defined in AOT Specific Config\" },\n  /*\n  'monophonic (mono)'\n  'stereo (left, right)'\n  'linear surround (front center, front left, front right)'\n  'quadraphonic (front center, front left, front right, rear center)'\n  '5.0 surround (front center, front left, front right, rear left, rear right)'\n  '5.1 surround (front center, front left, front right, rear left, rear right, LFE)'\n  '7.1 surround (front center, front left, front right, side left, side right, rear left, rear right, LFE)'\n  */\n  0b001000000: { [channels]: 1, [description]: monophonic },\n  0b010000000: { [channels]: 2, [description]: getChannelMapping(2,channelMappings[0][0]) },\n  0b011000000: { [channels]: 3, [description]: getChannelMapping(3,channelMappings[1][3]), },\n  0b100000000: { [channels]: 4, [description]: getChannelMapping(4,channelMappings[1][3],channelMappings[3][4]), },\n  0b101000000: { [channels]: 5, [description]: getChannelMapping(5,channelMappings[1][3],channelMappings[3][0]), },\n  0b110000000: { [channels]: 6, [description]: getChannelMapping(6,channelMappings[1][3],channelMappings[3][0],lfe), },\n  0b111000000: { [channels]: 8, [description]: getChannelMapping(8,channelMappings[1][3],channelMappings[2][0],channelMappings[3][0],lfe), },\n};\n\nexport default class AACHeader extends CodecHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // Must be at least seven bytes. Out of data\n    const data = yield* codecParser[readRawData](7, readOffset);\n\n    // Check header cache\n    const key = bytesToString([\n      data[0],\n      data[1],\n      data[2],\n      (data[3] & 0b11111100) | (data[6] & 0b00000011), // frame length, buffer fullness varies so don't cache it\n    ]);\n    const cachedHeader = headerCache[getHeader](key);\n\n    if (!cachedHeader) {\n      // Frame sync (all bits must be set): `11111111|1111`:\n      if (data[0] !== 0xff || data[1] < 0xf0) return null;\n\n      // Byte (2 of 7)\n      // * `1111BCCD`\n      // * `....B...`: MPEG Version: 0 for MPEG-4, 1 for MPEG-2\n      // * `.....CC.`: Layer: always 0\n      // * `.......D`: protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\n      header[mpegVersion] = mpegVersionValues[data[1] & 0b00001000];\n\n      header[layer] = layerValues[data[1] & 0b00000110];\n      if (header[layer] === bad) return null;\n\n      const protectionBit = data[1] & 0b00000001;\n      header[protection] = protectionValues[protectionBit];\n      header[length] = protectionBit ? 7 : 9;\n\n      // Byte (3 of 7)\n      // * `EEFFFFGH`\n      // * `EE......`: profile, the MPEG-4 Audio Object Type minus 1\n      // * `..FFFF..`: MPEG-4 Sampling Frequency Index (15 is forbidden)\n      // * `......G.`: private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\n      header[profileBits] = data[2] & 0b11000000;\n      header[sampleRateBits] = data[2] & 0b00111100;\n      const privateBit = data[2] & 0b00000010;\n\n      header[profile] = profileValues[header[profileBits]];\n\n      header[sampleRate] = sampleRates[header[sampleRateBits]];\n      if (header[sampleRate] === reserved) return null;\n\n      header[isPrivate] = !!privateBit;\n\n      // Byte (3,4 of 7)\n      // * `.......H|HH......`: MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\n      header[channelModeBits] = ((data[2] << 8) | data[3]) & 0b111000000;\n      header[channelMode] =\n        channelModeValues[header[channelModeBits]][description];\n      header[channels] = channelModeValues[header[channelModeBits]][channels];\n\n      // Byte (4 of 7)\n      // * `HHIJKLMM`\n      // * `..I.....`: originality, set to 0 when encoding, ignore when decoding\n      // * `...J....`: home, set to 0 when encoding, ignore when decoding\n      // * `....K...`: copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\n      // * `.....L..`: copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\n      header[isOriginal] = !!(data[3] & 0b00100000);\n      header[isHome] = !!(data[3] & 0b00001000);\n      header[copyrightId] = !!(data[3] & 0b00001000);\n      header[copyrightIdStart] = !!(data[3] & 0b00000100);\n      header[bitDepth] = 16;\n      header[samples] = 1024;\n\n      // Byte (7 of 7)\n      // * `......PP` Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\n      header[numberAACFrames] = data[6] & 0b00000011;\n\n      {\n        const {\n          length,\n          channelModeBits,\n          profileBits,\n          sampleRateBits,\n          frameLength,\n          samples,\n          numberAACFrames,\n          ...codecUpdateFields\n        } = header;\n        headerCache[setHeader](key, header, codecUpdateFields);\n      }\n    } else {\n      Object.assign(header, cachedHeader);\n    }\n\n    // Byte (4,5,6 of 7)\n    // * `.......MM|MMMMMMMM|MMM.....`: frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\n    header[frameLength] =\n      ((data[3] << 11) | (data[4] << 3) | (data[5] >> 5)) & 0x1fff;\n    if (!header[frameLength]) return null;\n\n    // Byte (6,7 of 7)\n    // * `...OOOOO|OOOOOO..`: Buffer fullness\n    const bufferFullnessBits = ((data[5] << 6) | (data[6] >> 2)) & 0x7ff;\n    header[bufferFullness] =\n      bufferFullnessBits === 0x7ff ? \"VBR\" : bufferFullnessBits;\n\n    return new AACHeader(header);\n  }\n\n  /**\n   * @private\n   * Call AACHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[copyrightId] = header[copyrightId];\n    this[copyrightIdStart] = header[copyrightIdStart];\n    this[bufferFullness] = header[bufferFullness];\n    this[isHome] = header[isHome];\n    this[isOriginal] = header[isOriginal];\n    this[isPrivate] = header[isPrivate];\n    this[layer] = header[layer];\n    this[length] = header[length];\n    this[mpegVersion] = header[mpegVersion];\n    this[numberAACFrames] = header[numberAACFrames];\n    this[profile] = header[profile];\n    this[protection] = header[protection];\n  }\n\n  get audioSpecificConfig() {\n    // Audio Specific Configuration\n    // * `000EEFFF|F0HHH000`:\n    // * `000EE...|........`: Object Type (profileBit + 1)\n    // * `.....FFF|F.......`: Sample Rate\n    // * `........|.0HHH...`: Channel Configuration\n    // * `........|.....0..`: Frame Length (1024)\n    // * `........|......0.`: does not depend on core coder\n    // * `........|.......0`: Not Extension\n    const header = headerStore.get(this);\n\n    const audioSpecificConfig =\n      ((header[profileBits] + 0x40) << 5) |\n      (header[sampleRateBits] << 5) |\n      (header[channelModeBits] >> 3);\n\n    const bytes = new uint8Array(2);\n    new dataView(bytes[buffer]).setUint16(0, audioSpecificConfig, false);\n    return bytes;\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { getFrame } from \"../../constants.js\";\n\nimport CodecFrame from \"../CodecFrame.js\";\nimport AACHeader from \"./AACHeader.js\";\n\nexport default class AACFrame extends CodecFrame {\n  static *[getFrame](codecParser, headerCache, readOffset) {\n    return yield* super[getFrame](\n      AACHeader,\n      AACFrame,\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n  }\n\n  constructor(header, frame, samples) {\n    super(header, frame, samples);\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { codec, fixedLengthFrameSync, parseFrame } from \"../../constants.js\";\n\nimport Parser from \"../Parser.js\";\nimport AACFrame from \"./AACFrame.js\";\nimport AACHeader from \"./AACHeader.js\";\n\nexport default class AACParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = AACFrame;\n    this.Header = AACHeader;\n\n    onCodec(this[codec]);\n  }\n\n  get [codec]() {\n    return \"aac\";\n  }\n\n  *[parseFrame]() {\n    return yield* this[fixedLengthFrameSync]();\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport { flacCrc16 } from \"../../utilities.js\";\nimport {\n  length,\n  streamInfo,\n  crc16,\n  samples,\n  subarray,\n  checkFrameFooterCrc16,\n} from \"../../constants.js\";\nimport CodecFrame from \"../CodecFrame.js\";\n\nexport default class FLACFrame extends CodecFrame {\n  static _getFrameFooterCrc16(data) {\n    return (data[data[length] - 2] << 8) + data[data[length] - 1];\n  }\n\n  // check frame footer crc\n  // https://xiph.org/flac/format.html#frame_footer\n  static [checkFrameFooterCrc16](data) {\n    const expectedCrc16 = FLACFrame._getFrameFooterCrc16(data);\n    const actualCrc16 = flacCrc16(data[subarray](0, -2));\n\n    return expectedCrc16 === actualCrc16;\n  }\n\n  constructor(data, header, streamInfoValue) {\n    header[streamInfo] = streamInfoValue;\n    header[crc16] = FLACFrame._getFrameFooterCrc16(data);\n\n    super(header, data, headerStore.get(header)[samples]);\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://xiph.org/flac/format.html\n\nAAAAAAAA AAAAAABC DDDDEEEE FFFFGGGH \n(IIIIIIII...)\n(JJJJJJJJ|JJJJJJJJ)\n(KKKKKKKK|KKKKKKKK)\nLLLLLLLLL\n\nFLAC Frame Header\nLetter  Length (bits)  Description\nA   13  11111111|11111\nB   1   Reserved 0 - mandatory, 1 - reserved\nC   1   Blocking strategy, 0 - fixed, 1 - variable\nD   4   Block size in inter-channel samples\nE   4   Sample rate\nF   4   Channel assignment\nG   3   Sample size in bits\nH   1   Reserved 0 - mandatory, 1 - reserved\nI   ?   if(variable blocksize)\n           <8-56>:\"UTF-8\" coded sample number (decoded number is 36 bits) [4]\n        else\n           <8-48>:\"UTF-8\" coded frame number (decoded number is 31 bits) [4]\nJ   ?   if(blocksize bits == 011x)\n            8/16 bit (blocksize-1)\nK   ?   if(sample rate bits == 11xx)\n            8/16 bit sample rate\nL   8   CRC-8 (polynomial = x^8 + x^2 + x^1 + x^0, initialized with 0) of everything before the crc, including the sync code\n        \n*/\n\nimport {\n  reserved,\n  bad,\n  rate88200,\n  rate176400,\n  rate192000,\n  rate8000,\n  rate16000,\n  rate22050,\n  rate24000,\n  rate32000,\n  rate44100,\n  rate48000,\n  rate96000,\n  channelMappings,\n  getChannelMapping,\n  monophonic,\n  stereo,\n  lfe,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  channels,\n  length,\n  crc16,\n  blockingStrategy,\n  blockSize,\n  frameNumber,\n  sampleNumber,\n  streamInfo,\n  description,\n  samples,\n  sampleRateBits,\n  blockingStrategyBits,\n  blockSizeBits,\n  crc,\n  subarray,\n  readRawData,\n  getHeader,\n  setHeader,\n  getHeaderFromUint8Array,\n} from \"../../constants.js\";\nimport { bytesToString, crc8 } from \"../../utilities.js\";\nimport CodecHeader from \"../CodecHeader.js\";\n\nconst getFromStreamInfo = \"get from STREAMINFO metadata block\";\n\nconst blockingStrategyValues = {\n  0b00000000: \"Fixed\",\n  0b00000001: \"Variable\",\n};\n\nconst blockSizeValues = {\n  0b00000000: reserved,\n  0b00010000: 192,\n  // 0b00100000: 576,\n  // 0b00110000: 1152,\n  // 0b01000000: 2304,\n  // 0b01010000: 4608,\n  // 0b01100000: \"8-bit (blocksize-1) from end of header\",\n  // 0b01110000: \"16-bit (blocksize-1) from end of header\",\n  // 0b10000000: 256,\n  // 0b10010000: 512,\n  // 0b10100000: 1024,\n  // 0b10110000: 2048,\n  // 0b11000000: 4096,\n  // 0b11010000: 8192,\n  // 0b11100000: 16384,\n  // 0b11110000: 32768,\n};\nfor (let i = 2; i < 16; i++)\n  blockSizeValues[i << 4] = i < 6 ? 576 * 2 ** (i - 2) : 2 ** i;\n\nconst sampleRateValues = {\n  0b00000000: getFromStreamInfo,\n  0b00000001: rate88200,\n  0b00000010: rate176400,\n  0b00000011: rate192000,\n  0b00000100: rate8000,\n  0b00000101: rate16000,\n  0b00000110: rate22050,\n  0b00000111: rate24000,\n  0b00001000: rate32000,\n  0b00001001: rate44100,\n  0b00001010: rate48000,\n  0b00001011: rate96000,\n  // 0b00001100: \"8-bit sample rate (in kHz) from end of header\",\n  // 0b00001101: \"16-bit sample rate (in Hz) from end of header\",\n  // 0b00001110: \"16-bit sample rate (in tens of Hz) from end of header\",\n  0b00001111: bad,\n};\n\n/* prettier-ignore */\nconst channelAssignments = {\n  /*'\n  'monophonic (mono)'\n  'stereo (left, right)'\n  'linear surround (left, right, center)'\n  'quadraphonic (front left, front right, rear left, rear right)'\n  '5.0 surround (front left, front right, front center, rear left, rear right)'\n  '5.1 surround (front left, front right, front center, LFE, rear left, rear right)'\n  '6.1 surround (front left, front right, front center, LFE, rear center, side left, side right)'\n  '7.1 surround (front left, front right, front center, LFE, rear left, rear right, side left, side right)'\n  */\n  0b00000000: {[channels]: 1, [description]: monophonic},\n  0b00010000: {[channels]: 2, [description]: getChannelMapping(2,channelMappings[0][0])},\n  0b00100000: {[channels]: 3, [description]: getChannelMapping(3,channelMappings[0][1])},\n  0b00110000: {[channels]: 4, [description]: getChannelMapping(4,channelMappings[1][0],channelMappings[3][0])},\n  0b01000000: {[channels]: 5, [description]: getChannelMapping(5,channelMappings[1][1],channelMappings[3][0])},\n  0b01010000: {[channels]: 6, [description]: getChannelMapping(6,channelMappings[1][1],lfe,channelMappings[3][0])},\n  0b01100000: {[channels]: 7, [description]: getChannelMapping(7,channelMappings[1][1],lfe,channelMappings[3][4],channelMappings[2][0])},\n  0b01110000: {[channels]: 8, [description]: getChannelMapping(8,channelMappings[1][1],lfe,channelMappings[3][0],channelMappings[2][0])},\n  0b10000000: {[channels]: 2, [description]: `${stereo} (left, diff)`},\n  0b10010000: {[channels]: 2, [description]: `${stereo} (diff, right)`},\n  0b10100000: {[channels]: 2, [description]: `${stereo} (avg, diff)`},\n  0b10110000: reserved,\n  0b11000000: reserved,\n  0b11010000: reserved,\n  0b11100000: reserved,\n  0b11110000: reserved,\n}\n\nconst bitDepthValues = {\n  0b00000000: getFromStreamInfo,\n  0b00000010: 8,\n  0b00000100: 12,\n  0b00000110: reserved,\n  0b00001000: 16,\n  0b00001010: 20,\n  0b00001100: 24,\n  0b00001110: reserved,\n};\n\nexport default class FLACHeader extends CodecHeader {\n  // https://datatracker.ietf.org/doc/html/rfc3629#section-3\n  //    Char. number range  |        UTF-8 octet sequence\n  //    (hexadecimal)    |              (binary)\n  // --------------------+---------------------------------------------\n  // 0000 0000-0000 007F | 0xxxxxxx\n  // 0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n  // 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n  // 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n  static _decodeUTF8Int(data) {\n    if (data[0] > 0xfe) {\n      return null; // length byte must have at least one zero as the lsb\n    }\n\n    if (data[0] < 0x80) return { value: data[0], length: 1 };\n\n    // get length by counting the number of msb that are set to 1\n    let length = 1;\n    for (let zeroMask = 0x40; zeroMask & data[0]; zeroMask >>= 1) length++;\n\n    let idx = length - 1,\n      value = 0,\n      shift = 0;\n\n    // sum together the encoded bits in bytes 2 to length\n    // 1110xxxx 10[cccccc] 10[bbbbbb] 10[aaaaaa]\n    //\n    //    value = [cccccc] | [bbbbbb] | [aaaaaa]\n    for (; idx > 0; shift += 6, idx--) {\n      if ((data[idx] & 0xc0) !== 0x80) {\n        return null; // each byte should have leading 10xxxxxx\n      }\n      value |= (data[idx] & 0x3f) << shift; // add the encoded bits\n    }\n\n    // read the final encoded bits in byte 1\n    //     1110[dddd] 10[cccccc] 10[bbbbbb] 10[aaaaaa]\n    //\n    // value = [dddd] | [cccccc] | [bbbbbb] | [aaaaaa]\n    value |= (data[idx] & (0x7f >> length)) << shift;\n\n    return { value, length };\n  }\n\n  static [getHeaderFromUint8Array](data, headerCache) {\n    const codecParserStub = {\n      [readRawData]: function* () {\n        return data;\n      },\n    };\n\n    return FLACHeader[getHeader](codecParserStub, headerCache, 0).next().value;\n  }\n\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    // Must be at least 6 bytes.\n    let data = yield* codecParser[readRawData](6, readOffset);\n\n    // Bytes (1-2 of 6)\n    // * `11111111|111110..`: Frame sync\n    // * `........|......0.`: Reserved 0 - mandatory, 1 - reserved\n    if (data[0] !== 0xff || !(data[1] === 0xf8 || data[1] === 0xf9)) {\n      return null;\n    }\n\n    const header = {};\n\n    // Check header cache\n    const key = bytesToString(data[subarray](0, 4));\n    const cachedHeader = headerCache[getHeader](key);\n\n    if (!cachedHeader) {\n      // Byte (2 of 6)\n      // * `.......C`: Blocking strategy, 0 - fixed, 1 - variable\n      header[blockingStrategyBits] = data[1] & 0b00000001;\n      header[blockingStrategy] =\n        blockingStrategyValues[header[blockingStrategyBits]];\n\n      // Byte (3 of 6)\n      // * `DDDD....`: Block size in inter-channel samples\n      // * `....EEEE`: Sample rate\n      header[blockSizeBits] = data[2] & 0b11110000;\n      header[sampleRateBits] = data[2] & 0b00001111;\n\n      header[blockSize] = blockSizeValues[header[blockSizeBits]];\n      if (header[blockSize] === reserved) {\n        return null;\n      }\n\n      header[sampleRate] = sampleRateValues[header[sampleRateBits]];\n      if (header[sampleRate] === bad) {\n        return null;\n      }\n\n      // Byte (4 of 6)\n      // * `FFFF....`: Channel assignment\n      // * `....GGG.`: Sample size in bits\n      // * `.......H`: Reserved 0 - mandatory, 1 - reserved\n      if (data[3] & 0b00000001) {\n        return null;\n      }\n\n      const channelAssignment = channelAssignments[data[3] & 0b11110000];\n      if (channelAssignment === reserved) {\n        return null;\n      }\n\n      header[channels] = channelAssignment[channels];\n      header[channelMode] = channelAssignment[description];\n\n      header[bitDepth] = bitDepthValues[data[3] & 0b00001110];\n      if (header[bitDepth] === reserved) {\n        return null;\n      }\n    } else {\n      Object.assign(header, cachedHeader);\n    }\n\n    // Byte (5...)\n    // * `IIIIIIII|...`: VBR block size ? sample number : frame number\n    header[length] = 5;\n\n    // check if there is enough data to parse UTF8\n    data = yield* codecParser[readRawData](header[length] + 8, readOffset);\n\n    const decodedUtf8 = FLACHeader._decodeUTF8Int(data[subarray](4));\n    if (!decodedUtf8) {\n      return null;\n    }\n\n    if (header[blockingStrategyBits]) {\n      header[sampleNumber] = decodedUtf8.value;\n    } else {\n      header[frameNumber] = decodedUtf8.value;\n    }\n\n    header[length] += decodedUtf8[length];\n\n    // Byte (...)\n    // * `JJJJJJJJ|(JJJJJJJJ)`: Blocksize (8/16bit custom value)\n    if (header[blockSizeBits] === 0b01100000) {\n      // 8 bit\n      if (data[length] < header[length])\n        data = yield* codecParser[readRawData](header[length], readOffset);\n\n      header[blockSize] = data[header[length] - 1] + 1;\n      header[length] += 1;\n    } else if (header[blockSizeBits] === 0b01110000) {\n      // 16 bit\n      if (data[length] < header[length])\n        data = yield* codecParser[readRawData](header[length], readOffset);\n\n      header[blockSize] =\n        (data[header[length] - 1] << 8) + data[header[length]] + 1;\n      header[length] += 2;\n    }\n\n    header[samples] = header[blockSize];\n\n    // Byte (...)\n    // * `KKKKKKKK|(KKKKKKKK)`: Sample rate (8/16bit custom value)\n    if (header[sampleRateBits] === 0b00001100) {\n      // 8 bit\n      if (data[length] < header[length])\n        data = yield* codecParser[readRawData](header[length], readOffset);\n\n      header[sampleRate] = data[header[length] - 1] * 1000;\n      header[length] += 1;\n    } else if (header[sampleRateBits] === 0b00001101) {\n      // 16 bit\n      if (data[length] < header[length])\n        data = yield* codecParser[readRawData](header[length], readOffset);\n\n      header[sampleRate] =\n        (data[header[length] - 1] << 8) + data[header[length]];\n      header[length] += 2;\n    } else if (header[sampleRateBits] === 0b00001110) {\n      // 16 bit\n      if (data[length] < header[length])\n        data = yield* codecParser[readRawData](header[length], readOffset);\n\n      header[sampleRate] =\n        ((data[header[length] - 1] << 8) + data[header[length]]) * 10;\n      header[length] += 2;\n    }\n\n    // Byte (...)\n    // * `LLLLLLLL`: CRC-8\n    if (data[length] < header[length])\n      data = yield* codecParser[readRawData](header[length], readOffset);\n\n    header[crc] = data[header[length] - 1];\n    if (header[crc] !== crc8(data[subarray](0, header[length] - 1))) {\n      return null;\n    }\n\n    {\n      if (!cachedHeader) {\n        const {\n          blockingStrategyBits,\n          frameNumber,\n          sampleNumber,\n          samples,\n          sampleRateBits,\n          blockSizeBits,\n          crc,\n          length,\n          ...codecUpdateFields\n        } = header;\n        headerCache[setHeader](key, header, codecUpdateFields);\n      }\n    }\n    return new FLACHeader(header);\n  }\n\n  /**\n   * @private\n   * Call FLACHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[crc16] = null; // set in FLACFrame\n    this[blockingStrategy] = header[blockingStrategy];\n    this[blockSize] = header[blockSize];\n    this[frameNumber] = header[frameNumber];\n    this[sampleNumber] = header[sampleNumber];\n    this[streamInfo] = null; // set during ogg parsing\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore, headerStore } from \"../../globals.js\";\nimport {\n  length,\n  pageSequenceNumber,\n  data,\n  codec,\n  codecFrames,\n  segments,\n  subarray,\n  readRawData,\n  incrementRawData,\n  mapFrameStats,\n  logWarning,\n  parseFrame,\n  parseOggPage,\n  getHeader,\n  enable,\n  checkFrameFooterCrc16,\n  getHeaderFromUint8Array,\n} from \"../../constants.js\";\nimport Parser from \"../Parser.js\";\nimport FLACFrame from \"./FLACFrame.js\";\nimport FLACHeader from \"./FLACHeader.js\";\n\nconst MIN_FLAC_FRAME_SIZE = 2;\nconst MAX_FLAC_FRAME_SIZE = 512 * 1024;\n\nexport default class FLACParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = FLACFrame;\n    this.Header = FLACHeader;\n\n    onCodec(this[codec]);\n  }\n\n  get [codec]() {\n    return \"flac\";\n  }\n\n  *_getNextFrameSyncOffset(offset) {\n    const data = yield* this._codecParser[readRawData](2, 0);\n    const dataLength = data[length] - 2;\n\n    while (offset < dataLength) {\n      // * `11111111|111110..`: Frame sync\n      // * `........|......0.`: Reserved 0 - mandatory, 1 - reserved\n      const firstByte = data[offset];\n      if (firstByte === 0xff) {\n        const secondByte = data[offset + 1];\n        if (secondByte === 0xf8 || secondByte === 0xf9) break;\n        if (secondByte !== 0xff) offset++; // might as well check for the next sync byte\n      }\n      offset++;\n    }\n\n    return offset;\n  }\n\n  *[parseFrame]() {\n    // find the first valid frame header\n    do {\n      const header = yield* FLACHeader[getHeader](\n        this._codecParser,\n        this._headerCache,\n        0,\n      );\n\n      if (header) {\n        // found a valid frame header\n        // find the next valid frame header\n        let nextHeaderOffset =\n          headerStore.get(header)[length] + MIN_FLAC_FRAME_SIZE;\n\n        while (nextHeaderOffset <= MAX_FLAC_FRAME_SIZE) {\n          if (\n            this._codecParser._flushing ||\n            (yield* FLACHeader[getHeader](\n              this._codecParser,\n              this._headerCache,\n              nextHeaderOffset,\n            ))\n          ) {\n            // found a valid next frame header\n            let frameData = yield* this._codecParser[readRawData](\n              nextHeaderOffset,\n            );\n\n            if (!this._codecParser._flushing)\n              frameData = frameData[subarray](0, nextHeaderOffset);\n\n            // check that this is actually the next header by validating the frame footer crc16\n            if (FLACFrame[checkFrameFooterCrc16](frameData)) {\n              // both frame headers, and frame footer crc16 are valid, we are synced (odds are pretty low of a false positive)\n              const frame = new FLACFrame(frameData, header);\n\n              this._headerCache[enable](); // start caching when synced\n              this._codecParser[incrementRawData](nextHeaderOffset); // increment to the next frame\n              this._codecParser[mapFrameStats](frame);\n\n              return frame;\n            }\n          }\n\n          nextHeaderOffset = yield* this._getNextFrameSyncOffset(\n            nextHeaderOffset + 1,\n          );\n        }\n\n        this._codecParser[logWarning](\n          `Unable to sync FLAC frame after searching ${nextHeaderOffset} bytes.`,\n        );\n        this._codecParser[incrementRawData](nextHeaderOffset);\n      } else {\n        // not synced, increment data to continue syncing\n        this._codecParser[incrementRawData](\n          yield* this._getNextFrameSyncOffset(1),\n        );\n      }\n    } while (true);\n  }\n\n  [parseOggPage](oggPage) {\n    if (oggPage[pageSequenceNumber] === 0) {\n      // Identification header\n\n      this._headerCache[enable]();\n      this._streamInfo = oggPage[data][subarray](13);\n    } else if (oggPage[pageSequenceNumber] === 1) {\n      // Vorbis comments\n    } else {\n      oggPage[codecFrames] = frameStore\n        .get(oggPage)\n        [segments].map((segment) => {\n          const header = FLACHeader[getHeaderFromUint8Array](\n            segment,\n            this._headerCache,\n          );\n\n          if (header) {\n            return new FLACFrame(segment, header, this._streamInfo);\n          } else {\n            this._codecParser[logWarning](\n              \"Failed to parse Ogg FLAC frame\",\n              \"Skipping invalid FLAC frame\",\n            );\n          }\n        })\n        .filter((frame) => !!frame);\n    }\n\n    return oggPage;\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://xiph.org/ogg/doc/framing.html\n\nAAAAAAAA AAAAAAAA AAAAAAAA AAAAAAAA BBBBBBBB 00000CDE\n\n(LSB)                                                             (MSB)\nFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\nGGGGGGGG GGGGGGGG GGGGGGGG GGGGGGGG\nHHHHHHHH HHHHHHHH HHHHHHHH HHHHHHHH\nIIIIIIII IIIIIIII IIIIIIII IIIIIIII\n\nJJJJJJJJ\nLLLLLLLL...\n\nOgg Page Header\nLetter  Length (bits)  Description\nA   32  0x4f676753, \"OggS\"\nB   8   stream_structure_version\nC   1   (0 no, 1 yes) last page of logical bitstream (eos)\nD   1   (0 no, 1 yes) first page of logical bitstream (bos)\nE   1   (0 no, 1 yes) continued packet\n\nF   64  absolute granule position\nG   32  stream serial number\nH   32  page sequence no\nI   32  page checksum\nJ   8   Number of page segments in the segment table\nL   n   Segment table (n=page_segments+26).\n        Segment table values sum to the total length of the packet.\n        Last value is always < 0xFF. Last lacing value will be 0x00 if evenly divisible by 0xFF.\n        \n*/\n\nimport { headerStore } from \"../../globals.js\";\nimport {\n  absoluteGranulePosition,\n  isContinuedPacket,\n  isFirstPage,\n  isLastPage,\n  pageSequenceNumber,\n  streamSerialNumber,\n  length,\n  pageChecksum,\n  frameLength,\n  streamStructureVersion,\n  pageSegmentTable,\n  pageSegmentBytes,\n  buffer,\n  subarray,\n  readRawData,\n  getHeader,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\n\nexport default class OggPageHeader {\n  static *[getHeader](codecParser, headerCache, readOffset) {\n    const header = {};\n\n    // Must be at least 28 bytes.\n    let data = yield* codecParser[readRawData](28, readOffset);\n\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    if (\n      data[0] !== 0x4f || // O\n      data[1] !== 0x67 || // g\n      data[2] !== 0x67 || // g\n      data[3] !== 0x53 //    S\n    ) {\n      return null;\n    }\n\n    // Byte (5 of 28)\n    // * `BBBBBBBB`: stream_structure_version\n    header[streamStructureVersion] = data[4];\n\n    // Byte (6 of 28)\n    // * `00000CDE`\n    // * `00000...`: All zeros\n    // * `.....C..`: (0 no, 1 yes) last page of logical bitstream (eos)\n    // * `......D.`: (0 no, 1 yes) first page of logical bitstream (bos)\n    // * `.......E`: (0 no, 1 yes) continued packet\n    const zeros = data[5] & 0b11111000;\n    if (zeros) return null;\n\n    header[isLastPage] = !!(data[5] & 0b00000100);\n    header[isFirstPage] = !!(data[5] & 0b00000010);\n    header[isContinuedPacket] = !!(data[5] & 0b00000001);\n\n    const view = new dataView(uint8Array.from(data[subarray](0, 28))[buffer]);\n\n    // Byte (7-14 of 28)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`\n    // * Absolute Granule Position\n\n    /**\n     * @todo Safari does not support getBigInt64, but it also doesn't support Ogg\n     */\n    try {\n      header[absoluteGranulePosition] = view.getBigInt64(6, true);\n    } catch {}\n\n    // Byte (15-18 of 28)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`\n    // * Stream Serial Number\n    header[streamSerialNumber] = view.getInt32(14, true);\n\n    // Byte (19-22 of 28)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`\n    // * Page Sequence Number\n    header[pageSequenceNumber] = view.getInt32(18, true);\n\n    // Byte (23-26 of 28)\n    // * `IIIIIIII|IIIIIIII|IIIIIIII|IIIIIIII`\n    // * Page Checksum\n    header[pageChecksum] = view.getInt32(22, true);\n\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    const pageSegmentTableLength = data[26];\n    header[length] = pageSegmentTableLength + 27;\n\n    data = yield* codecParser[readRawData](header[length], readOffset); // read in the page segment table\n\n    header[frameLength] = 0;\n    header[pageSegmentTable] = [];\n    header[pageSegmentBytes] = uint8Array.from(\n      data[subarray](27, header[length]),\n    );\n\n    for (let i = 0, segmentLength = 0; i < pageSegmentTableLength; i++) {\n      const segmentByte = header[pageSegmentBytes][i];\n\n      header[frameLength] += segmentByte;\n      segmentLength += segmentByte;\n\n      if (segmentByte !== 0xff || i === pageSegmentTableLength - 1) {\n        header[pageSegmentTable].push(segmentLength);\n        segmentLength = 0;\n      }\n    }\n\n    return new OggPageHeader(header);\n  }\n\n  /**\n   * @private\n   * Call OggPageHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    headerStore.set(this, header);\n\n    this[absoluteGranulePosition] = header[absoluteGranulePosition];\n    this[isContinuedPacket] = header[isContinuedPacket];\n    this[isFirstPage] = header[isFirstPage];\n    this[isLastPage] = header[isLastPage];\n    this[pageSegmentTable] = header[pageSegmentTable];\n    this[pageSequenceNumber] = header[pageSequenceNumber];\n    this[pageChecksum] = header[pageChecksum];\n    this[streamSerialNumber] = header[streamSerialNumber];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore, frameStore } from \"../../globals.js\";\nimport {\n  codecFrames,\n  rawData,\n  absoluteGranulePosition,\n  crc32,\n  duration,\n  isContinuedPacket,\n  isFirstPage,\n  isLastPage,\n  pageSequenceNumber,\n  samples,\n  streamSerialNumber,\n  length,\n  pageChecksum,\n  frameLength,\n  subarray,\n  readRawData,\n  getFrame,\n  getHeader,\n} from \"../../constants.js\";\n\nimport Frame from \"../Frame.js\";\nimport OggPageHeader from \"./OggPageHeader.js\";\n\nexport default class OggPage extends Frame {\n  static *[getFrame](codecParser, headerCache, readOffset) {\n    const header = yield* OggPageHeader[getHeader](\n      codecParser,\n      headerCache,\n      readOffset,\n    );\n\n    if (header) {\n      const frameLengthValue = headerStore.get(header)[frameLength];\n      const headerLength = headerStore.get(header)[length];\n      const totalLength = headerLength + frameLengthValue;\n\n      const rawDataValue = (yield* codecParser[readRawData](totalLength, 0))[\n        subarray\n      ](0, totalLength);\n\n      const frame = rawDataValue[subarray](headerLength, totalLength);\n\n      return new OggPage(header, frame, rawDataValue);\n    } else {\n      return null;\n    }\n  }\n\n  constructor(header, frame, rawDataValue) {\n    super(header, frame);\n\n    frameStore.get(this)[length] = rawDataValue[length];\n\n    this[codecFrames] = [];\n    this[rawData] = rawDataValue;\n    this[absoluteGranulePosition] = header[absoluteGranulePosition];\n    this[crc32] = header[pageChecksum];\n    this[duration] = 0;\n    this[isContinuedPacket] = header[isContinuedPacket];\n    this[isFirstPage] = header[isFirstPage];\n    this[isLastPage] = header[isLastPage];\n    this[pageSequenceNumber] = header[pageSequenceNumber];\n    this[samples] = 0;\n    this[streamSerialNumber] = header[streamSerialNumber];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { sampleRate, frameCount, frameSize } from \"../../constants.js\";\nimport CodecFrame from \"../CodecFrame.js\";\n\nexport default class OpusFrame extends CodecFrame {\n  constructor(data, header) {\n    super(\n      header,\n      data,\n      ((header[frameSize] * header[frameCount]) / 1000) * header[sampleRate],\n    );\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://tools.ietf.org/html/rfc7845.html\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|      'O'      |      'p'      |      'u'      |      's'      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|      'H'      |      'e'      |      'a'      |      'd'      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Version = 1  | Channel Count |           Pre-skip            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     Input Sample Rate (Hz)                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Output Gain (Q7.8 in dB)    | Mapping Family|               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               :\n|                                                               |\n:               Optional Channel Mapping Table...               :\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nLetter  Length (bits)  Description\nA  64  Magic Signature - OpusHead\nB  8   Version number - 00000001\nC  8   Output channel count (unsigned)\nD  16  Pre-skip (unsigned, little endian)\nE  32  Sample rate (unsigned, little endian)\nF  16  Output Gain (signed, little endian)\nG  8   Channel Mapping family (unsigned)\n\n// if(channel mapping !== 0)\nH  8   Stream count (unsigned)\nI  8   Coupled Stream Count (unsigned)\nJ  8*C Channel Mapping\n*/\n\nimport {\n  rate48000,\n  vorbisOpusChannelMapping,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  channels,\n  length,\n  bandwidth,\n  channelMappingFamily,\n  channelMappingTable,\n  coupledStreamCount,\n  frameCount,\n  frameSize,\n  hasOpusPadding,\n  inputSampleRate,\n  isVbr,\n  mode,\n  outputGain,\n  preSkip,\n  streamCount,\n  data,\n  buffer,\n  subarray,\n  getHeader,\n  setHeader,\n  getHeaderFromUint8Array,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\nimport { bytesToString } from \"../../utilities.js\";\n\nimport CodecHeader from \"../CodecHeader.js\";\n\n/* prettier-ignore */\nconst channelMappingFamilies = {\n  0b00000000: vorbisOpusChannelMapping.slice(0,2),\n    /*\n    0: \"monophonic (mono)\"\n    1: \"stereo (left, right)\"\n    */\n  0b00000001: vorbisOpusChannelMapping\n    /*\n    0: \"monophonic (mono)\"\n    1: \"stereo (left, right)\"\n    2: \"linear surround (left, center, right)\"\n    3: \"quadraphonic (front left, front right, rear left, rear right)\"\n    4: \"5.0 surround (front left, front center, front right, rear left, rear right)\"\n    5: \"5.1 surround (front left, front center, front right, rear left, rear right, LFE)\"\n    6: \"6.1 surround (front left, front center, front right, side left, side right, rear center, LFE)\"\n    7: \"7.1 surround (front left, front center, front right, side left, side right, rear left, rear right, LFE)\"\n    */\n  // additional channel mappings are user defined\n};\n\nconst silkOnly = \"SILK-only\";\nconst celtOnly = \"CELT-only\";\nconst hybrid = \"Hybrid\";\n\nconst narrowBand = \"narrowband\";\nconst mediumBand = \"medium-band\";\nconst wideBand = \"wideband\";\nconst superWideBand = \"super-wideband\";\nconst fullBand = \"fullband\";\n\n//  0 1 2 3 4 5 6 7\n// +-+-+-+-+-+-+-+-+\n// | config  |s| c |\n// +-+-+-+-+-+-+-+-+\n// prettier-ignore\nconst configTable = {\n  0b00000000: { [mode]: silkOnly, [bandwidth]: narrowBand, [frameSize]: 10 },\n  0b00001000: { [mode]: silkOnly, [bandwidth]: narrowBand, [frameSize]: 20 },\n  0b00010000: { [mode]: silkOnly, [bandwidth]: narrowBand, [frameSize]: 40 },\n  0b00011000: { [mode]: silkOnly, [bandwidth]: narrowBand, [frameSize]: 60 },\n  0b00100000: { [mode]: silkOnly, [bandwidth]: mediumBand, [frameSize]: 10 },\n  0b00101000: { [mode]: silkOnly, [bandwidth]: mediumBand, [frameSize]: 20 },\n  0b00110000: { [mode]: silkOnly, [bandwidth]: mediumBand, [frameSize]: 40 },\n  0b00111000: { [mode]: silkOnly, [bandwidth]: mediumBand, [frameSize]: 60 },\n  0b01000000: { [mode]: silkOnly, [bandwidth]: wideBand, [frameSize]: 10 },\n  0b01001000: { [mode]: silkOnly, [bandwidth]: wideBand, [frameSize]: 20 },\n  0b01010000: { [mode]: silkOnly, [bandwidth]: wideBand, [frameSize]: 40 },\n  0b01011000: { [mode]: silkOnly, [bandwidth]: wideBand, [frameSize]: 60 },\n  0b01100000: { [mode]: hybrid, [bandwidth]: superWideBand, [frameSize]: 10 },\n  0b01101000: { [mode]: hybrid, [bandwidth]: superWideBand, [frameSize]: 20 },\n  0b01110000: { [mode]: hybrid, [bandwidth]: fullBand, [frameSize]: 10 },\n  0b01111000: { [mode]: hybrid, [bandwidth]: fullBand, [frameSize]: 20 },\n  0b10000000: { [mode]: celtOnly, [bandwidth]: narrowBand, [frameSize]: 2.5 },\n  0b10001000: { [mode]: celtOnly, [bandwidth]: narrowBand, [frameSize]: 5 },\n  0b10010000: { [mode]: celtOnly, [bandwidth]: narrowBand, [frameSize]: 10 },\n  0b10011000: { [mode]: celtOnly, [bandwidth]: narrowBand, [frameSize]: 20 },\n  0b10100000: { [mode]: celtOnly, [bandwidth]: wideBand, [frameSize]: 2.5 },\n  0b10101000: { [mode]: celtOnly, [bandwidth]: wideBand, [frameSize]: 5 },\n  0b10110000: { [mode]: celtOnly, [bandwidth]: wideBand, [frameSize]: 10 },\n  0b10111000: { [mode]: celtOnly, [bandwidth]: wideBand, [frameSize]: 20 },\n  0b11000000: { [mode]: celtOnly, [bandwidth]: superWideBand, [frameSize]: 2.5 },\n  0b11001000: { [mode]: celtOnly, [bandwidth]: superWideBand, [frameSize]: 5 },\n  0b11010000: { [mode]: celtOnly, [bandwidth]: superWideBand, [frameSize]: 10 },\n  0b11011000: { [mode]: celtOnly, [bandwidth]: superWideBand, [frameSize]: 20 },\n  0b11100000: { [mode]: celtOnly, [bandwidth]: fullBand, [frameSize]: 2.5 },\n  0b11101000: { [mode]: celtOnly, [bandwidth]: fullBand, [frameSize]: 5 },\n  0b11110000: { [mode]: celtOnly, [bandwidth]: fullBand, [frameSize]: 10 },\n  0b11111000: { [mode]: celtOnly, [bandwidth]: fullBand, [frameSize]: 20 },\n};\n\nexport default class OpusHeader extends CodecHeader {\n  static [getHeaderFromUint8Array](dataValue, packetData, headerCache) {\n    const header = {};\n\n    // get length of header\n    // Byte (10 of 19)\n    // * `CCCCCCCC`: Channel Count\n    header[channels] = dataValue[9];\n    // Byte (19 of 19)\n    // * `GGGGGGGG`: Channel Mapping Family\n    header[channelMappingFamily] = dataValue[18];\n\n    header[length] =\n      header[channelMappingFamily] !== 0 ? 21 + header[channels] : 19;\n\n    if (dataValue[length] < header[length])\n      throw new Error(\"Out of data while inside an Ogg Page\");\n\n    // Page Segment Bytes (1-2)\n    // * `AAAAA...`: Packet config\n    // * `.....B..`:\n    // * `......CC`: Packet code\n    const packetMode = packetData[0] & 0b00000011;\n    const packetLength = packetMode === 3 ? 2 : 1;\n\n    // Check header cache\n    const key =\n      bytesToString(dataValue[subarray](0, header[length])) +\n      bytesToString(packetData[subarray](0, packetLength));\n    const cachedHeader = headerCache[getHeader](key);\n\n    if (cachedHeader) return new OpusHeader(cachedHeader);\n\n    // Bytes (1-8 of 19): OpusHead - Magic Signature\n    if (key.substr(0, 8) !== \"OpusHead\") {\n      return null;\n    }\n\n    // Byte (9 of 19)\n    // * `00000001`: Version number\n    if (dataValue[8] !== 1) return null;\n\n    header[data] = uint8Array.from(dataValue[subarray](0, header[length]));\n\n    const view = new dataView(header[data][buffer]);\n\n    header[bitDepth] = 16;\n\n    // Byte (10 of 19)\n    // * `CCCCCCCC`: Channel Count\n    // set earlier to determine length\n\n    // Byte (11-12 of 19)\n    // * `DDDDDDDD|DDDDDDDD`: Pre skip\n    header[preSkip] = view.getUint16(10, true);\n\n    // Byte (13-16 of 19)\n    // * `EEEEEEEE|EEEEEEEE|EEEEEEEE|EEEEEEEE`: Sample Rate\n    header[inputSampleRate] = view.getUint32(12, true);\n    // Opus is always decoded at 48kHz\n    header[sampleRate] = rate48000;\n\n    // Byte (17-18 of 19)\n    // * `FFFFFFFF|FFFFFFFF`: Output Gain\n    header[outputGain] = view.getInt16(16, true);\n\n    // Byte (19 of 19)\n    // * `GGGGGGGG`: Channel Mapping Family\n    // set earlier to determine length\n    if (header[channelMappingFamily] in channelMappingFamilies) {\n      header[channelMode] =\n        channelMappingFamilies[header[channelMappingFamily]][\n          header[channels] - 1\n        ];\n      if (!header[channelMode]) return null;\n    }\n\n    if (header[channelMappingFamily] !== 0) {\n      // * `HHHHHHHH`: Stream count\n      header[streamCount] = dataValue[19];\n\n      // * `IIIIIIII`: Coupled Stream count\n      header[coupledStreamCount] = dataValue[20];\n\n      // * `JJJJJJJJ|...` Channel Mapping table\n      header[channelMappingTable] = [\n        ...dataValue[subarray](21, header[channels] + 21),\n      ];\n    }\n\n    const packetConfig = configTable[0b11111000 & packetData[0]];\n    header[mode] = packetConfig[mode];\n    header[bandwidth] = packetConfig[bandwidth];\n    header[frameSize] = packetConfig[frameSize];\n\n    // https://tools.ietf.org/html/rfc6716#appendix-B\n    switch (packetMode) {\n      case 0:\n        // 0: 1 frame in the packet\n        header[frameCount] = 1;\n        break;\n      case 1:\n      // 1: 2 frames in the packet, each with equal compressed size\n      case 2:\n        // 2: 2 frames in the packet, with different compressed sizes\n        header[frameCount] = 2;\n        break;\n      case 3:\n        // 3: an arbitrary number of frames in the packet\n        header[isVbr] = !!(0b10000000 & packetData[1]);\n        header[hasOpusPadding] = !!(0b01000000 & packetData[1]);\n        header[frameCount] = 0b00111111 & packetData[1];\n        break;\n      default:\n        return null;\n    }\n\n    // set header cache\n    {\n      const {\n        length,\n        data: headerData,\n        channelMappingFamily,\n        ...codecUpdateFields\n      } = header;\n\n      headerCache[setHeader](key, header, codecUpdateFields);\n    }\n\n    return new OpusHeader(header);\n  }\n\n  /**\n   * @private\n   * Call OpusHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[data] = header[data];\n    this[bandwidth] = header[bandwidth];\n    this[channelMappingFamily] = header[channelMappingFamily];\n    this[channelMappingTable] = header[channelMappingTable];\n    this[coupledStreamCount] = header[coupledStreamCount];\n    this[frameCount] = header[frameCount];\n    this[frameSize] = header[frameSize];\n    this[hasOpusPadding] = header[hasOpusPadding];\n    this[inputSampleRate] = header[inputSampleRate];\n    this[isVbr] = header[isVbr];\n    this[mode] = header[mode];\n    this[outputGain] = header[outputGain];\n    this[preSkip] = header[preSkip];\n    this[streamCount] = header[streamCount];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore } from \"../../globals.js\";\nimport {\n  codecFrames,\n  data,\n  pageSequenceNumber,\n  codec,\n  segments,\n  logError,\n  parseOggPage,\n  enable,\n  getHeaderFromUint8Array,\n} from \"../../constants.js\";\nimport Parser from \"../Parser.js\";\nimport OpusFrame from \"./OpusFrame.js\";\nimport OpusHeader from \"./OpusHeader.js\";\n\nexport default class OpusParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = OpusFrame;\n    this.Header = OpusHeader;\n\n    onCodec(this[codec]);\n    this._identificationHeader = null;\n  }\n\n  get [codec]() {\n    return \"opus\";\n  }\n\n  /**\n   * @todo implement continued page support\n   */\n  [parseOggPage](oggPage) {\n    if (oggPage[pageSequenceNumber] === 0) {\n      // Identification header\n\n      this._headerCache[enable]();\n      this._identificationHeader = oggPage[data];\n    } else if (oggPage[pageSequenceNumber] === 1) {\n      // OpusTags\n    } else {\n      oggPage[codecFrames] = frameStore\n        .get(oggPage)\n        [segments].map((segment) => {\n          const header = OpusHeader[getHeaderFromUint8Array](\n            this._identificationHeader,\n            segment,\n            this._headerCache,\n          );\n\n          if (header) return new OpusFrame(segment, header);\n\n          this._codecParser[logError](\n            \"Failed to parse Ogg Opus Header\",\n            \"Not a valid Ogg Opus file\",\n          );\n        });\n    }\n\n    return oggPage;\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame.js\";\n\nexport default class VorbisFrame extends CodecFrame {\n  constructor(data, header, samples) {\n    super(header, data, samples);\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\n\n1  1) [packet_type] : 8 bit value\n2  2) 0x76, 0x6f, 0x72, 0x62, 0x69, 0x73: the characters ’v’,’o’,’r’,’b’,’i’,’s’ as six octets\n\nLetter bits Description\nA      8    Packet type\nB      48   Magic signature (vorbis)\nC      32   Version number\nD      8    Channels\nE      32   Sample rate\nF      32   Bitrate Maximum (signed)\nG      32   Bitrate Nominal (signed)\nH      32   Bitrate Minimum (signed)\nI      4    blocksize 1\nJ      4    blocksize 0\nK      1    Framing flag\n*/\n\nimport {\n  vorbisOpusChannelMapping,\n  bitDepth,\n  channelMode,\n  sampleRate,\n  channels,\n  length,\n  bitrateMaximum,\n  bitrateMinimum,\n  bitrateNominal,\n  blocksize0,\n  blocksize1,\n  data,\n  vorbisComments,\n  vorbisSetup,\n  version,\n  buffer,\n  subarray,\n  getHeader,\n  setHeader,\n  getHeaderFromUint8Array,\n  uint8Array,\n  dataView,\n} from \"../../constants.js\";\nimport { bytesToString } from \"../../utilities.js\";\n\nimport CodecHeader from \"../CodecHeader.js\";\n\nconst blockSizes = {\n  // 0b0110: 64,\n  // 0b0111: 128,\n  // 0b1000: 256,\n  // 0b1001: 512,\n  // 0b1010: 1024,\n  // 0b1011: 2048,\n  // 0b1100: 4096,\n  // 0b1101: 8192\n};\nfor (let i = 0; i < 8; i++) blockSizes[i + 6] = 2 ** (6 + i);\n\nexport default class VorbisHeader extends CodecHeader {\n  static [getHeaderFromUint8Array](\n    dataValue,\n    headerCache,\n    vorbisCommentsData,\n    vorbisSetupData,\n  ) {\n    // Must be at least 30 bytes.\n    if (dataValue[length] < 30)\n      throw new Error(\"Out of data while inside an Ogg Page\");\n\n    // Check header cache\n    const key = bytesToString(dataValue[subarray](0, 30));\n    const cachedHeader = headerCache[getHeader](key);\n    if (cachedHeader) return new VorbisHeader(cachedHeader);\n\n    const header = { [length]: 30 };\n\n    // Bytes (1-7 of 30): /01vorbis - Magic Signature\n    if (key.substr(0, 7) !== \"\\x01vorbis\") {\n      return null;\n    }\n\n    header[data] = uint8Array.from(dataValue[subarray](0, 30));\n    const view = new dataView(header[data][buffer]);\n\n    // Byte (8-11 of 30)\n    // * `CCCCCCCC|CCCCCCCC|CCCCCCCC|CCCCCCCC`: Version number\n    header[version] = view.getUint32(7, true);\n    if (header[version] !== 0) return null;\n\n    // Byte (12 of 30)\n    // * `DDDDDDDD`: Channel Count\n    header[channels] = dataValue[11];\n    header[channelMode] =\n      vorbisOpusChannelMapping[header[channels] - 1] || \"application defined\";\n\n    // Byte (13-16 of 30)\n    // * `EEEEEEEE|EEEEEEEE|EEEEEEEE|EEEEEEEE`: Sample Rate\n    header[sampleRate] = view.getUint32(12, true);\n\n    // Byte (17-20 of 30)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`: Bitrate Maximum\n    header[bitrateMaximum] = view.getInt32(16, true);\n\n    // Byte (21-24 of 30)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`: Bitrate Nominal\n    header[bitrateNominal] = view.getInt32(20, true);\n\n    // Byte (25-28 of 30)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`: Bitrate Minimum\n    header[bitrateMinimum] = view.getInt32(24, true);\n\n    // Byte (29 of 30)\n    // * `IIII....` Blocksize 1\n    // * `....JJJJ` Blocksize 0\n    header[blocksize1] = blockSizes[(dataValue[28] & 0b11110000) >> 4];\n    header[blocksize0] = blockSizes[dataValue[28] & 0b00001111];\n    if (header[blocksize0] > header[blocksize1]) return null;\n\n    // Byte (29 of 30)\n    // * `00000001` Framing bit\n    if (dataValue[29] !== 0x01) return null;\n\n    header[bitDepth] = 32;\n    header[vorbisSetup] = vorbisSetupData;\n    header[vorbisComments] = vorbisCommentsData;\n\n    {\n      // set header cache\n      const {\n        length,\n        data,\n        version,\n        vorbisSetup,\n        vorbisComments,\n        ...codecUpdateFields\n      } = header;\n      headerCache[setHeader](key, header, codecUpdateFields);\n    }\n\n    return new VorbisHeader(header);\n  }\n\n  /**\n   * @private\n   * Call VorbisHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n\n    this[bitrateMaximum] = header[bitrateMaximum];\n    this[bitrateMinimum] = header[bitrateMinimum];\n    this[bitrateNominal] = header[bitrateNominal];\n    this[blocksize0] = header[blocksize0];\n    this[blocksize1] = header[blocksize1];\n    this[data] = header[data];\n    this[vorbisComments] = header[vorbisComments];\n    this[vorbisSetup] = header[vorbisSetup];\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { frameStore } from \"../../globals.js\";\nimport { BitReader, reverse } from \"../../utilities.js\";\nimport {\n  data,\n  codec,\n  blocksize0,\n  blocksize1,\n  codecFrames,\n  segments,\n  vorbis,\n  logWarning,\n  parseOggPage,\n  enable,\n  getHeaderFromUint8Array,\n} from \"../../constants.js\";\n\nimport Parser from \"../Parser.js\";\nimport VorbisFrame from \"./VorbisFrame.js\";\nimport VorbisHeader from \"./VorbisHeader.js\";\n\nexport default class VorbisParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n    this.Frame = VorbisFrame;\n\n    onCodec(this[codec]);\n\n    this._identificationHeader = null;\n    this._setupComplete = false;\n\n    this._prevBlockSize = null;\n  }\n\n  get [codec]() {\n    return vorbis;\n  }\n\n  [parseOggPage](oggPage) {\n    oggPage[codecFrames] = [];\n\n    for (const oggPageSegment of frameStore.get(oggPage)[segments]) {\n      if (oggPageSegment[0] === 1) {\n        // Identification header\n\n        this._headerCache[enable]();\n        this._identificationHeader = oggPage[data];\n        this._setupComplete = false;\n      } else if (oggPageSegment[0] === 3) {\n        // comment header\n\n        this._vorbisComments = oggPageSegment;\n      } else if (oggPageSegment[0] === 5) {\n        // setup header\n\n        this._vorbisSetup = oggPageSegment;\n        this._mode = this._parseSetupHeader(oggPageSegment);\n        this._setupComplete = true;\n      } else if (this._setupComplete) {\n        const header = VorbisHeader[getHeaderFromUint8Array](\n          this._identificationHeader,\n          this._headerCache,\n          this._vorbisComments,\n          this._vorbisSetup,\n        );\n\n        if (header) {\n          oggPage[codecFrames].push(\n            new VorbisFrame(\n              oggPageSegment,\n              header,\n              this._getSamples(oggPageSegment, header),\n            ),\n          );\n        } else {\n          this._codecParser[logError](\n            \"Failed to parse Ogg Vorbis Header\",\n            \"Not a valid Ogg Vorbis file\",\n          );\n        }\n      }\n    }\n\n    return oggPage;\n  }\n\n  _getSamples(segment, header) {\n    const blockFlag =\n      this._mode.blockFlags[(segment[0] >> 1) & this._mode.mask];\n\n    const currentBlockSize = blockFlag\n      ? header[blocksize1]\n      : header[blocksize0];\n\n    // data is not returned on the first frame, but is used to prime the decoder\n    // https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-590004\n    const samplesValue =\n      this._prevBlockSize === null\n        ? 0\n        : (this._prevBlockSize + currentBlockSize) / 4;\n\n    this._prevBlockSize = currentBlockSize;\n\n    return samplesValue;\n  }\n\n  // https://gitlab.xiph.org/xiph/liboggz/-/blob/master/src/liboggz/oggz_auto.c#L911\n  // https://github.com/FFmpeg/FFmpeg/blob/master/libavcodec/vorbis_parser.c\n  /*\n   * This is the format of the mode data at the end of the packet for all\n   * Vorbis Version 1 :\n   *\n   * [ 6:number_of_modes ]\n   * [ 1:size | 16:window_type(0) | 16:transform_type(0) | 8:mapping ]\n   * [ 1:size | 16:window_type(0) | 16:transform_type(0) | 8:mapping ]\n   * [ 1:size | 16:window_type(0) | 16:transform_type(0) | 8:mapping ]\n   * [ 1:framing(1) ]\n   *\n   * e.g.:\n   *\n   * MsB         LsB\n   *              <-\n   * 0 0 0 0 0 1 0 0\n   * 0 0 1 0 0 0 0 0\n   * 0 0 1 0 0 0 0 0\n   * 0 0 1|0 0 0 0 0\n   * 0 0 0 0|0|0 0 0\n   * 0 0 0 0 0 0 0 0\n   * 0 0 0 0|0 0 0 0\n   * 0 0 0 0 0 0 0 0\n   * 0 0 0 0|0 0 0 0\n   * 0 0 0|1|0 0 0 0 |\n   * 0 0 0 0 0 0 0 0 V\n   * 0 0 0|0 0 0 0 0\n   * 0 0 0 0 0 0 0 0\n   * 0 0|1 0 0 0 0 0\n   *\n   * The simplest way to approach this is to start at the end\n   * and read backwards to determine the mode configuration.\n   *\n   * liboggz and ffmpeg both use this method.\n   */\n  _parseSetupHeader(setup) {\n    const bitReader = new BitReader(setup);\n    const mode = {\n      count: 0,\n      blockFlags: [],\n    };\n\n    // sync with the framing bit\n    while ((bitReader.read(1) & 0x01) !== 1) {}\n\n    let modeBits;\n    // search in reverse to parse out the mode entries\n    // limit mode count to 63 so previous block flag will be in first packet byte\n    while (mode.count < 64 && bitReader.position > 0) {\n      reverse(bitReader.read(8)); // read mapping\n\n      // 16 bits transform type, 16 bits window type, all values must be zero\n      let currentByte = 0;\n      while (bitReader.read(8) === 0x00 && currentByte++ < 3) {} // a non-zero value may indicate the end of the mode entries, or invalid data\n\n      if (currentByte === 4) {\n        // transform type and window type were all zeros\n        modeBits = bitReader.read(7); // modeBits may need to be used in the next iteration if this is the last mode entry\n        mode.blockFlags.unshift(modeBits & 0x01); // read and store mode number -> block flag\n        bitReader.position += 6; // go back 6 bits so next iteration starts right after the block flag\n        mode.count++;\n      } else {\n        // transform type and window type were not all zeros\n        // check for mode count using previous iteration modeBits\n        if (((reverse(modeBits) & 0b01111110) >> 1) + 1 !== mode.count) {\n          this._codecParser[logWarning](\n            \"vorbis derived mode count did not match actual mode count\",\n          );\n        }\n\n        break;\n      }\n    }\n\n    // xxxxxxxa packet type\n    // xxxxxxbx mode count (number of mode count bits)\n    // xxxxxcxx previous window flag\n    // xxxxdxxx next window flag\n    mode.mask = (1 << Math.log2(mode.count)) - 1;\n\n    return mode;\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { headerStore, frameStore } from \"../../globals.js\";\nimport { bytesToString, concatBuffers } from \"../../utilities.js\";\nimport {\n  header,\n  pageSequenceNumber,\n  pageSegmentBytes,\n  pageSegmentTable,\n  codec,\n  data,\n  length,\n  segments,\n  subarray,\n  vorbis,\n  mapFrameStats,\n  logWarning,\n  fixedLengthFrameSync,\n  parseFrame,\n  parseOggPage,\n  reset,\n  uint8Array,\n  isLastPage,\n  streamSerialNumber,\n} from \"../../constants.js\";\n\nimport Parser from \"../../codecs/Parser.js\";\nimport OggPage from \"./OggPage.js\";\nimport OggPageHeader from \"./OggPageHeader.js\";\n\nimport FLACParser from \"../../codecs/flac/FLACParser.js\";\nimport OpusParser from \"../../codecs/opus/OpusParser.js\";\nimport VorbisParser from \"../../codecs/vorbis/VorbisParser.js\";\n\nclass OggStream {\n  constructor(codecParser, headerCache, onCodec) {\n    this._codecParser = codecParser;\n    this._headerCache = headerCache;\n    this._onCodec = onCodec;\n\n    this._continuedPacket = new uint8Array();\n    this._codec = null;\n    this._isSupported = null;\n  }\n\n  get [codec]() {\n    return this._codec || \"\";\n  }\n\n  _updateCodec(codec, Parser) {\n    if (this._codec !== codec) {\n      this._headerCache[reset]();\n      this._parser = new Parser(\n        this._codecParser,\n        this._headerCache,\n        this._onCodec,\n      );\n      this._codec = codec;\n    }\n  }\n\n  _checkCodecSupport({ data }) {\n    const idString = bytesToString(data[subarray](0, 8));\n\n    switch (idString) {\n      case \"fishead\\0\":\n        return false; // ignore ogg skeleton packets\n      case \"OpusHead\":\n        this._updateCodec(\"opus\", OpusParser);\n        return true;\n      case /^\\x7fFLAC/.test(idString) && idString:\n        this._updateCodec(\"flac\", FLACParser);\n        return true;\n      case /^\\x01vorbis/.test(idString) && idString:\n        this._updateCodec(vorbis, VorbisParser);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  _checkPageSequenceNumber(oggPage) {\n    if (\n      oggPage[pageSequenceNumber] !== this._pageSequenceNumber + 1 &&\n      this._pageSequenceNumber > 1 &&\n      oggPage[pageSequenceNumber] > 1\n    ) {\n      this._codecParser[logWarning](\n        \"Unexpected gap in Ogg Page Sequence Number.\",\n        `Expected: ${this._pageSequenceNumber + 1}, Got: ${\n          oggPage[pageSequenceNumber]\n        }`,\n      );\n    }\n\n    this._pageSequenceNumber = oggPage[pageSequenceNumber];\n  }\n\n  _parsePage(oggPage) {\n    if (this._isSupported === null) {\n      this._pageSequenceNumber = oggPage[pageSequenceNumber];\n      this._isSupported = this._checkCodecSupport(oggPage);\n    }\n\n    this._checkPageSequenceNumber(oggPage);\n\n    const oggPageStore = frameStore.get(oggPage);\n    const headerData = headerStore.get(oggPageStore[header]);\n\n    let offset = 0;\n    oggPageStore[segments] = headerData[pageSegmentTable].map((segmentLength) =>\n      oggPage[data][subarray](offset, (offset += segmentLength)),\n    );\n\n    // prepend any existing continued packet data\n    if (this._continuedPacket[length]) {\n      oggPageStore[segments][0] = concatBuffers(\n        this._continuedPacket,\n        oggPageStore[segments][0],\n      );\n\n      this._continuedPacket = new uint8Array();\n    }\n\n    // save any new continued packet data\n    if (\n      headerData[pageSegmentBytes][headerData[pageSegmentBytes][length] - 1] ===\n      0xff\n    ) {\n      this._continuedPacket = concatBuffers(\n        this._continuedPacket,\n        oggPageStore[segments].pop(),\n      );\n    }\n\n    if (this._isSupported) {\n      const frame = this._parser[parseOggPage](oggPage);\n      this._codecParser[mapFrameStats](frame);\n\n      return frame;\n    } else {\n      return oggPage;\n    }\n  }\n}\n\nexport default class OggParser extends Parser {\n  constructor(codecParser, headerCache, onCodec) {\n    super(codecParser, headerCache);\n\n    this._onCodec = onCodec;\n    this.Frame = OggPage;\n    this.Header = OggPageHeader;\n\n    this._streams = new Map();\n    this._currentSerialNumber = null;\n  }\n\n  get [codec]() {\n    const oggStream = this._streams.get(this._currentSerialNumber);\n\n    return oggStream ? oggStream.codec : \"\";\n  }\n\n  *[parseFrame]() {\n    const oggPage = yield* this[fixedLengthFrameSync](true);\n    this._currentSerialNumber = oggPage[streamSerialNumber];\n\n    let oggStream = this._streams.get(this._currentSerialNumber);\n    if (!oggStream) {\n      oggStream = new OggStream(\n        this._codecParser,\n        this._headerCache,\n        this._onCodec,\n      );\n      this._streams.set(this._currentSerialNumber, oggStream);\n    }\n\n    if (oggPage[isLastPage]) this._streams.delete(this._currentSerialNumber);\n\n    return oggStream._parsePage(oggPage);\n  }\n}\n","/* Copyright 2020-2023 Ethan Halsall\n    \n    This file is part of codec-parser.\n    \n    codec-parser is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    codec-parser is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { crc32Function, concatBuffers } from \"./utilities.js\";\nimport {\n  header,\n  sampleRate,\n  bitrate,\n  length,\n  frameNumber,\n  data,\n  samples,\n  codec,\n  codecFrames,\n  totalBytesOut,\n  totalSamples,\n  totalDuration,\n  crc32,\n  duration,\n  subarray,\n  readRawData,\n  incrementRawData,\n  mapCodecFrameStats,\n  mapFrameStats,\n  logWarning,\n  logError,\n  parseFrame,\n  checkCodecUpdate,\n  reset,\n} from \"./constants.js\";\nimport HeaderCache from \"./codecs/HeaderCache.js\";\nimport MPEGParser from \"./codecs/mpeg/MPEGParser.js\";\nimport AACParser from \"./codecs/aac/AACParser.js\";\nimport FLACParser from \"./codecs/flac/FLACParser.js\";\nimport OggParser from \"./containers/ogg/OggParser.js\";\n\nconst noOp = () => {};\n\nexport default class CodecParser {\n  constructor(\n    mimeType,\n    {\n      onCodec,\n      onCodecHeader,\n      onCodecUpdate,\n      enableLogging = false,\n      enableFrameCRC32 = true,\n    } = {},\n  ) {\n    this._inputMimeType = mimeType;\n    this._onCodec = onCodec || noOp;\n    this._onCodecHeader = onCodecHeader || noOp;\n    this._onCodecUpdate = onCodecUpdate;\n    this._enableLogging = enableLogging;\n    this._crc32 = enableFrameCRC32 ? crc32Function : noOp;\n\n    this[reset]();\n  }\n\n  /**\n   * @public\n   * @returns The detected codec\n   */\n  get [codec]() {\n    return this._parser ? this._parser[codec] : \"\";\n  }\n\n  [reset]() {\n    this._headerCache = new HeaderCache(\n      this._onCodecHeader,\n      this._onCodecUpdate,\n    );\n\n    this._generator = this._getGenerator();\n    this._generator.next();\n  }\n\n  /**\n   * @public\n   * @description Generator function that yields any buffered CodecFrames and resets the CodecParser\n   * @returns {Iterable<CodecFrame|OggPage>} Iterator that operates over the codec data.\n   * @yields {CodecFrame|OggPage} Parsed codec or ogg page data\n   */\n  *flush() {\n    this._flushing = true;\n\n    for (let i = this._generator.next(); i.value; i = this._generator.next()) {\n      yield i.value;\n    }\n\n    this._flushing = false;\n\n    this[reset]();\n  }\n\n  /**\n   * @public\n   * @description Generator function takes in a Uint8Array of data and returns a CodecFrame from the data for each iteration\n   * @param {Uint8Array} chunk Next chunk of codec data to read\n   * @returns {Iterable<CodecFrame|OggPage>} Iterator that operates over the codec data.\n   * @yields {CodecFrame|OggPage} Parsed codec or ogg page data\n   */\n  *parseChunk(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @public\n   * @description Parses an entire file and returns all of the contained frames.\n   * @param {Uint8Array} fileData Coded data to read\n   * @returns {Array<CodecFrame|OggPage>} CodecFrames\n   */\n  parseAll(fileData) {\n    return [...this.parseChunk(fileData), ...this.flush()];\n  }\n\n  /**\n   * @private\n   */\n  *_getGenerator() {\n    if (this._inputMimeType.match(/aac/)) {\n      this._parser = new AACParser(this, this._headerCache, this._onCodec);\n    } else if (this._inputMimeType.match(/mpeg/)) {\n      this._parser = new MPEGParser(this, this._headerCache, this._onCodec);\n    } else if (this._inputMimeType.match(/flac/)) {\n      this._parser = new FLACParser(this, this._headerCache, this._onCodec);\n    } else if (this._inputMimeType.match(/ogg/)) {\n      this._parser = new OggParser(this, this._headerCache, this._onCodec);\n    } else {\n      throw new Error(`Unsupported Codec ${mimeType}`);\n    }\n\n    this._frameNumber = 0;\n    this._currentReadPosition = 0;\n    this._totalBytesIn = 0;\n    this._totalBytesOut = 0;\n    this._totalSamples = 0;\n    this._sampleRate = undefined;\n\n    this._rawData = new Uint8Array(0);\n\n    // start parsing out frames\n    while (true) {\n      const frame = yield* this._parser[parseFrame]();\n      if (frame) yield frame;\n    }\n  }\n\n  /**\n   * @protected\n   * @param {number} minSize Minimum bytes to have present in buffer\n   * @returns {Uint8Array} rawData\n   */\n  *[readRawData](minSize = 0, readOffset = 0) {\n    let rawData;\n\n    while (this._rawData[length] <= minSize + readOffset) {\n      rawData = yield;\n\n      if (this._flushing) return this._rawData[subarray](readOffset);\n\n      if (rawData) {\n        this._totalBytesIn += rawData[length];\n        this._rawData = concatBuffers(this._rawData, rawData);\n      }\n    }\n\n    return this._rawData[subarray](readOffset);\n  }\n\n  /**\n   * @protected\n   * @param {number} increment Bytes to increment codec data\n   */\n  [incrementRawData](increment) {\n    this._currentReadPosition += increment;\n    this._rawData = this._rawData[subarray](increment);\n  }\n\n  /**\n   * @protected\n   */\n  [mapCodecFrameStats](frame) {\n    this._sampleRate = frame[header][sampleRate];\n\n    frame[header][bitrate] =\n      frame[duration] > 0\n        ? Math.round(frame[data][length] / frame[duration]) * 8\n        : 0;\n    frame[frameNumber] = this._frameNumber++;\n    frame[totalBytesOut] = this._totalBytesOut;\n    frame[totalSamples] = this._totalSamples;\n    frame[totalDuration] = (this._totalSamples / this._sampleRate) * 1000;\n    frame[crc32] = this._crc32(frame[data]);\n\n    this._headerCache[checkCodecUpdate](\n      frame[header][bitrate],\n      frame[totalDuration],\n    );\n\n    this._totalBytesOut += frame[data][length];\n    this._totalSamples += frame[samples];\n  }\n\n  /**\n   * @protected\n   */\n  [mapFrameStats](frame) {\n    if (frame[codecFrames]) {\n      // Ogg container\n      frame[codecFrames].forEach((codecFrame) => {\n        frame[duration] += codecFrame[duration];\n        frame[samples] += codecFrame[samples];\n        this[mapCodecFrameStats](codecFrame);\n      });\n\n      frame[totalSamples] = this._totalSamples;\n      frame[totalDuration] =\n        (this._totalSamples / this._sampleRate) * 1000 || 0;\n      frame[totalBytesOut] = this._totalBytesOut;\n    } else {\n      this[mapCodecFrameStats](frame);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _log(logger, messages) {\n    if (this._enableLogging) {\n      const stats = [\n        `${codec}:         ${this[codec]}`,\n        `inputMimeType: ${this._inputMimeType}`,\n        `readPosition:  ${this._currentReadPosition}`,\n        `totalBytesIn:  ${this._totalBytesIn}`,\n        `${totalBytesOut}: ${this._totalBytesOut}`,\n      ];\n\n      const width = Math.max(...stats.map((s) => s[length]));\n\n      messages.push(\n        `--stats--${\"-\".repeat(width - 9)}`,\n        ...stats,\n        \"-\".repeat(width),\n      );\n\n      logger(\n        \"codec-parser\",\n        messages.reduce((acc, message) => acc + \"\\n  \" + message, \"\"),\n      );\n    }\n  }\n\n  /**\n   * @protected\n   */\n  [logWarning](...messages) {\n    this._log(console.warn, messages);\n  }\n\n  /**\n   * @protected\n   */\n  [logError](...messages) {\n    this._log(console.error, messages);\n  }\n}\n","import CodecParser from \"./src/CodecParser.js\";\nimport * as constants from \"./src/constants.js\";\n\nexport default CodecParser;\n\nexport const absoluteGranulePosition = constants.absoluteGranulePosition;\nexport const bandwidth = constants.bandwidth;\nexport const bitDepth = constants.bitDepth;\nexport const bitrate = constants.bitrate;\nexport const bitrateMaximum = constants.bitrateMaximum;\nexport const bitrateMinimum = constants.bitrateMinimum;\nexport const bitrateNominal = constants.bitrateNominal;\nexport const buffer = constants.buffer;\nexport const bufferFullness = constants.bufferFullness;\nexport const codec = constants.codec;\nexport const codecFrames = constants.codecFrames;\nexport const coupledStreamCount = constants.coupledStreamCount;\nexport const crc = constants.crc;\nexport const crc16 = constants.crc16;\nexport const crc32 = constants.crc32;\nexport const data = constants.data;\nexport const description = constants.description;\nexport const duration = constants.duration;\nexport const emphasis = constants.emphasis;\nexport const hasOpusPadding = constants.hasOpusPadding;\nexport const header = constants.header;\nexport const isContinuedPacket = constants.isContinuedPacket;\nexport const isCopyrighted = constants.isCopyrighted;\nexport const isFirstPage = constants.isFirstPage;\nexport const isHome = constants.isHome;\nexport const isLastPage = constants.isLastPage;\nexport const isOriginal = constants.isOriginal;\nexport const isPrivate = constants.isPrivate;\nexport const isVbr = constants.isVbr;\nexport const layer = constants.layer;\nexport const length = constants.length;\nexport const mode = constants.mode;\nexport const modeExtension = constants.modeExtension;\nexport const mpeg = constants.mpeg;\nexport const mpegVersion = constants.mpegVersion;\nexport const numberAACFrames = constants.numberAACFrames;\nexport const outputGain = constants.outputGain;\nexport const preSkip = constants.preSkip;\nexport const profile = constants.profile;\nexport const protection = constants.protection;\nexport const rawData = constants.rawData;\nexport const segments = constants.segments;\nexport const subarray = constants.subarray;\nexport const version = constants.version;\nexport const vorbis = constants.vorbis;\nexport const vorbisComments = constants.vorbisComments;\nexport const vorbisSetup = constants.vorbisSetup;\nexport const blockingStrategy = constants.blockingStrategy;\nexport const blockSize = constants.blockSize;\nexport const blocksize0 = constants.blocksize0;\nexport const blocksize1 = constants.blocksize1;\nexport const channelMappingFamily = constants.channelMappingFamily;\nexport const channelMappingTable = constants.channelMappingTable;\nexport const channelMode = constants.channelMode;\nexport const channels = constants.channels;\nexport const copyrightId = constants.copyrightId;\nexport const copyrightIdStart = constants.copyrightIdStart;\nexport const frame = constants.frame;\nexport const frameCount = constants.frameCount;\nexport const frameLength = constants.frameLength;\nexport const frameNumber = constants.frameNumber;\nexport const framePadding = constants.framePadding;\nexport const frameSize = constants.frameSize;\nexport const inputSampleRate = constants.inputSampleRate;\nexport const pageChecksum = constants.pageChecksum;\nexport const pageSegmentTable = constants.pageSegmentTable;\nexport const pageSequenceNumber = constants.pageSequenceNumber;\nexport const sampleNumber = constants.sampleNumber;\nexport const sampleRate = constants.sampleRate;\nexport const samples = constants.samples;\nexport const streamCount = constants.streamCount;\nexport const streamInfo = constants.streamInfo;\nexport const streamSerialNumber = constants.streamSerialNumber;\nexport const streamStructureVersion = constants.streamStructureVersion;\nexport const totalBytesOut = constants.totalBytesOut;\nexport const totalDuration = constants.totalDuration;\nexport const totalSamples = constants.totalSamples;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.F = {};\n__webpack_require__.E = (chunkId) => {\n\tObject.keys(__webpack_require__.F).map((key) => {\n\t\t__webpack_require__.F[key](chunkId);\n\t});\n}","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === 968) return \"icecast-metadata-player-1.16.5.common.min.js\";\n\t// return url for filenames based on template\n\treturn \"icecast-metadata-player-1.16.5.\" + {\"122\":\"vorbis\",\"388\":\"mpeg\",\"390\":\"opus\",\"496\":\"synaudio\",\"756\":\"mediasource\",\"983\":\"flac\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n__webpack_require__.F.j = (chunkId) => {\n\tif((!__webpack_require__.o(installedChunks, chunkId) || installedChunks[chunkId] === undefined) && true) {\n\t\tinstalledChunks[chunkId] = null;\n\t\tvar link = document.createElement('link');\n\n\t\tif (__webpack_require__.nc) {\n\t\t\tlink.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tlink.rel = \"prefetch\";\n\t\tlink.as = \"script\";\n\t\tlink.href = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\tdocument.head.appendChild(link);\n\t}\n};\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkIcecastMetadataPlayer\"] = self[\"webpackChunkIcecastMetadataPlayer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.O(0, [179], () => {\n\t__webpack_require__.E(496);\n\t__webpack_require__.E(756);\n}, 5);","export const noOp = () => {};\nexport const p = new WeakMap();\n\nexport const state = {\n  LOADING: \"loading\",\n  PLAYING: \"playing\",\n  STOPPING: \"stopping\",\n  STOPPED: \"stopped\",\n  RETRYING: \"retrying\",\n  SWITCHING: \"switching\",\n};\n\nexport const event = {\n  BUFFER: \"buffer\",\n  PLAY: \"play\",\n  PLAY_READY: \"playready\", // internal\n  LOAD: \"load\",\n  STREAM_START: \"streamstart\",\n  STREAM: \"stream\",\n  STREAM_END: \"streamend\",\n  METADATA: \"metadata\",\n  METADATA_ENQUEUE: \"metadataenqueue\",\n  CODEC_UPDATE: \"codecupdate\",\n  STOP: \"stop\",\n  RETRY: \"retry\",\n  RETRY_TIMEOUT: \"retrytimeout\",\n  SWITCH: \"switch\",\n  WARN: \"warn\",\n  ERROR: \"error\",\n  PLAYBACK_ERROR: \"playbackerror\",\n};\n\n// options\nexport const endpoints = Symbol();\nexport const endpointOrder = Symbol();\nexport const metadataTypes = Symbol();\nexport const playbackMethod = Symbol();\nexport const audioContext = Symbol();\nexport const audioElement = Symbol();\nexport const bufferLength = Symbol();\nexport const icyMetaInt = Symbol();\nexport const icyCharacterEncoding = Symbol();\nexport const icyDetectionTimeout = Symbol();\nexport const enableLogging = Symbol();\nexport const retryDelayRate = Symbol();\nexport const retryDelayMin = Symbol();\nexport const retryDelayMax = Symbol();\nexport const retryTimeout = Symbol();\nexport const enableCodecUpdate = Symbol();\n\n// methods\nexport const getNextEndpointGenerator = Symbol();\nexport const getOptions = Symbol();\nexport const fireEvent = Symbol();\nexport const attachAudioElement = Symbol();\nexport const shouldRetry = Symbol();\nexport const logError = Symbol();\n\n// variables\nexport const endpointGenerator = Symbol();\nexport const hasIcy = Symbol();\nexport const abortController = Symbol();\nexport const playerState = Symbol();\n\n// sync state\nexport const SYNCED = Symbol(\"synced\");\nexport const SYNCING = Symbol(\"syncing\");\nexport const PCM_SYNCED = Symbol(\"pcm_synced\");\nexport const NOT_SYNCED = Symbol(\"not_synced\");\n\nexport const concatBuffers = (buffers) => {\n  const buffer = new Uint8Array(\n    buffers.reduce((acc, buf) => acc + buf.length, 0),\n  );\n\n  buffers.reduce((offset, buf) => {\n    buffer.set(buf, offset);\n    return offset + buf.length;\n  }, 0);\n\n  return buffer;\n};\n","// support for Safari 13\n// https://stackoverflow.com/a/58209729/14911733\n\nexport default class EventTargetPolyfill {\n  constructor() {\n    this._listeners = [];\n  }\n\n  hasEventListener(type, listener) {\n    return this._listeners.some(\n      (item) => item.type === type && item.listener === listener,\n    );\n  }\n\n  addEventListener(type, listener, options = {}) {\n    if (!this.hasEventListener(type, listener)) {\n      this._listeners.push({ type, listener, options });\n    }\n    // console.log(`${this}-listeners:`,this._listeners);\n    return this;\n  }\n\n  removeEventListener(type, listener) {\n    const index = this._listeners.findIndex(\n      (item) => item.type === type && item.listener === listener,\n    );\n    if (index >= 0) this._listeners.splice(index, 1);\n    return this;\n  }\n\n  removeEventListeners() {\n    this._listeners = [];\n    return this;\n  }\n\n  dispatchEvent(evt) {\n    this._listeners\n      .filter((item) => item.type === evt.type)\n      .forEach((item) => {\n        const {\n          type,\n          listener,\n          options: { once },\n        } = item;\n        listener.call(this, evt);\n        if (once === true) this.removeEventListener(type, listener);\n      });\n    return this;\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class Stats {\n  constructor() {\n    this._totalBytesRead = 0;\n    this._streamBytesRead = 0;\n    this._metadataLengthBytesRead = 0;\n    this._metadataBytesRead = 0;\n\n    this._currentBytesRemaining = 0;\n    this._currentStreamBytesRemaining = 0;\n    this._currentMetadataBytesRemaining = 0;\n  }\n\n  get stats() {\n    return {\n      totalBytesRead: this._totalBytesRead,\n      streamBytesRead: this._streamBytesRead,\n      metadataLengthBytesRead: this._metadataLengthBytesRead,\n      metadataBytesRead: this._metadataBytesRead,\n      currentBytesRemaining: this._currentBytesRemaining,\n      currentStreamBytesRemaining: this._currentStreamBytesRemaining,\n      currentMetadataBytesRemaining: this._currentMetadataBytesRemaining,\n    };\n  }\n\n  set currentStreamBytesRemaining(bytes) {\n    this._currentStreamBytesRemaining += bytes;\n  }\n\n  set currentMetadataBytesRemaining(bytes) {\n    this._currentMetadataBytesRemaining = bytes;\n  }\n\n  addBytes(bytes) {\n    this._totalBytesRead += bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  addStreamBytes(bytes) {\n    this._streamBytesRead += bytes;\n    this._currentStreamBytesRemaining -= bytes;\n  }\n\n  addMetadataLengthBytes(bytes) {\n    this._metadataLengthBytesRead += bytes;\n  }\n\n  addMetadataBytes(bytes) {\n    this._metadataBytesRead += bytes;\n    this._currentMetadataBytesRemaining -= bytes;\n  }\n\n  addCurrentBytesRemaining(bytes) {\n    this._currentBytesRemaining += bytes;\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport Stats from \"./Stats.js\";\n\nconst noOp = () => {};\n\n/**\n * @description Passthrough parser\n * @protected\n * @see IcecastMetadataReader\n */\n\nexport default class MetadataParser {\n  constructor(params) {\n    this._remainingData = 0;\n    this._currentPosition = 0;\n    this._buffer = new Uint8Array(0);\n    this._streamBuffer = [];\n    this._streamBufferLength = 0;\n    this._stats = new Stats();\n\n    this._onStream = params.onStream || noOp;\n    this._onMetadata = params.onMetadata || noOp;\n    this._onMetadataFailed = params.onMetadataFailed || noOp;\n    this._onError = params.onError || noOp;\n    this._enableLogging = params.enableLogging || false;\n\n    this._onStreamPromise = Promise.resolve();\n    this._onMetadataPromise = Promise.resolve();\n    this._generator = this._passThroughParser();\n    this._generator.next();\n  }\n\n  *_passThroughParser() {\n    this._remainingData = Infinity;\n    while (true) {\n      this._addStream(yield* this._getNextValue());\n      yield* this._sendStream();\n    }\n  }\n\n  static _concatBuffers(...buffers) {\n    const length = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n    return this._concatBuffersKnownLength(buffers, length);\n  }\n\n  static _concatBuffersKnownLength(buffers, length) {\n    const buffer = new Uint8Array(length);\n\n    buffers.reduce((offset, buf) => {\n      buffer.set(buf, offset);\n      return offset + buf.length;\n    }, 0);\n\n    return buffer;\n  }\n\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  readAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {}\n  }\n\n  async *asyncIterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n      yield i.value;\n    }\n  }\n\n  async asyncReadAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n    }\n  }\n\n  _logError(...messages) {\n    if (this._enableLogging) {\n      console.warn(\n        \"icecast-metadata-js\",\n        messages.reduce((acc, message) => acc + \"\\n  \" + message, \"\"),\n      );\n    }\n    this._onError(...messages);\n  }\n\n  _addStream(stream) {\n    this._streamBuffer.push(stream);\n    this._streamBufferLength += stream.length;\n  }\n\n  *_sendStream() {\n    if (this._streamBuffer.length) {\n      const stream = MetadataParser._concatBuffersKnownLength(\n        this._streamBuffer,\n        this._streamBufferLength,\n      );\n      this._streamBuffer = [];\n      this._streamBufferLength = 0;\n\n      this._stats.addStreamBytes(stream.length);\n\n      const streamPayload = { stream, stats: this._stats.stats };\n\n      this._onStreamPromise = this._onStream(streamPayload);\n      yield streamPayload;\n    }\n  }\n\n  *_sendMetadata(metadata) {\n    yield* this._sendStream();\n\n    const metadataPayload = {\n      metadata,\n      stats: this._stats.stats,\n    };\n\n    this._onMetadataPromise = this._onMetadata(metadataPayload);\n    yield metadataPayload;\n  }\n\n  *_getNextValue(minLength = 0) {\n    if (this._currentPosition === this._buffer.length) {\n      this._buffer = yield* this._readData();\n      this._currentPosition = 0;\n    }\n\n    while (this._buffer.length - this._currentPosition < minLength) {\n      this._buffer = MetadataParser._concatBuffers(\n        this._buffer,\n        yield* this._readData(),\n      );\n    }\n\n    const value = this._buffer.subarray(\n      this._currentPosition,\n      (minLength || this._remainingData) + this._currentPosition,\n    );\n\n    this._stats.addBytes(value.length);\n    this._remainingData =\n      value.length < this._remainingData\n        ? this._remainingData - value.length\n        : 0;\n\n    this._currentPosition += value.length;\n\n    return value;\n  }\n\n  *_readData() {\n    yield* this._sendStream();\n\n    let data;\n\n    do {\n      data = yield; // if out of data, accept new data in the .next() call\n    } while (!data || data.length === 0);\n\n    this._stats.addCurrentBytesRemaining(data.length);\n    return data;\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataParser from \"./MetadataParser.js\";\n\n/**\n * @description Parses ICY metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\n\nexport default class IcyMetadataParser extends MetadataParser {\n  constructor({\n    icyMetaInt,\n    icyDetectionTimeout = 2000,\n    icyCharacterEncoding = \"utf-8\",\n    ...rest\n  }) {\n    super(rest);\n\n    this._decoder = new globalThis.TextDecoder(icyCharacterEncoding);\n    this._icyMetaInt = icyMetaInt;\n    this._icyDetectionTimeout = icyDetectionTimeout;\n\n    this._generator = this._icyParser();\n    this._generator.next();\n  }\n\n  *_icyParser() {\n    if (yield* this._hasIcyMetadata()) {\n      do {\n        this._remainingData = this._icyMetaInt;\n        yield* this._getStream();\n        yield* this._getMetadataLength();\n        if (this._remainingData) yield* this._getMetadata();\n      } while (true);\n    }\n\n    this._remainingData = Infinity;\n    yield* this._getStream();\n  }\n\n  static parseIcyMetadata(metadataString) {\n    /**\n     * Metadata is a string of key='value' pairs delimited by a semicolon.\n     * The string is a fixed length and any unused bytes at the end are 0x00.\n     * i.e. \"StreamTitle='The Stream Title';StreamUrl='https://example.com';\\0\\0\\0\\0\\0\\0\"\n     */\n\n    const metadataRegex = /(?<key>[^\\0]+?)='(?<val>[^\\0]*?)(;$|';|'$|$)/;\n    const metadata = {};\n\n    // [{key: \"StreamTitle\", val: \"The Stream Title\"}, {key: \"StreamUrl\", val: \"https://example.com\"}]\n    for (const metadataElement of metadataString.match(\n      new RegExp(metadataRegex, \"g\"),\n    ) || []) {\n      const match = metadataElement.match(metadataRegex);\n      if (match) metadata[match[\"groups\"][\"key\"]] = match[\"groups\"][\"val\"];\n    }\n\n    // {StreamTitle: \"The Stream Title\", StreamUrl: \"https://example.com\"}\n    return metadata;\n  }\n\n  get icyMetaInt() {\n    return this._icyMetaInt;\n  }\n\n  *_hasIcyMetadata() {\n    if (this._icyMetaInt > 0) return true;\n    if (!this._icyDetectionTimeout) return false;\n\n    this._logError(\n      \"Passed in Icy-MetaInt is invalid. Attempting to detect ICY Metadata.\",\n      \"See https://github.com/eshaz/icecast-metadata-js for information on how to properly request ICY Metadata.\",\n    );\n\n    // prettier-ignore\n    const METADATA_SEARCH = [null,83,116,114,101,97,109,84,105,116,108,101,61]; // StreamTitle=\n    const startTime = Date.now();\n    let metaInt = 0;\n\n    while (startTime + this._icyDetectionTimeout > Date.now()) {\n      this._buffer = MetadataParser._concatBuffers(\n        this._buffer,\n        yield* this._readData(),\n      );\n\n      // search for metadata\n      detectMetadata: while (\n        metaInt <\n        this._buffer.length - METADATA_SEARCH.length\n      ) {\n        for (let i = 1; i < METADATA_SEARCH.length; i++) {\n          if (this._buffer[i + metaInt] !== METADATA_SEARCH[i]) {\n            metaInt++;\n            continue detectMetadata;\n          }\n        }\n\n        // found metadata\n        // prettier-ignore\n        this._logError(`Found ICY Metadata! Setting Icy-MetaInt to ${metaInt}.`);\n        this._icyMetaInt = metaInt;\n\n        return true;\n      }\n    }\n\n    // prettier-ignore\n    this._logError(\n      \"ICY Metadata not detected, but continuing anyway. Audio errors will occur if there is ICY metadata.\",\n      `Searched ${this._buffer.length} bytes for ${(Date.now() - startTime) / 1000} seconds.`,\n      \"Try increasing the `icyDetectionTimeout` value if ICY metadata is present in the stream.\"\n    );\n    this._onMetadataFailed(\"icy\");\n\n    return false;\n  }\n\n  *_getStream() {\n    this._stats.currentStreamBytesRemaining = this._remainingData;\n\n    while (this._remainingData) {\n      this._addStream(yield* super._getNextValue());\n    }\n  }\n\n  *_getMetadataLength() {\n    this._remainingData = 1;\n\n    do {\n      this._remainingData = (yield* this._getNextValue())[0] * 16;\n    } while (this._remainingData === 1);\n\n    this._stats.addMetadataLengthBytes(1);\n  }\n\n  *_getMetadata() {\n    this._stats.currentMetadataBytesRemaining = this._remainingData;\n\n    const metadata = yield* this._getNextValue(this._remainingData);\n    this._stats.addMetadataBytes(metadata.length);\n\n    yield* this._sendMetadata(\n      IcyMetadataParser.parseIcyMetadata(this._decoder.decode(metadata)),\n    );\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataParser from \"./MetadataParser.js\";\n\n/**\n * @description Parses Ogg metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\nexport default class OggMetadataParser extends MetadataParser {\n  constructor(params) {\n    super(params);\n\n    this._decoder = new globalThis.TextDecoder(\"utf-8\");\n    this._generator = this._oggParser();\n    this._generator.next();\n    this._isContinuePacket = false;\n  }\n\n  *_oggParser() {\n    if (yield* this._hasOggPage()) {\n      const codecMatcher = yield* this._identifyCodec();\n      if (codecMatcher) {\n        while (yield* this._hasOggPage()) {\n          if (!this._isContinuePacket) yield* this._getMetadata(codecMatcher);\n          yield* this._getStream();\n        }\n      }\n    }\n\n    this._remainingData = Infinity;\n    yield* this._getStream();\n  }\n\n  _getUint32(data, offset = 0) {\n    return new DataView(\n      Uint8Array.from([...data.subarray(offset, offset + 4)]).buffer,\n    ).getUint32(0, true);\n  }\n\n  _matchBytes(matchString, bytes) {\n    return String.fromCharCode(...bytes).match(matchString);\n  }\n\n  *_hasOggPage() {\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    // Byte (5 of 28) stream_structure_version\n    // Byte (6 of 28)\n    // * `00000...`: All zeros\n    // * `.....C..`: (0 no, 1 yes) last page of logical bitstream (eos)\n    // * `......D.`: (0 no, 1 yes) first page of logical bitstream (bos)\n    // * `.......E`: (0 no, 1 yes) continued packet\n    let syncBytes = [];\n    while (syncBytes.length <= 65307) {\n      // max ogg page size\n      const bytes = yield* super._getNextValue(6); // Sync with Ogg page without sending stream data\n      if (\n        bytes[0] === 0x4f &&\n        bytes[1] === 0x67 &&\n        bytes[2] === 0x67 &&\n        bytes[3] === 0x53 &&\n        !(bytes[5] & 0b11111000)\n      ) {\n        this._isContinuePacket = bytes[5] & 0b00000001;\n        this._currentPosition -= 6;\n        this._remainingData += 6;\n        this._stats._totalBytesRead -= 6;\n        this._stats._currentBytesRemaining += 6;\n        break;\n      }\n      // not synced, rewind to the next offset to continue syncing\n      syncBytes.push(bytes[0]);\n\n      this._currentPosition -= 5;\n      this._stats._totalBytesRead -= 5;\n      this._stats._currentBytesRemaining += 5;\n    }\n\n    if (syncBytes.length) this._addStream(Uint8Array.from(syncBytes));\n\n    if (syncBytes.length > 65307) {\n      this._logError(\n        \"This stream is not an Ogg stream. No Ogg metadata will be returned.\",\n        \"See https://github.com/eshaz/icecast-metadata-js for information on Ogg metadata.\",\n      );\n      this._onMetadataFailed(\"ogg\");\n      return false;\n    }\n\n    const baseOggPage = yield* this._getNextValue(27);\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    const oggPageSegments = yield* this._getNextValue(baseOggPage[26]);\n\n    this._remainingData = oggPageSegments.reduce(\n      (acc, octet) => acc + octet,\n      0,\n    );\n    return true;\n  }\n\n  *_identifyCodec() {\n    const data = yield* this._getNextValue(8);\n\n    yield* this._getStream();\n\n    if (this._matchBytes(/\\x7fFLAC/, data.subarray(0, 5))) {\n      return { regex: /^[\\x84|\\x04]/, length: 4 };\n    } else if (this._matchBytes(/OpusHead/, data.subarray(0, 8))) {\n      return { regex: /OpusTags/, length: 8 };\n    } else if (this._matchBytes(/\\x01vorbis/, data.subarray(0, 7))) {\n      return { regex: /\\x03vorbis/, length: 7 };\n    }\n  }\n\n  *_getMetadata({ regex, length }) {\n    if (this._matchBytes(regex, yield* this._getNextValue(length))) {\n      yield* this._sendMetadata(yield* this._readVorbisComment());\n    }\n  }\n\n  *_getStream() {\n    while (this._remainingData) {\n      yield* this._getNextValue();\n    }\n  }\n\n  *_getNextValue(length) {\n    const value = yield* super._getNextValue(length);\n\n    this._addStream(value);\n    return value;\n  }\n\n  *_readData() {\n    const data = yield* super._readData();\n    this._stats.currentStreamBytesRemaining = data.length;\n    return data;\n  }\n\n  *_readVorbisComment() {\n    /*\n    1) [vendor_length] = read an unsigned integer of 32 bits\n    2) [vendor_string] = read a UTF-8 vector as [vendor_length] octets\n    3) [user_comment_list_length] = read an unsigned integer of 32 bits\n    4) iterate [user_comment_list_length] times {\n       5) [length] = read an unsigned integer of 32 bits\n       6) this iteration's user comment = read a UTF-8 vector as [length] octets\n    }\n    7) [framing_bit] = read a single bit as boolean\n    8) if ( [framing_bit] unset or end of packet ) then ERROR\n    9) done.\n    */\n    const vendorStringLength = this._getUint32(yield* this._getNextValue(4));\n    this._stats.addMetadataBytes(4);\n\n    const vendorString = this._decoder.decode(\n      yield* this._getNextValue(vendorStringLength),\n    );\n    this._stats.addMetadataBytes(vendorStringLength);\n\n    const commentListLength = this._getUint32(yield* this._getNextValue(4));\n    this._stats.addMetadataBytes(4);\n\n    const comments = [];\n    for (let i = 0; i < commentListLength; i++) {\n      const commentLength = yield* this._getNextValue(4);\n      this._stats.addMetadataBytes(4);\n\n      comments.push(yield* this._getNextValue(this._getUint32(commentLength)));\n      this._stats.addMetadataBytes(comments[comments.length - 1].length);\n    }\n\n    this._stats.currentMetadataBytesRemaining = 0;\n\n    return comments.reduce(\n      (metadata, comment) => {\n        const delimiter = comment.indexOf(0x3d);\n        // prettier-ignore\n        const key = String.fromCharCode(...comment.subarray(0, delimiter)).toUpperCase();\n        const val = this._decoder.decode(comment.subarray(delimiter + 1));\n\n        metadata[key] = metadata[key] ? `${metadata[key]}; ${val}` : val;\n        return metadata;\n      },\n      { VENDOR_STRING: vendorString },\n    );\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcyMetadataParser from \"./IcyMetadataParser.js\";\nimport OggMetadataParser from \"./OggMetadataParser.js\";\n\n/**\n * @description Parses ICY and Ogg metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\n\nexport default class DualMetadataParser {\n  constructor(params) {\n    const { onStream, ...rest } = params;\n    this._oggMetadataParser = new OggMetadataParser(params);\n    this._icyMetadataParser = new IcyMetadataParser(rest);\n  }\n\n  get icyMetaInt() {\n    return this._icyMetadataParser.icyMetaInt;\n  }\n\n  *iterator(chunk) {\n    for (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        yield* this._oggMetadataParser.iterator(value.stream);\n      } else {\n        yield value;\n      }\n    }\n  }\n\n  readAll(chunk) {\n    for (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        this._oggMetadataParser.readAll(value.stream);\n      }\n    }\n  }\n\n  async *asyncIterator(chunk) {\n    for await (const value of this._icyMetadataParser.asyncIterator(chunk)) {\n      if (value.stream) {\n        for await (const oggValue of this._oggMetadataParser.asyncIterator(\n          value.stream,\n        )) {\n          yield oggValue;\n        }\n      } else {\n        yield value;\n      }\n    }\n  }\n\n  async asyncReadAll(chunk) {\n    for await (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        await this._oggMetadataParser.asyncReadAll(value.stream);\n      }\n    }\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataParser from \"./MetadataParser/MetadataParser.js\";\nimport IcyMetadataParser from \"./MetadataParser/IcyMetadataParser.js\";\nimport OggMetadataParser from \"./MetadataParser/OggMetadataParser.js\";\nimport DualMetadataParser from \"./MetadataParser/DualMetadataParser.js\";\n\nexport default class IcecastMetadataReader {\n  /**\n   * @description Splits Icecast raw response into stream bytes and metadata key / value pairs.\n   * @param {number} IcecastMetadataReader.icyMetaInt Interval in bytes of metadata updates returned by the Icecast server\n   * @param {number} IcecastMetadataReader.icyCharacterEncoding Character encoding to use for ICY metadata (defaults to \"utf-8\")\n   * @param {number} IcecastMetadataReader.icyDetectionTimeout Duration in milliseconds to search for metadata if icyMetaInt isn't passed in\n   * @param {Array} IcecastMetadataReader.metadataTypes Types of metadata to capture: \"icy\" and/or \"ogg\"\n   *\n   * @callback onMetadata\n   * @param {object} value Object containing Metadata and Statistics\n   * @param {object} metadata Object containing the metadata received.\n   * @param {string} [metadata.StreamTitle] (ICY) Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] (ICY) Url (usually album art) of the metadata update.\n   * @param {string} [metadata.TITLE] (Ogg) Url Title of the metadata update.\n   * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n   *\n   * @callback onStream\n   * @param {object} value Object containing Stream data and Statistics\n   * @param {Uint8Array} stream Object containing the stream buffer.\n   * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n   *\n   * @callback onMetadataFailed Called when metadata detection has failed and no metadata will be returned\n   * @param {string} metadataType Metadata type that failed (\"icy\" or \"ogg\")\n   *\n   * @callback onError Called when an error is encountered\n   * @param {string} message Error message\n   */\n  constructor({ metadataTypes = [\"icy\"], ...rest } = {}) {\n    const hasIcy = metadataTypes.includes(\"icy\");\n    const hasOgg = metadataTypes.includes(\"ogg\");\n\n    if (hasIcy && hasOgg) this._metadataParser = new DualMetadataParser(rest);\n    else if (hasOgg) this._metadataParser = new OggMetadataParser(rest);\n    else if (hasIcy) this._metadataParser = new IcyMetadataParser(rest);\n    else this._metadataParser = new MetadataParser(rest);\n  }\n\n  /**\n   * @description Parses an already decoded ICY metadata string into key value pairs.\n   * @param {string} metadataString ICY formatted metadata string. (i.e. \"StreamTitle='A Title';\")\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  static parseIcyMetadata(string) {\n    return IcyMetadataParser.parseIcyMetadata(string);\n  }\n\n  /**\n   * @description Gets the ICY metadata interval for this instance.\n   * @returns {number} ICY metadata interval in bytes.\n   */\n  get icyMetaInt() {\n    return this._metadataParser.icyMetaInt;\n  }\n\n  /**\n   * @description Returns an iterator that yields stream or metadata.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {Iterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  *iterator(chunk) {\n    yield* this._metadataParser.iterator(chunk);\n  }\n\n  /**\n   * @description Reads all data in the passed in chunk and calls the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  readAll(chunk) {\n    this._metadataParser.readAll(chunk);\n  }\n\n  /**\n   * @description Returns an async iterator that yields stream or metadata and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  async *asyncIterator(chunk) {\n    return yield* this._metadataParser.asyncIterator(chunk);\n  }\n\n  /**\n   * @description Reads all data in the chunk and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  async asyncReadAll(chunk) {\n    return this._metadataParser.asyncReadAll(chunk);\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcecastMetadataReader from \"./IcecastMetadataReader.js\";\n\nconst noOp = () => {};\n\n/**\n * @description Browser ReadableStream wrapper for IcecastMetadataReader\n */\nexport default class IcecastReadableStream {\n  /**\n   * @param {ReadableStream} response ReadableStream for raw Icecast response data\n   * @param {object} options Configuration options for IcecastMetadataReader\n   * @see IcecastMetadataReader for information on the options parameter\n   */\n  constructor(response, { onStream = noOp, ...rest }) {\n    let icecast;\n\n    this._readableStream = new ReadableStream({\n      async start(controller) {\n        icecast = new IcecastMetadataReader({\n          icyMetaInt: parseInt(response.headers.get(\"Icy-MetaInt\")),\n          ...rest,\n          onStream: async (value) => {\n            controller.enqueue(value.stream);\n            return onStream(value);\n          },\n        });\n\n        for await (const chunk of IcecastReadableStream.asyncIterator(\n          response.body,\n        )) {\n          await icecast.asyncReadAll(chunk);\n        }\n\n        controller.close();\n      },\n    });\n\n    this._icecast = icecast;\n  }\n\n  /**\n   * @returns Icecast Metadata Interval if it is present on this stream\n   */\n  get icyMetaInt() {\n    return this._icecast.icyMetaInt;\n  }\n\n  /**\n   * @returns The ReadableStream instance\n   */\n  get readableStream() {\n    return this._readableStream;\n  }\n\n  /**\n   * @description Starts reading from the response and processing stream and metadata.\n   */\n  async startReading() {\n    try {\n      for await (const i of IcecastReadableStream.asyncIterator(\n        this._readableStream,\n      )) {\n      }\n    } catch (e) {\n      if (e.name !== \"AbortError\") throw e;\n    }\n  }\n\n  /**\n   * @description Wraps a ReadableStream as an Async Iterator.\n   * @param {ReadableStream} readableStream ReadableStream to convert to AsyncIterator\n   * @returns {Symbol.asyncIterator} Async Iterator that wraps the ReadableStream\n   */\n  static asyncIterator(readableStream) {\n    const reader = readableStream.getReader();\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => reader.read(),\n      }),\n    };\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst noOp = () => {};\n\nexport default class IcecastMetadataQueue {\n  /**\n   * @description Schedules updates up to the millisecond for Icecast Metadata from the response body of an Icecast stream mountpoint\n   * @description The accuracy of metadata updates is a direct relationship of the icyMetaInt\n   * @param {Object} IcecastMetadataQueue constructor parameter\n   * @param {number} [IcecastMetadataQueue.icyBr] Bitrate of audio stream used to increase accuracy when to updating metadata\n   * @param {onMetadataUpdate} [IcecastMetadataQueue.onMetadataUpdate] Callback executed when metadata is scheduled to update\n   * @param {onMetadataEnqueue} [IcecastMetadataQueue.onMetadataEnqueue] Callback executed when metadata is enqueued\n   * @param {boolean} [IcecastMetadataQueue.paused] Set to true to start the queue in a paused mode\n   *\n   * @callback onMetadataUpdate\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} timestampOffset Total time buffered when the metadata was added\n   * @param {number} timestamp Current time of the audio player when the metadata was added\n   *\n   * @callback onMetadataEnqueue\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} timestampOffset Total time buffered when the metadata was added\n   * @param {number} timestamp Current time of the audio player when the metadata was added\n   *\n   */\n  constructor({\n    icyBr,\n    onMetadataUpdate = noOp,\n    onMetadataEnqueue = noOp,\n    paused = false,\n  }) {\n    this._icyBr = icyBr;\n    this._onMetadataUpdate = onMetadataUpdate;\n    this._onMetadataEnqueue = onMetadataEnqueue;\n    this._initialPaused = paused;\n    this._paused = paused;\n    this._isInitialMetadata = true;\n    this._pendingMetadata = [];\n    this._metadataQueue = [];\n  }\n\n  /**\n   * @description Returns the metadata queued for updates\n   * @type {{metadata: string, time: number}[]} Queued metadata\n   */\n  get metadataQueue() {\n    return this._metadataQueue.map(({ _timeoutId, ...rest }) => rest);\n  }\n\n  /**\n   *\n   * @param {object} metadata Metadata object returned from IcecastMetadataReader\n   * @param {number} timestampOffset Total buffered audio in seconds\n   * @param {number} [timestamp] Current time in the audio player\n   */\n  addMetadata({ metadata, stats }, timestampOffset, timestamp = 0) {\n    /**\n     * Metadata time is derived from the total number of stream bytes read\n     * since the latest buffer input. The buffer offset should be the total\n     * seconds of audio in the player buffer when the metadata was read.\n     */\n    timestamp += stats ? this.getTimeByBytes(stats.currentStreamPosition) : 0;\n\n    const metadataPayload = {\n      metadata,\n      timestampOffset,\n      timestamp,\n    };\n\n    this._paused\n      ? this._pendingMetadata.push(metadataPayload)\n      : this._enqueueMetadata(metadataPayload);\n  }\n\n  /**\n   * @description Calculates audio stream length based on bitrate\n   * @param {number} bytesRead Number of bytes\n   * @type {number} Seconds\n   */\n  getTimeByBytes(bytesRead) {\n    return this._icyBr ? bytesRead / (this._icyBr * 125) : 0;\n  }\n\n  /**\n   * @description Starts the metadata queue if it was paused\n   * @param {number} [timestamp] Current time of the audio player\n   */\n  startQueue(timestamp) {\n    if (this._paused) {\n      this._pendingMetadata.forEach((u) => {\n        if (timestamp !== undefined) u.timestamp = timestamp;\n\n        // remove any metadata that has already elapsed\n        if (timestamp === undefined || u.timestampOffset >= u.timestamp)\n          this._enqueueMetadata(u);\n      });\n      this._pendingMetadata = [];\n      this._paused = false;\n    }\n  }\n\n  /**\n   * @description Clears all metadata updates and empties the queue\n   */\n  purgeMetadataQueue() {\n    this._metadataQueue.forEach((i) => clearTimeout(i._timeoutId));\n    this._metadataQueue = [];\n    this._pendingMetadata = [];\n    this._paused = this._initialPaused;\n    this._isInitialMetadata = true;\n  }\n\n  _enqueueMetadata(payload) {\n    this._metadataQueue.push(payload);\n\n    this._onMetadataEnqueue(\n      payload.metadata,\n      payload.timestampOffset,\n      payload.timestamp,\n    );\n\n    if (this._isInitialMetadata) {\n      this._dequeueMetadata();\n      this._isInitialMetadata = false;\n    } else {\n      payload._timeoutId = setTimeout(\n        () => {\n          this._dequeueMetadata();\n        },\n        (payload.timestampOffset - payload.timestamp) * 1000,\n      ); // trigger timeout relative to play position\n    }\n  }\n\n  _dequeueMetadata() {\n    // purging the queue is an async operation, some timeouts may still be queued in the event loop _after_ the purge call has happened\n    if (this._metadataQueue.length) {\n      const { metadata, timestampOffset, timestamp } =\n        this._metadataQueue.shift();\n      this._onMetadataUpdate(metadata, timestampOffset, timestamp);\n    }\n  }\n}\n","import {\n  audioContext,\n  concatBuffers,\n  event,\n  state,\n  fireEvent,\n  SYNCED,\n  PCM_SYNCED,\n  SYNCING,\n  NOT_SYNCED,\n  noOp,\n} from \"./global.js\";\n\n// test if worker can spawn a worker for (i.e. everything but iOS)\nlet canSpawnWorker;\nconst spawnWorkerTest = new Worker(\n  URL.createObjectURL(\n    new Blob([\"self.onmessage = () => self.postMessage(!!self.Worker)\"], {\n      type: \"text/javascript\",\n    }),\n  ),\n);\nspawnWorkerTest.onmessage = (r) => {\n  canSpawnWorker = r.data;\n  spawnWorkerTest.terminate();\n};\nspawnWorkerTest.postMessage(null);\n\nexport default class FrameQueue {\n  constructor(icecast, player) {\n    this.CRC_DURATION = 300000; // milliseconds to cache for crc syncing\n    this.PCM_DURATION = 60000; // milliseconds to cache for pcm syncing\n\n    this._icecast = icecast;\n    this._player = player;\n\n    this.initSync();\n    this.initQueue();\n  }\n\n  initSync() {\n    clearTimeout(this._syncTimeout);\n    this._syncTimeout = null;\n    this._syncTimeoutReason = null;\n    this._crcSyncPending = true;\n\n    this._syncQueue = [];\n    this._syncQueueDuration = 0;\n\n    this._synAudioResult = null;\n    this._a = null;\n    this._b = null;\n  }\n\n  initQueue() {\n    this._queueIndex = 0;\n    this._queueSamples = 0;\n    this._queueSampleRate = 0;\n\n    this._crcQueue = [];\n    this._crcQueueDuration = 0;\n    this._crcQueueIndexes = {};\n\n    this._pcmQueue = [];\n    this._pcmQueueDuration = 0;\n  }\n\n  get buffered() {\n    return (\n      this._queueSamples / this._queueSampleRate - this._player.currentTime || 0\n    );\n  }\n\n  add(frame) {\n    // crc queue\n    const { crc32, duration, samples } = frame;\n    this._queueSamples += samples;\n    this._queueSampleRate = frame.header.sampleRate;\n\n    this._crcQueue.push({ crc32, duration });\n    this._crcQueueDuration += duration;\n\n    // update queue index\n    let indexes = this._crcQueueIndexes[crc32];\n    if (!indexes) {\n      indexes = [];\n      this._crcQueueIndexes[crc32] = indexes;\n    }\n    indexes.push(this._queueIndex++);\n\n    if (this._crcQueueDuration >= this.CRC_DURATION) {\n      const { crc32, duration } = this._crcQueue.shift();\n      this._crcQueueDuration -= duration;\n\n      // remove the oldest index\n      const indexes = this._crcQueueIndexes[crc32];\n      indexes.shift();\n      // remove the key if there are no indexes left\n      if (!indexes.length) delete this._crcQueueIndexes[crc32];\n    }\n\n    // pcm queue\n    this._pcmQueue.push(frame);\n    this._pcmQueueDuration += duration;\n\n    if (this._pcmQueueDuration >= this.PCM_DURATION) {\n      this._pcmQueueDuration -= this._pcmQueue.shift().duration;\n    }\n  }\n\n  addAll(frames) {\n    frames.forEach((frame) => this.add(frame));\n  }\n\n  _addAllSyncQueue(frames) {\n    for (const frame of frames) {\n      this._syncQueueDuration += frame.duration;\n      this._syncQueue.push(frame);\n    }\n  }\n\n  /**\n   *\n   * @param {Array<CodecFrame|OggPage>} frames\n   */\n  async sync(frames) {\n    // stop syncing if the buffer runs out\n    if (this._syncTimeout === null) {\n      const currentBuffered = this.buffered;\n\n      this._syncReject = noOp;\n      this._syncTimeout = setTimeout(() => {\n        this._syncTimeoutReason = `Buffer underrun after syncing for ${currentBuffered.toFixed(\n          2,\n        )} seconds.`;\n        this._syncReject(this._syncTimeoutReason);\n      }, currentBuffered * 1000);\n    }\n\n    this._addAllSyncQueue(frames);\n\n    return new Promise(async (resolve, reject) => {\n      if (this._syncTimeoutReason !== null) reject(this._syncTimeoutReason);\n      else this._syncReject = reject;\n\n      let syncState;\n      // try syncing using crc32 hashes (if the stream data matches exactly)\n      if (this._crcSyncPending) syncState = this._crcSync();\n\n      // try syncing using decoded audio and corelation (if audio data matches)\n      if (!syncState) {\n        this._crcSyncPending = false;\n        syncState = await this._pcmSync();\n      }\n\n      // streams do not match (not synced)\n      if (!syncState) reject(\"Old and new request do not match.\");\n      else resolve(syncState);\n    })\n      .catch((e) => {\n        if (\n          this._icecast.state !== state.STOPPING &&\n          this._icecast.state !== state.STOPPED\n        )\n          this._icecast[fireEvent](\n            event.WARN,\n            `Reconnected successfully after ${this._icecast.state}.`,\n            \"Unable to sync old and new request.\",\n            e,\n          );\n\n        const syncQueue = this._syncQueue;\n        this.initSync();\n        this.initQueue();\n        return [syncQueue, NOT_SYNCED];\n      })\n      .then((syncState) => {\n        if ([SYNCED, PCM_SYNCED].includes(syncState[1])) {\n          this.initSync();\n        }\n\n        return syncState;\n      });\n  }\n\n  /*\n  Aligns the queue with a new incoming data by aligning the crc32 hashes \n  and then returning only the frames that do not existing on the queue.\n  \n                   old data | common data  | new data\n  (old connection) ------------------------|\n  (new connection)          |------------------>\n                             ^^^^^^^^^^^^^^ ^^^^\n                              (sync)         (frames to return)\n  */\n  _crcSync() {\n    // get all indexed matches for crc and check\n    if (!this._syncQueue.length) return [[], SYNCING];\n\n    const syncQueueStartIndex = 0;\n    const syncQueueCrc = this._syncQueue[syncQueueStartIndex].crc32;\n    const crcSyncPoints = this._crcQueueIndexes[syncQueueCrc];\n\n    let matched, outOfFrames, syncPoint;\n\n    if (crcSyncPoints) {\n      align_queues: for (const absoluteSyncPoint of crcSyncPoints) {\n        syncPoint =\n          absoluteSyncPoint - (this._queueIndex - this._crcQueue.length);\n\n        for (\n          let i = syncQueueStartIndex;\n          i < this._syncQueue.length && syncPoint + i < this._crcQueue.length;\n          i++\n        )\n          if (this._crcQueue[syncPoint + i].crc32 !== this._syncQueue[i].crc32)\n            continue align_queues; // failed to match\n\n        outOfFrames =\n          syncPoint + this._syncQueue.length <= this._crcQueue.length;\n        matched = true;\n        break; // full match\n      }\n\n      // have some overlapping frames, but none are new frames\n      if (outOfFrames) return [[], SYNCING];\n\n      if (matched) {\n        const sliceIndex = this._crcQueue.length - syncPoint;\n        // prettier-ignore\n        this._icecast[fireEvent](\n          event.WARN,\n          `Reconnected successfully after ${this._icecast.state}.`,\n          `Found ${sliceIndex} frames (${(this._crcQueue\n            .slice(syncPoint)\n            .reduce((acc, { duration }) => acc + duration, 0) / 1000).toFixed(3)} seconds) of overlapping audio data in new request.`,\n          \"Synchronized old and new request.\"\n        );\n\n        return [this._syncQueue.slice(sliceIndex), SYNCED];\n      }\n    }\n  }\n\n  /*\n  Syncs the old and new data using correlation between decoded audio.\n  A new player will be constructed after this sync is completed.\n\n                           old data  | common data | new data\n    \n    (time scale)     -2 -1 0 +1 +2\n    (old connection)  -----------------------------|\n                      ^^^^^|^^^^^^^^^|             |\n                           |         sampleOffsetFromEnd    buffered (metadataTimestamp)\n  \n    (time scale)               -2 -1 0 +1 +2\n    (new connection)                 |-----------|--->\n                             |       ^^^^^^^^^^^^|^^^^\n                             delay               syncLength\n  */\n  async _pcmSync() {\n    try {\n      const correlationSyncLength = 1; // seconds\n      const initialGranularity = 16;\n\n      const samplesToDuration = (samples, rate) => samples / rate;\n\n      if (!this._synAudioResult) {\n        let SynAudio;\n        try {\n          SynAudio = (\n            await import(\n              /* webpackChunkName: \"synaudio\", webpackPrefetch: true */\n              \"synaudio\"\n            )\n          ).default;\n        } catch (e) {\n          this._icecast[fireEvent](\n            event.WARN,\n            \"Failed to synchronize old and new stream\",\n            \"Missing `synaudio` dependency.\",\n          );\n\n          return;\n        }\n\n        const [pcmQueueDecoded, syncQueueDecoded, sampleRate] =\n          await this._decodeQueues();\n\n        const correlationSampleSize = sampleRate * correlationSyncLength;\n\n        // more data is needed to meet the correlationSampleSize\n        if (syncQueueDecoded.samplesDecoded <= correlationSampleSize)\n          return [[], SYNCING];\n\n        const synAudio = new SynAudio({\n          correlationSampleSize,\n          initialGranularity,\n        });\n\n        this._synAudioResult = await (canSpawnWorker\n          ? synAudio.syncWorkerConcurrent(\n              pcmQueueDecoded,\n              syncQueueDecoded,\n              Math.max(navigator.hardwareConcurrency - 1, 1),\n            )\n          : synAudio.syncWorker(pcmQueueDecoded, syncQueueDecoded));\n\n        this._synAudioResult.offsetFromEnd = samplesToDuration(\n          pcmQueueDecoded.samplesDecoded - this._synAudioResult.sampleOffset,\n          sampleRate,\n        ); // total queue samples decoded - sample offset (sampleOffset from end of buffer)\n      }\n\n      // anything lower than .5 is likely not synced, but it might sound better than some random sync point\n      const { correlation, offsetFromEnd } = this._synAudioResult;\n\n      let delay = (this.buffered - offsetFromEnd) * 1000; // if negative, sync is before playback position, positive, sync after playback position\n\n      // more frames need to be cut than exist on the sync queue\n      if (-delay > this._syncQueueDuration) return [[], SYNCING];\n\n      const frameOverlap = 0;\n      if (delay < 0) {\n        // slice the sync frame with 'n' frame overlap and start immediately\n        let sliceIndex = 0;\n        for (\n          let t = 0;\n          sliceIndex < this._syncQueue.length - frameOverlap && t > delay;\n          sliceIndex++\n        )\n          t -= this._syncQueue[sliceIndex].duration;\n\n        this._syncQueue = this._syncQueue.slice(sliceIndex - frameOverlap);\n      } else {\n        // delay start with 'n' frame overlap\n        for (let i = 0; i < frameOverlap && i < this._syncQueue.length; i++)\n          delay -= this._syncQueue[i].duration;\n      }\n\n      // prettier-ignore\n      this._icecast[fireEvent](\n        event.WARN,\n        `Reconnected successfully after ${this._icecast.state}.`,\n        `Synchronized old and new request with ${(Math.round(correlation * 10000) / 100).toFixed(2)}% confidence.`\n      );\n\n      this.initQueue();\n      return [this._syncQueue, PCM_SYNCED, delay];\n    } catch {}\n  }\n\n  async _decodeQueues() {\n    const decode = (queue, timeFromEnd) => {\n      let sliceIndex = queue.length - 1;\n\n      for (\n        let duration = 0;\n        duration < timeFromEnd && sliceIndex > 0;\n        sliceIndex--\n      )\n        duration += queue[sliceIndex].duration;\n\n      return this._icecast[audioContext].decodeAudioData(\n        concatBuffers(queue.slice(sliceIndex).map(({ data }) => data)).buffer,\n      );\n    };\n\n    [this._a, this._b] = await Promise.all([\n      // decode the pcm queue only once, decode only up to twice the amount of buffered audio\n      this._a ? this._a : decode(this._pcmQueue, this.buffered * 2000),\n      decode(this._syncQueue, Infinity),\n    ]);\n\n    const getDecodedAudio = (decodedAudioData) => {\n      const decoded = {\n        channelData: [],\n        samplesDecoded: decodedAudioData.length,\n      };\n\n      for (let i = 0; i < decodedAudioData.numberOfChannels; i++)\n        decoded.channelData.push(\n          Float32Array.from(decodedAudioData.getChannelData(i)),\n        );\n\n      return decoded;\n    };\n\n    return [\n      getDecodedAudio(this._a),\n      getDecodedAudio(this._b),\n      this._a.sampleRate,\n    ];\n  }\n}\n","import {\n  p,\n  event,\n  state,\n  audioElement,\n  bufferLength,\n  SYNCED,\n  NOT_SYNCED,\n} from \"../global.js\";\nimport FrameQueue from \"../FrameQueue.js\";\n\nexport default class Player {\n  constructor(icecast, endpoint, inputMimeType, codec, codecHeader) {\n    this._icecast = icecast;\n    this._endpoint = endpoint;\n    this._inputMimeType = inputMimeType;\n    this._codec = codec;\n    this._codecHeader = codecHeader;\n\n    const instanceVariables = p.get(this._icecast);\n\n    this._audioElement = instanceVariables[audioElement];\n    this._bufferLength = instanceVariables[bufferLength];\n\n    this._codecUpdateTimestamp = 0;\n    this._codecUpdateOffset = 0;\n\n    this._notSyncedHandler = () => {\n      this.syncState = NOT_SYNCED;\n    };\n  }\n\n  static parseMimeType(mimeType) {\n    return mimeType.match(\n      /^(?:application\\/|audio\\/|)(?<mime>[a-zA-Z]+)(?:$|;[ ]*codecs=(?:\\'|\\\")(?<codecs>[a-zA-Z,]+)(?:\\'|\\\"))/,\n    );\n  }\n\n  static canPlayType(codecChecker, mimeType, mapping) {\n    const matches = Player.parseMimeType(mimeType);\n\n    const checkCodecs = (codecs) =>\n      codecs.reduce((acc, codec) => {\n        if (acc === \"\") return \"\";\n\n        const result = codecChecker(codec);\n\n        if (!result) return \"\";\n        if (result === \"maybe\" || acc === \"maybe\") return \"maybe\";\n        if (result === true || result === \"probably\") return \"probably\";\n      }, null);\n\n    if (matches) {\n      const { mime, codecs } = matches.groups;\n\n      const mimeMapping = mapping && mapping[mime];\n\n      // mapping is a raw codec\n      if (!mimeMapping || Array.isArray(mimeMapping)) {\n        return (\n          checkCodecs(mimeMapping || [mimeType]) || // check with the codec\n          checkCodecs([`audio/${mime}`]) // check as a raw mimetype\n        );\n      }\n\n      // mapping ia a container\n      if (typeof mimeMapping === \"object\") {\n        if (codecs) {\n          const mimeCodecs = codecs.split(\",\");\n\n          // multiple codecs are not supported\n          if (mimeCodecs.length > 1) return \"\";\n          if (!mimeMapping[mimeCodecs[0]]) return \"\";\n\n          return checkCodecs(mimeMapping[mimeCodecs[0]]);\n        }\n        // container exists in list but no codecs were specified\n        return \"maybe\";\n      }\n    }\n\n    // codec not in the list\n    return \"\";\n  }\n\n  enablePlayButton(supportedSources) {\n    // set the audio element an empty source to enable the play button\n    this._audioElement.removeAttribute(\"src\");\n    this._audioElement.srcObject = null;\n\n    if (supportedSources.includes(\"mediasource\")) {\n      // MediaSourcePlayer\n      this._audioElement.src = URL.createObjectURL(new MediaSource());\n    } else if (supportedSources.includes(\"webaudio\")) {\n      this._mediaStream = new MediaStream();\n      this._audioElement.srcObject = this._mediaStream;\n    } else if (supportedSources.includes(\"html5\")) {\n      // HTML5Player\n      // mp3 32kbs silence\n      this._audioElement.src =\n        \"data:audio/mpeg;base64,//sQxAAABFgC/SCEYACCgB9AAAAAppppVCAHBAEIgBByw9WD5+J8ufwxiDED\" +\n        \"sMfE+D4fwG/RUGCx6VO4awVxV3qDtQNPiXKnZUNSwKuUDR6IgaeoGg7Fg6pMQU1FMy4xMDCqqqqqqqr/+xL\" +\n        \"EB4PAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\" +\n        \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=\";\n\n      this._audioElement.loop = true;\n    }\n  }\n\n  get syncStateUpdate() {\n    return this._syncStatePromise;\n  }\n\n  get syncState() {\n    return this._syncState;\n  }\n\n  set syncState(newState) {\n    this._syncState = newState;\n\n    if (this._syncStateResolve) this._syncStateResolve(newState);\n\n    this._syncStatePromise = new Promise((resolve) => {\n      this._syncStateResolve = resolve;\n    });\n  }\n\n  /**\n   * @abstract\n   */\n  get isSupported() {\n    return false;\n  }\n\n  /**\n   * @abstract\n   */\n  get isAudioPlayer() {\n    return false;\n  }\n\n  /**\n   * @interface\n   */\n  get metadataTimestamp() {\n    return 0;\n  }\n\n  /**\n   * @interface\n   */\n  get currentTime() {\n    return 0;\n  }\n\n  get waiting() {\n    return Promise.resolve();\n  }\n\n  get icecastMetadataQueue() {\n    return this._icecastMetadataQueue;\n  }\n\n  set icecastMetadataQueue(icecastMetadataQueue) {\n    this._icecastMetadataQueue = icecastMetadataQueue;\n  }\n\n  get codecUpdateQueue() {\n    return this._codecUpdateQueue;\n  }\n\n  set codecUpdateQueue(codecUpdateQueue) {\n    this._codecUpdateQueue = codecUpdateQueue;\n  }\n\n  get metadataQueue() {\n    return this._icecastMetadataQueue\n      ? this._icecastMetadataQueue.metadataQueue\n      : [];\n  }\n\n  _startMetadataQueues() {\n    this._icecastMetadataQueue.startQueue(this._metadataOffset);\n    this._codecUpdateQueue.startQueue(this._metadataOffset);\n  }\n\n  /**\n   * @abstract\n   */\n  async _init() {\n    this.syncState = SYNCED;\n    this.syncFrames = [];\n    this.syncDelay = null;\n    this._frameQueue = new FrameQueue(this._icecast, this);\n  }\n\n  /**\n   * @abstract\n   */\n  async start(metadataOffset) {\n    this._metadataOffset = metadataOffset;\n\n    [event.RETRY, event.SWITCH].forEach((e) =>\n      this._icecast.addEventListener(e, this._notSyncedHandler),\n    );\n\n    let resolve;\n    const playing = new Promise((r) => {\n      resolve = r;\n      [state.PLAYING, state.STOPPING].forEach((s) =>\n        this._icecast.addEventListener(s, resolve, { once: true }),\n      );\n    }).finally(() => {\n      [state.PLAYING, state.STOPPING].forEach((s) =>\n        this._icecast.removeEventListener(s, resolve),\n      );\n    });\n\n    await playing;\n  }\n\n  /**\n   * @abstract\n   */\n  async end() {\n    [event.RETRY, event.SWITCH].forEach((e) =>\n      this._icecast.removeEventListener(e, this._notSyncedHandler),\n    );\n\n    this._icecastMetadataQueue.purgeMetadataQueue();\n    this._codecUpdateQueue.purgeMetadataQueue();\n  }\n\n  /**\n   * @abstract\n   */\n  onStream(frames) {\n    return frames;\n  }\n\n  /**\n   * @abstract\n   */\n  onMetadata(metadata) {\n    this._icecastMetadataQueue.addMetadata(\n      metadata,\n      this.metadataTimestamp,\n      this.currentTime,\n    );\n  }\n\n  /**\n   * @abstract\n   */\n  onCodecUpdate(metadata, updateTimestamp) {\n    const currentTime = this.currentTime;\n\n    // add previous offset when reconnecting\n    if (updateTimestamp < currentTime)\n      this._codecUpdateOffset += this._codecUpdateTimestamp;\n\n    this._codecUpdateTimestamp = updateTimestamp;\n\n    this._codecUpdateQueue.addMetadata(\n      { metadata },\n      (updateTimestamp + this._codecUpdateOffset) / 1000,\n      currentTime,\n    );\n  }\n}\n","import { state, event, fireEvent, NOT_SYNCED } from \"../global.js\";\nimport Player from \"./Player.js\";\n\nexport default class HTML5Player extends Player {\n  constructor(icecast, endpoint) {\n    super(icecast, endpoint);\n\n    this._audioElement.crossOrigin = \"anonymous\";\n    this._audioElement.loop = false;\n    this._audioElement.preload = \"none\";\n\n    this._icecast.addEventListener(event.STREAM_START, () => {\n      if (!this._playReady) this.end();\n    });\n\n    this._init();\n  }\n\n  static canPlayType(mimeType) {\n    if (!HTML5Player.isSupported) return \"\";\n\n    return super.canPlayType((type) => new Audio().canPlayType(type), mimeType);\n  }\n\n  static get isSupported() {\n    return Boolean(window.Audio);\n  }\n\n  static get name() {\n    return \"html5\";\n  }\n\n  get isAudioPlayer() {\n    return true;\n  }\n\n  get metadataTimestamp() {\n    return this._frame\n      ? (this._frame.totalDuration + this._metadataTimestampOffset) / 1000\n      : 0;\n  }\n\n  get currentTime() {\n    return (\n      this._audioLoadedTimestamp &&\n      (performance.now() - this._audioLoadedTimestamp) / 1000\n    );\n  }\n\n  get waiting() {\n    return new Promise((resolve) => {\n      this._audioElement.addEventListener(\"waiting\", resolve, { once: true });\n    });\n  }\n\n  async _init() {\n    super._init();\n\n    this._frame = null;\n    this._audioLoadedTimestamp = 0;\n    this._metadataTimestampOffset = 0;\n    this._playReady = false;\n  }\n\n  async start(metadataOffset) {\n    const playing = super.start(metadataOffset);\n\n    this._metadataLoadedTimestamp = performance.now();\n    this._audioElement.src = null;\n    this._audioElement.srcObject = null;\n    this._audioElement.src = this._endpoint;\n\n    if (\n      this._icecast.state !== state.STOPPING &&\n      this._icecast.state !== state.STOPPED\n    ) {\n      this._audioElement.addEventListener(\n        \"playing\",\n        () => {\n          this._audioLoadedTimestamp = performance.now();\n          this._metadataTimestampOffset =\n            performance.now() - this._metadataLoadedTimestamp;\n\n          this._startMetadataQueues();\n          this._icecast[fireEvent](event.PLAY);\n        },\n        { once: true },\n      );\n\n      this._icecast[fireEvent](event.PLAY_READY);\n      this._playReady = true;\n    }\n\n    await playing;\n  }\n\n  async end() {\n    super.end();\n\n    this._audioElement.src = null;\n    this._audioElement.srcObject = null;\n\n    this._init();\n  }\n\n  onStream(frames) {\n    this._frame = frames[frames.length - 1] || this._frame;\n\n    if (this.syncState === NOT_SYNCED) {\n      // syncing not implemented in html5 playback method\n      this.syncState = NOT_SYNCED;\n    }\n  }\n}\n","import {\n  state,\n  event,\n  fireEvent,\n  concatBuffers,\n  SYNCED,\n  PCM_SYNCED,\n  SYNCING,\n  NOT_SYNCED,\n} from \"../global.js\";\nimport Player from \"./Player.js\";\n\nconst BUFFER = 5; // seconds of audio to store in SourceBuffer\nconst BUFFER_INTERVAL = 5; // seconds before removing from SourceBuffer\n\nexport default class MediaSourcePlayer extends Player {\n  constructor(icecast, endpoint, inputMimeType, codec, codecHeader) {\n    super(icecast, endpoint, inputMimeType, codec, codecHeader);\n\n    this._MSEAudioWrapper = import(\n      /* webpackChunkName: \"mediasource\", webpackPrefetch: true */\n      \"mse-audio-wrapper\"\n    );\n\n    this._init();\n  }\n\n  static canPlayType(mimeType) {\n    const mapping = {\n      mpeg: ['audio/mp4;codecs=\"mp3\"'],\n      aac: ['audio/mp4;codecs=\"mp4a.40.2\"'],\n      aacp: ['audio/mp4;codecs=\"mp4a.40.2\"'],\n      flac: ['audio/mp4;codecs=\"flac\"'],\n      ogg: {\n        flac: ['audio/mp4;codecs=\"flac\"'],\n        opus: ['audio/mp4;codecs=\"opus\"', 'audio/webm;codecs=\"opus\"'],\n        vorbis: ['audio/webm;codecs=\"vorbis\"'],\n      },\n    };\n\n    if (!MediaSourcePlayer.isSupported) return \"\";\n\n    if (MediaSource.isTypeSupported(mimeType)) return \"probably\";\n\n    return super.canPlayType(MediaSource.isTypeSupported, mimeType, mapping);\n  }\n\n  static get isSupported() {\n    return Boolean(window.MediaSource);\n  }\n\n  static get name() {\n    return \"mediasource\";\n  }\n\n  get isAudioPlayer() {\n    return true;\n  }\n\n  get metadataTimestamp() {\n    return (\n      (this._mediaSource &&\n        this._mediaSource.sourceBuffers.length &&\n        Math.max(\n          // work-around for WEBM reporting a negative timestampOffset\n          this._mediaSource.sourceBuffers[0].timestampOffset,\n          this._mediaSource.sourceBuffers[0].buffered.length\n            ? this._mediaSource.sourceBuffers[0].buffered.end(0)\n            : 0,\n        )) ||\n      0\n    );\n  }\n\n  get currentTime() {\n    return this._audioElement.currentTime;\n  }\n\n  get waiting() {\n    return new Promise((resolve) => {\n      this._audioElement.addEventListener(\"waiting\", resolve, { once: true });\n    });\n  }\n\n  async _init() {\n    super._init();\n\n    this._sourceBufferQueue = [];\n    this._playReady = false;\n    this._processingLastPage = false;\n\n    this._mediaSourceCreated = new Promise((resolve) => {\n      this._mediaSourceCreatedNotify = resolve;\n    });\n\n    this._mediaSourceOpen = new Promise((resolve) => {\n      this._mediaSourceOpenNotify = resolve;\n    });\n\n    this._addFrames = this._prepareMediaSource(\n      this._inputMimeType,\n      this._codec,\n    );\n\n    await this._mediaSourceOpen;\n  }\n\n  async start(metadataOffset) {\n    const playing = super.start(metadataOffset);\n    await this._mediaSourceCreated;\n    await this._attachMediaSource();\n    await playing;\n  }\n\n  async end() {\n    super.end();\n\n    await this._init();\n  }\n\n  async onStream(frames) {\n    frames = frames.flatMap((frame) =>\n      frame.codecFrames\n        ? frame.codecFrames.map((codecFrame) => {\n            codecFrame.isLastPage = frame.isLastPage;\n            return codecFrame;\n          })\n        : frame,\n    );\n\n    if (frames.length) {\n      switch (this.syncState) {\n        case NOT_SYNCED:\n          this._frameQueue.initSync();\n          this.syncState = SYNCING;\n        case SYNCING:\n          [this.syncFrames, this.syncState, this.syncDelay] =\n            await this._frameQueue.sync(frames);\n          frames = this.syncFrames;\n      }\n\n      switch (this.syncState) {\n        case PCM_SYNCED:\n          break;\n        case SYNCED:\n          // when frames are present, we should already know the codec and have the mse audio mimetype determined\n          await this._mediaSourceOpen;\n          await this._addFrames(frames); // wait for the source buffer to be created\n\n          this._frameQueue.addAll(frames);\n          break;\n      }\n    }\n  }\n\n  _prepareMediaSource(inputMimeType, codec) {\n    if (MediaSource.isTypeSupported(inputMimeType)) {\n      // pass the audio directly to MSE\n      this._createMediaSource(inputMimeType);\n\n      return async (frames) =>\n        this._appendSourceBuffer(concatBuffers(frames.map((f) => f.data)));\n    }\n\n    this._codecHeader\n      .then((codecHeader) =>\n        this._createMSEWrapper(inputMimeType, codec, codecHeader.channels),\n      )\n      .then(() => {\n        this._createMediaSource(this._wrapper.mimeType);\n      });\n\n    return inputMimeType.match(/ogg/)\n      ? async (codecFrames) => {\n          let fragments = [];\n\n          for await (const frame of codecFrames) {\n            // handle new setup packet for continuous chain ogg vorbis streams\n            if (this._processingLastPage !== frame.isLastPage) {\n              if (frame.isLastPage) {\n                this._processingLastPage = true;\n              } else {\n                await this._appendSourceBuffer(concatBuffers(fragments));\n                fragments = [];\n\n                const codecHeader = await this._codecHeader;\n                await this._createMSEWrapper(\n                  inputMimeType,\n                  codec,\n                  codecHeader.channels,\n                );\n\n                this._processingLastPage = false;\n              }\n            }\n\n            fragments.push(...this._wrapper.iterator([frame]));\n          }\n\n          await this._appendSourceBuffer(concatBuffers(fragments));\n        }\n      : async (codecFrames) =>\n          this._appendSourceBuffer(\n            concatBuffers([...this._wrapper.iterator(codecFrames)]),\n          );\n  }\n\n  async _createMSEWrapper(inputMimeType, codec, channels) {\n    // wrap the audio into fragments before passing to MSE\n    this._wrapper = new (await this._MSEAudioWrapper).default(inputMimeType, {\n      codec,\n      preferredContainer: channels > 2 ? \"webm\" : \"fmp4\",\n    });\n\n    if (!MediaSource.isTypeSupported(this._wrapper.mimeType)) {\n      this._icecast[fireEvent](\n        event.PLAYBACK_ERROR,\n        `Media Source Extensions API in your browser does not support ${inputMimeType} or ${this._wrapper.mimeType}.` +\n          \"See: https://caniuse.com/mediasource and https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API\",\n      );\n    }\n  }\n\n  _createMediaSource(mimeType) {\n    this._mediaSource = new MediaSource();\n    this._mediaSourceCreatedNotify();\n\n    this._mediaSource.addEventListener(\n      \"sourceopen\",\n      () => {\n        if (\n          this._icecast.state !== state.STOPPED &&\n          this._icecast.state !== state.STOPPING\n        )\n          this._mediaSource.addSourceBuffer(mimeType).mode = \"sequence\";\n        this._sourceBufferRemoved = 0;\n        this._mediaSourceOpenNotify();\n      },\n      {\n        once: true,\n      },\n    );\n  }\n\n  async _attachMediaSource() {\n    this._audioElement.loop = false;\n    this._audioElement.src = URL.createObjectURL(this._mediaSource);\n    await this._mediaSourceOpen;\n  }\n\n  async _waitForSourceBuffer() {\n    return new Promise((resolve) => {\n      const sourceBuffer = this._mediaSource.sourceBuffers[0];\n\n      if (!sourceBuffer.updating) {\n        resolve();\n      } else {\n        sourceBuffer.addEventListener(\"updateend\", resolve, {\n          once: true,\n        });\n      }\n    });\n  }\n\n  async _appendSourceBuffer(chunk) {\n    this._icecast[fireEvent](event.STREAM, chunk);\n\n    if (!this._mediaSource.sourceBuffers.length) {\n      this._icecast[fireEvent](\n        event.WARN,\n        \"Attempting to append audio, but MediaSource has not been or is no longer initialized\",\n        \"Please be sure that `detachAudioElement()` was called and awaited before reusing the element with a new IcecastMetadataPlayer instance\",\n      );\n    }\n\n    if (\n      this._icecast.state !== state.STOPPING &&\n      this._mediaSource.sourceBuffers.length\n    ) {\n      this._sourceBufferQueue.push(chunk);\n\n      try {\n        while (this._sourceBufferQueue.length) {\n          this._mediaSource.sourceBuffers[0].appendBuffer(\n            this._sourceBufferQueue.shift(),\n          );\n          await this._waitForSourceBuffer();\n        }\n      } catch (e) {\n        if (e.name !== \"QuotaExceededError\") throw e;\n      }\n\n      if (!this._playReady) {\n        if (this._bufferLength <= this.metadataTimestamp) {\n          this._audioElement.addEventListener(\n            \"playing\",\n            () => {\n              this._startMetadataQueues();\n              this._icecast[fireEvent](event.PLAY);\n            },\n            { once: true },\n          );\n          this._icecast[fireEvent](event.PLAY_READY);\n          this._playReady = true;\n        } else {\n          this._icecast[fireEvent](event.BUFFER, this.metadataTimestamp);\n        }\n      }\n\n      if (\n        this._audioElement.currentTime > BUFFER + this._bufferLength &&\n        this._sourceBufferRemoved + BUFFER_INTERVAL * 1000 < performance.now()\n      ) {\n        this._sourceBufferRemoved = performance.now();\n        this._mediaSource.sourceBuffers[0].remove(\n          0,\n          this._audioElement.currentTime - BUFFER + this._bufferLength,\n        );\n        await this._waitForSourceBuffer();\n      }\n    }\n  }\n}\n","import {\n  audioContext,\n  event,\n  state,\n  SYNCED,\n  PCM_SYNCED,\n  SYNCING,\n  NOT_SYNCED,\n  fireEvent,\n} from \"../global.js\";\nimport Player from \"./Player.js\";\n\nexport default class WebAudioPlayer extends Player {\n  constructor(icecast, endpoint, inputMimeType, codec, codecHeader) {\n    super(icecast, endpoint, inputMimeType, codec, codecHeader);\n\n    this._audioContext = icecast[audioContext];\n\n    this._init();\n  }\n\n  static canPlayType(mimeType) {\n    const mapping = {\n      flac: [\"audio/flac\"],\n      mpeg: [\"audio/mpeg\"],\n      ogg: {\n        flac: ['audio/ogg;codecs=\"flac\"'],\n        opus: ['audio/ogg;codecs=\"opus\"'],\n        vorbis: ['audio/ogg;codecs=\"vorbis\"'],\n      },\n    };\n\n    if (!WebAudioPlayer.isSupported) return \"\";\n\n    return super.canPlayType(\n      (codec) =>\n        codec === 'audio/ogg;codecs=\"opus\"' ||\n        codec === 'audio/ogg;codecs=\"flac\"' ||\n        codec === 'audio/ogg;codecs=\"vorbis\"' ||\n        codec === \"audio/mpeg\" ||\n        codec === \"audio/flac\",\n      mimeType,\n      mapping,\n    );\n  }\n\n  static get isSupported() {\n    return Boolean(\n      window.WebAssembly &&\n        (window.AudioContext || window.webkitAudioContext) &&\n        window.MediaStream,\n    );\n  }\n\n  static get name() {\n    return \"webaudio\";\n  }\n\n  get isAudioPlayer() {\n    return true;\n  }\n\n  get metadataTimestamp() {\n    return this._currentTime / 1000;\n  }\n\n  get currentTime() {\n    return (performance.now() - this._playbackStartTime) / 1000 || 0;\n  }\n\n  get waiting() {\n    return this._waitingPromise;\n  }\n\n  _updateWaiting(duration) {\n    this._bufferedDuration += duration;\n\n    let durationTimeout;\n    durationTimeout = setTimeout(() => {\n      this._bufferedDuration -= duration;\n      this._durationTimeouts.delete(durationTimeout);\n\n      if (!this._durationTimeouts.size) this._notifyWaiting();\n    }, this._bufferedDuration);\n\n    this._durationTimeouts.add(durationTimeout);\n  }\n\n  _notifyWaiting() {\n    if (this._waitingResolve) this._waitingResolve();\n\n    this._waitingPromise = new Promise((resolve) => {\n      this._waitingResolve = resolve;\n    });\n  }\n\n  _resetWaiting() {\n    if (this._durationTimeouts)\n      this._durationTimeouts.forEach((id) => clearTimeout(id));\n\n    this._durationTimeouts = new Set();\n    this._bufferedDuration = 0;\n    this._notifyWaiting();\n  }\n\n  async _createDecoder() {\n    let DecoderClass;\n\n    this._loadingDecoder = new Promise((resolve) => {\n      this._decoderLoaded = resolve;\n    });\n\n    try {\n      switch (this._codec) {\n        case \"mpeg\":\n          const { MPEGDecoderWebWorker } = await import(\n            /* webpackChunkName: \"mpeg\" */ \"mpg123-decoder\"\n          );\n          DecoderClass = MPEGDecoderWebWorker;\n          break;\n        case \"opus\":\n          const { OpusDecoderWebWorker } = await import(\n            /* webpackChunkName: \"opus\" */ \"opus-decoder\"\n          );\n          DecoderClass = OpusDecoderWebWorker;\n          break;\n        case \"flac\":\n          const { FLACDecoderWebWorker } = await import(\n            /* webpackChunkName: \"flac\" */ \"@wasm-audio-decoders/flac\"\n          );\n          DecoderClass = FLACDecoderWebWorker;\n          break;\n        case \"vorbis\":\n          const { OggVorbisDecoderWebWorker } = await import(\n            /* webpackChunkName: \"vorbis\" */ \"@wasm-audio-decoders/ogg-vorbis\"\n          );\n          DecoderClass = OggVorbisDecoderWebWorker;\n          break;\n      }\n    } catch (e) {\n      this._icecast[fireEvent](\n        event.PLAYBACK_ERROR,\n        `Missing \\`webaudio-${this._codec}\\` dependency.`,\n        `Unable to playback playback \\`${this._codec}\\` audio.`,\n      );\n      return;\n    }\n\n    if (DecoderClass) {\n      const codecHeader = await this._codecHeader;\n      this._decoderLoaded();\n      this._wasmDecoder = new DecoderClass(codecHeader);\n    } else {\n      this._icecast[fireEvent](\n        event.PLAYBACK_ERROR,\n        \"Unsupported `webaudio` playback codec: \" + this._codec,\n      );\n    }\n  }\n\n  async _init() {\n    super._init();\n\n    this._currentTime = 0;\n    this._decodedSample = 0;\n    this._startSampleOffset = 0;\n    this._sampleRate = 0;\n    this._playbackStartTime = undefined;\n    this._playReady = false;\n\n    this._resetWaiting();\n\n    this._playPromise = new Promise((resolve) => {\n      this._playStart = resolve;\n    });\n  }\n\n  async start(metadataOffset) {\n    if (!this._wasmDecoder) await this._createDecoder();\n\n    const playing = super.start(metadataOffset);\n    this._playStart();\n    await playing;\n  }\n\n  async end() {\n    super.end();\n\n    if (this._wasmDecoder) {\n      this._wasmDecoder.terminate();\n      this._wasmDecoder = null;\n    }\n\n    if (this._mediaStream) {\n      // disconnect the currently playing media stream\n      this._mediaStream.stream\n        .getTracks()\n        .forEach((track) => this._mediaStream.stream.removeTrack(track));\n    }\n\n    this._init();\n  }\n\n  async onStream(frames) {\n    if (this._codec !== \"vorbis\") {\n      frames = frames.flatMap((oggPage) => oggPage.codecFrames || oggPage);\n\n      switch (this.syncState) {\n        case NOT_SYNCED:\n          this._frameQueue.initSync();\n          this.syncState = SYNCING;\n        case SYNCING:\n          [this.syncFrames, this.syncState, this.syncDelay] =\n            await this._frameQueue.sync(frames);\n          frames = this.syncFrames;\n      }\n    }\n\n    switch (this.syncState) {\n      case PCM_SYNCED:\n        break;\n      case SYNCED:\n        if (frames.length) {\n          this._currentTime = frames[frames.length - 1].totalDuration;\n\n          this._decodeAndPlay(frames);\n        }\n    }\n  }\n\n  async _decodeAndPlay(frames) {\n    await this._loadingDecoder;\n\n    if (this._wasmDecoder) {\n      await this._wasmDecoder.ready;\n\n      let decodePromise;\n\n      if (this._codec === \"vorbis\") {\n        decodePromise = this._wasmDecoder.decodeOggPages(frames);\n      } else {\n        decodePromise = this._wasmDecoder.decodeFrames(\n          frames.map((f) => f.data),\n        );\n        this._frameQueue.addAll(frames);\n      }\n\n      decodePromise.then((decoded) => this._play(decoded));\n    }\n  }\n\n  async _play({ channelData, samplesDecoded, sampleRate }) {\n    await this._playPromise;\n\n    if (\n      this._icecast.state !== state.STOPPING &&\n      this._icecast.state !== state.STOPPED &&\n      samplesDecoded\n    ) {\n      this._icecast[fireEvent](event.STREAM, {\n        channelData,\n        samplesDecoded,\n        sampleRate,\n      });\n\n      if (!this._sampleRate) {\n        this._sampleRate = sampleRate;\n\n        this._mediaStream = this._audioContext.createMediaStreamDestination();\n        this._mediaStream.channelCount =\n          this._audioContext.destination.maxChannelCount;\n\n        this._audioElement.srcObject = this._mediaStream.stream; // triggers canplay event\n      }\n\n      const audioBuffer = this._audioContext.createBuffer(\n        channelData.length,\n        samplesDecoded,\n        this._sampleRate,\n      );\n\n      channelData.forEach((channel, idx) =>\n        audioBuffer.getChannelData(idx).set(channel),\n      );\n\n      const source = this._audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this._mediaStream);\n\n      const scalingFactor = 100;\n      const startSamples =\n        this._decodedSample * scalingFactor + this._startSampleOffset;\n      const audioContextSamples = Math.round(\n        this._audioContext.currentTime * this._sampleRate * scalingFactor,\n      );\n\n      if (startSamples < audioContextSamples) {\n        // audio context time starts incrementing immediately when it's created\n        // offset needs to be accounted for to prevent overlapping sources\n        this._startSampleOffset += audioContextSamples - startSamples;\n      }\n\n      source.start(startSamples / this._sampleRate / scalingFactor);\n\n      this._updateWaiting((samplesDecoded / this._sampleRate) * 1000);\n\n      if (!this._playReady) {\n        if (this._bufferLength <= this.metadataTimestamp) {\n          this._icecast[fireEvent](event.PLAY_READY);\n          this._playbackStartTime = performance.now();\n\n          this._startMetadataQueues();\n          this._icecast[fireEvent](event.PLAY);\n          this._playReady = true;\n        } else {\n          this._icecast[fireEvent](event.BUFFER, this.metadataTimestamp);\n        }\n      }\n\n      this._decodedSample += samplesDecoded;\n    }\n  }\n}\n","import {\n  IcecastMetadataQueue,\n  IcecastReadableStream,\n} from \"icecast-metadata-js\";\nimport CodecParser from \"codec-parser\";\n\nimport {\n  p,\n  state,\n  event,\n  audioElement,\n  enableLogging,\n  enableCodecUpdate,\n  endpointGenerator,\n  metadataTypes,\n  icyMetaInt,\n  icyCharacterEncoding,\n  icyDetectionTimeout,\n  playbackMethod,\n  fireEvent,\n  hasIcy,\n  abortController,\n  playerState,\n  SYNCED,\n  PCM_SYNCED,\n  SYNCING,\n  NOT_SYNCED,\n  noOp,\n} from \"./global.js\";\n\nimport Player from \"./players/Player.js\";\nimport HTML5Player from \"./players/HTML5Player.js\";\nimport MediaSourcePlayer from \"./players/MediaSourcePlayer.js\";\nimport WebAudioPlayer from \"./players/WebAudioPlayer.js\";\n\nexport default class PlayerFactory {\n  constructor(icecast) {\n    const instanceVariables = p.get(icecast);\n\n    this._icecast = icecast;\n    this._audioElement = instanceVariables[audioElement];\n    this._enableLogging = instanceVariables[enableLogging];\n    this._enableCodecUpdate = instanceVariables[enableCodecUpdate];\n\n    this._playbackMethod = \"\";\n\n    this._newMetadataQueues();\n    this._player = new Player(this._icecast);\n    this._player.icecastMetadataQueue = this._icecastMetadataQueue;\n    this._player.codecUpdateQueue = this._codecUpdateQueue;\n    this._player.enablePlayButton(PlayerFactory.supportedPlaybackMethods);\n\n    this._unprocessedFrames = [];\n    this._codecParser = undefined;\n    this._inputMimeType = \"\";\n    this._codec = \"\";\n\n    this._syncPromise = Promise.resolve();\n    this._syncCancel = noOp;\n  }\n\n  static get supportedPlaybackMethods() {\n    return [MediaSourcePlayer, WebAudioPlayer, HTML5Player].map((player) =>\n      player.isSupported ? player.name : \"\",\n    );\n  }\n\n  static canPlayType(type) {\n    return {\n      mediasource: MediaSourcePlayer.canPlayType(type),\n      html5: HTML5Player.canPlayType(type),\n      webaudio: WebAudioPlayer.canPlayType(type),\n    };\n  }\n\n  get endpoint() {\n    return this._endpoint;\n  }\n\n  get player() {\n    return this._player;\n  }\n\n  get playbackMethod() {\n    return this._playbackMethod;\n  }\n\n  get icyMetaInt() {\n    return (\n      this._icecastReadableStream && this._icecastReadableStream.icyMetaInt\n    );\n  }\n\n  async playStream() {\n    return this.fetchStream()\n      .then(async (res) => {\n        this._icecast[fireEvent](event.STREAM_START);\n\n        return this.readIcecastResponse(res).finally(() => {\n          this._icecast[fireEvent](event.STREAM_END);\n        });\n      })\n      .catch((e) => {\n        if (this._icecast.state !== state.SWITCHING) throw e;\n      });\n  }\n\n  async switchStream() {\n    if (this._icecast.state !== state.PLAYING) {\n      this._syncCancel();\n      await this._syncPromise;\n    }\n\n    const instance = p.get(this._icecast);\n\n    instance[playerState] = state.SWITCHING;\n    instance[abortController].abort();\n    instance[abortController] = new AbortController();\n  }\n\n  async fetchStream() {\n    const instanceVariables = p.get(this._icecast);\n    this._endpoint = instanceVariables[endpointGenerator].next().value;\n\n    const res = await fetch(this._endpoint, {\n      method: \"GET\",\n      headers: instanceVariables[hasIcy] ? { \"Icy-MetaData\": 1 } : {},\n      signal: instanceVariables[abortController].signal,\n    });\n\n    if (!res.ok) {\n      const error = new Error(`${res.status} received from ${res.url}`);\n      error.name = \"HTTP Response Error\";\n      throw error;\n    }\n\n    return res;\n  }\n\n  async readIcecastResponse(res) {\n    const inputMimeType = res.headers.get(\"content-type\");\n    const instanceVariables = p.get(this._icecast);\n\n    let onCodecHeader;\n    const codecHeaderPromise = new Promise((resolve) => {\n      onCodecHeader = resolve;\n    });\n\n    const codecPromise = new Promise((onCodec) => {\n      this._codecParser = new CodecParser(inputMimeType, {\n        onCodec,\n        onCodecHeader,\n        onCodecUpdate:\n          this._enableCodecUpdate &&\n          ((...args) => this._player.onCodecUpdate(...args)),\n        enableLogging: this._enableLogging,\n      });\n    });\n\n    this._icecastReadableStream = new IcecastReadableStream(res, {\n      onMetadata: async (metadata) => {\n        this._player.onMetadata(metadata);\n      },\n      onStream: async ({ stream }) => {\n        this._icecast[fireEvent](event.STREAM, stream);\n\n        const frames = [...this._codecParser.parseChunk(stream)];\n\n        if (this._player.isAudioPlayer) {\n          const appendedFrames = [...this._unprocessedFrames, ...frames];\n          this._unprocessedFrames = [];\n\n          await this._player.onStream(appendedFrames);\n        } else {\n          this._unprocessedFrames.push(...frames);\n        }\n      },\n      onError: (...args) => this._icecast[fireEvent](event.WARN, ...args),\n      metadataTypes: instanceVariables[metadataTypes],\n      icyCharacterEncoding: instanceVariables[icyCharacterEncoding],\n      icyDetectionTimeout: instanceVariables[icyDetectionTimeout],\n      ...(instanceVariables[icyMetaInt]\n        ? { icyMetaInt: instanceVariables[icyMetaInt] }\n        : {}),\n    });\n\n    const icecastPromise = this._icecastReadableStream.startReading();\n    const codec = await codecPromise;\n\n    if (!this._player.isAudioPlayer) {\n      [this._player, this._playbackMethod] = this._buildPlayer(\n        inputMimeType,\n        codec,\n        codecHeaderPromise,\n      );\n    }\n\n    if (this._player.syncState === SYNCED) {\n      this._player.start();\n    } else {\n      await this._syncPlayer(inputMimeType, codec, codecHeaderPromise);\n    }\n\n    await icecastPromise;\n  }\n\n  async _syncPlayer(inputMimeType, codec, codecHeaderPromise) {\n    let delayTimeoutId,\n      canceled = false,\n      playerStarted = false,\n      complete;\n\n    const oldPlayer = this._player;\n    const oldIcecastMetadataQueue = this._player.icecastMetadataQueue;\n    const oldCodecUpdateQueue = this._player.codecUpdateQueue;\n\n    this._newMetadataQueues();\n    // intercept all new metadata updates\n    oldPlayer.icecastMetadataQueue = this._icecastMetadataQueue;\n    oldPlayer.codecUpdateQueue = this._codecUpdateQueue;\n\n    const startNewPlayer = () => {\n      playerStarted = true;\n      if (\n        this._icecast.state !== state.STOPPING ||\n        this._icecast.state !== state.STOPPED\n      ) {\n        oldPlayer.icecastMetadataQueue.purgeMetadataQueue();\n        oldPlayer.codecUpdateQueue.purgeMetadataQueue();\n        this._player\n          .start(Math.max(0, oldPlayer.syncDelay / 1000))\n          .then(() => oldPlayer.end())\n          .then(complete);\n      }\n    };\n\n    this._syncCancel = () => {\n      canceled = true;\n\n      this._icecastMetadataQueue.purgeMetadataQueue();\n      this._codecUpdateQueue.purgeMetadataQueue();\n\n      this._player.icecastMetadataQueue = oldIcecastMetadataQueue;\n      this._player.codecUpdateQueue = oldCodecUpdateQueue;\n\n      if (delayTimeoutId !== undefined && !playerStarted) {\n        clearTimeout(delayTimeoutId);\n        startNewPlayer();\n      }\n    };\n\n    const handleSyncEvent = () => {\n      return this._player.syncStateUpdate.then((syncState) => {\n        if (canceled) complete();\n        else\n          switch (syncState) {\n            case SYNCING:\n              return handleSyncEvent();\n            case SYNCED: // synced on crc32 hashes\n              // put old queues back since audio data is crc synced\n              this._icecastMetadataQueue.purgeMetadataQueue();\n              this._codecUpdateQueue.purgeMetadataQueue();\n              this._player.icecastMetadataQueue = oldIcecastMetadataQueue;\n              this._player.codecUpdateQueue = oldCodecUpdateQueue;\n\n              if (\n                this._icecast.state !== state.STOPPING ||\n                this._icecast.state !== state.STOPPED\n              )\n                this._icecast[playerState] = state.PLAYING;\n\n              complete();\n              break;\n            case PCM_SYNCED:\n            case NOT_SYNCED:\n              // put old queues back so they can be purged when the player is ended\n              oldPlayer.icecastMetadataQueue = oldIcecastMetadataQueue;\n              oldPlayer.codecUpdateQueue = oldCodecUpdateQueue;\n\n              [this._player, this._playbackMethod] = this._buildPlayer(\n                inputMimeType,\n                codec,\n                codecHeaderPromise,\n              );\n\n              this._unprocessedFrames.push(...oldPlayer.syncFrames);\n\n              // start player after delay or immediately\n              delayTimeoutId = setTimeout(\n                startNewPlayer,\n                Math.max(oldPlayer.syncDelay, 0),\n              );\n          }\n      });\n    };\n\n    let stoppingHandler;\n\n    this._syncPromise = new Promise((resolve) => {\n      complete = resolve;\n\n      // cancel switch event if stop is called\n      stoppingHandler = () => {\n        this._syncCancel();\n        complete();\n      };\n\n      this._icecast.addEventListener(state.STOPPING, stoppingHandler, {\n        once: true,\n      });\n\n      handleSyncEvent();\n    }).finally(() => {\n      this._icecast.removeEventListener(state.STOPPING, stoppingHandler);\n    });\n  }\n\n  _newMetadataQueues() {\n    this._icecastMetadataQueue = new IcecastMetadataQueue({\n      onMetadataUpdate: (...args) =>\n        this._icecast[fireEvent](event.METADATA, ...args),\n      onMetadataEnqueue: (...args) =>\n        this._icecast[fireEvent](event.METADATA_ENQUEUE, ...args),\n      paused: true,\n    });\n\n    this._codecUpdateQueue = new IcecastMetadataQueue({\n      onMetadataUpdate: (...args) =>\n        this._icecast[fireEvent](event.CODEC_UPDATE, ...args),\n      paused: true,\n    });\n  }\n\n  _buildPlayer(inputMimeType, codec, codecHeader) {\n    // in order of preference\n    const { [p.get(this._icecast)[playbackMethod]]: firstMethod, ...rest } = {\n      mediasource: MediaSourcePlayer,\n      webaudio: WebAudioPlayer,\n      html5: HTML5Player,\n    };\n\n    let player, method;\n\n    for (const Player of Object.values({ firstMethod, ...rest })) {\n      const support = Player.canPlayType(`${inputMimeType};codecs=\"${codec}\"`);\n\n      if (support === \"probably\" || support === \"maybe\") {\n        method = Player.name;\n        player = new Player(\n          this._icecast,\n          this._endpoint,\n          inputMimeType,\n          codec,\n          codecHeader,\n        );\n        player.icecastMetadataQueue = this._icecastMetadataQueue;\n        player.codecUpdateQueue = this._codecUpdateQueue;\n        break;\n      }\n    }\n\n    if (!player) {\n      throw new Error(\n        `Your browser does not support this audio codec ${inputMimeType}${\n          codec && `;codecs=\"${codec}\"`\n        }`,\n      );\n    }\n\n    return [player, method];\n  }\n}\n","/**\n * @license\n * @see https://github.com/eshaz/icecast-metadata-js\n * @copyright 2021-2023 Ethan Halsall\n *  This file is part of icecast-metadata-player.\n *\n *  icecast-metadata-player free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Lesser General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  icecast-metadata-player distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>\n */\n\nimport {\n  p,\n  noOp,\n  state,\n  event,\n  // options,\n  endpoints,\n  metadataTypes,\n  playbackMethod,\n  audioContext,\n  audioElement,\n  bufferLength,\n  icyMetaInt,\n  icyCharacterEncoding,\n  icyDetectionTimeout,\n  enableLogging,\n  enableCodecUpdate,\n  retryDelayMin,\n  retryDelayMax,\n  retryDelayRate,\n  endpointOrder,\n  retryTimeout,\n  // methods\n  fireEvent,\n  attachAudioElement,\n  shouldRetry,\n  logError,\n  getOptions,\n  getNextEndpointGenerator,\n  // variables\n  endpointGenerator,\n  hasIcy,\n  abortController,\n  playerState,\n} from \"./global.js\";\n\nimport EventTargetPolyfill from \"./EventTargetPolyfill.js\";\nimport PlayerFactory from \"./PlayerFactory.js\";\n\nlet EventClass;\n\ntry {\n  new window.EventTarget();\n  EventClass = window.EventTarget;\n} catch {\n  EventClass = EventTargetPolyfill;\n}\n\nconst playerFactory = Symbol();\nconst playerResetPromise = Symbol();\nconst events = Symbol();\n\nconst onAudioPause = Symbol();\nconst onAudioPlay = Symbol();\nconst onPlayReady = Symbol();\nconst onAudioError = Symbol();\nconst onAudioWaiting = Symbol();\n\nconst stopPlayback = Symbol();\nconst endPlayback = Symbol();\nconst retryAttempt = Symbol();\nconst retryTimeoutId = Symbol();\n\nexport default class IcecastMetadataPlayer extends EventClass {\n  static *[getNextEndpointGenerator](instance) {\n    while (true) {\n      const currentEndpoints = p.get(instance)[endpoints];\n      for (const endpoint of currentEndpoints) {\n        yield endpoint;\n        if (p.get(instance)[endpoints] !== currentEndpoints) break;\n      }\n    }\n  }\n\n  static [getOptions](urls, options, instance = {}) {\n    const newOptions = {\n      [endpoints]:\n        (urls && (Array.isArray(urls) ? urls : [urls])) ?? instance[endpoints],\n      [bufferLength]: options.bufferLength ?? instance[bufferLength] ?? 1,\n      [icyMetaInt]: options.icyMetaInt ?? instance[icyMetaInt],\n      [icyCharacterEncoding]:\n        options.icyCharacterEncoding ?? instance[icyCharacterEncoding],\n      [icyDetectionTimeout]:\n        options.icyDetectionTimeout ?? instance[icyDetectionTimeout],\n      [metadataTypes]: (options.metadataTypes ?? instance[metadataTypes]) || [\n        \"icy\",\n      ],\n      [hasIcy]: (\n        (options.metadataTypes ?? instance[metadataTypes]) || [\"icy\"]\n      ).includes(\"icy\"),\n      [enableLogging]:\n        options.enableLogging ?? instance[enableLogging] ?? false,\n      [enableCodecUpdate]: Boolean(\n        options.enableCodecUpdate ??\n          instance[enableCodecUpdate] ??\n          options.onCodecUpdate,\n      ),\n      [endpointOrder]:\n        options.endpointOrder ?? instance[endpointOrder] ?? \"ordered\",\n      [retryDelayRate]:\n        options.retryDelayRate ?? instance[retryDelayRate] ?? 0.1,\n      [retryDelayMin]: options.retryDelayMin ?? instance[retryDelayMin] ?? 0.5,\n      [retryDelayMax]: options.retryDelayMax ?? instance[retryDelayMax] ?? 2,\n      [retryTimeout]: options.retryTimeout ?? instance[retryTimeout] ?? 30,\n      [playbackMethod]:\n        (options.playbackMethod ?? instance[playbackMethod]) || \"mediasource\",\n    };\n\n    if (\n      newOptions[endpoints] !== instance[endpoints] &&\n      newOptions[endpointOrder] === \"random\"\n    )\n      newOptions[endpoints] = newOptions[endpoints].sort(\n        () => 0.5 - Math.random(),\n      );\n\n    return newOptions;\n  }\n\n  /**\n   * @constructor\n   * @param {string|string[]} endpoint Endpoint(s) of the Icecast compatible stream\n   * @param {object} options Options object\n   * @param {HTMLAudioElement} options.audioElement Audio element to play the stream\n   * @param {Array} options.metadataTypes Array of metadata types to parse\n   * @param {number} options.bufferLength Seconds of audio to buffer before starting playback\n   * @param {number} options.icyMetaInt ICY metadata interval\n   * @param {string} options.icyCharacterEncoding Character encoding to use for ICY metadata (defaults to \"utf-8\")\n   * @param {number} options.icyDetectionTimeout ICY metadata detection timeout\n   * @param {string} options.endpointOrder Order that a stream endpoint will be chosen when multiple endpoints are passed in.\n   * @param {number} options.retryTimeout Number of seconds to wait before giving up on retries\n   * @param {number} options.retryDelayRate Percentage of seconds to increment after each retry (how quickly to increase the back-off)\n   * @param {number} options.retryDelayMin Minimum number of seconds between retries (start of the exponential back-off curve)\n   * @param {number} options.retryDelayMax Maximum number of seconds between retries (end of the exponential back-off curve)\n   * @param {boolean} options.enableLogging Set to `true` to enable warning and error logging to the console\n   * @param {string} options.playbackMethod Sets the preferred playback method (mediasource (default), html5, webaudio)\n   *\n   * @callback options.onMetadata Called with metadata when synchronized with the audio\n   * @callback options.onMetadataEnqueue Called with metadata when discovered on the response\n   * @callback options.onError Called with message(s) when a fallback or error condition is met\n   * @callback options.onWarn Called with message(s) when a warning condition is met\n   * @callback options.onPlay Called when the audio element begins playing\n   * @callback options.onLoad Called when stream request is started\n   * @callback options.onStreamStart Called when stream requests begins to return data\n   * @callback options.onBuffer Called when the audio buffer is being filled\n   * @callback options.onStream Called when stream data is sent to the audio element\n   * @callback options.onStreamEnd Called when the stream request completes\n   * @callback options.onStop Called when the stream is completely stopped and all cleanup operations are complete\n   * @callback options.onRetry Called when a connection retry is attempted\n   * @callback options.onRetryTimeout Called when connections attempts have timed out\n   * @callback options.onSwitch Called when a switch event is triggered\n   * @callback options.onCodecUpdate Called when the audio codec information has changed\n   */\n  constructor(urls, options = {}) {\n    super();\n\n    p.set(this, {\n      // options\n      [endpointGenerator]:\n        IcecastMetadataPlayer[getNextEndpointGenerator](this),\n      [audioElement]: options.audioElement || new Audio(),\n      ...IcecastMetadataPlayer[getOptions](urls, options),\n      // callbacks\n      [events]: {\n        [event.PLAY]: options.onPlay || noOp,\n        [event.PLAY_READY]: noOp,\n        [event.LOAD]: options.onLoad || noOp,\n        [event.STREAM_START]: options.onStreamStart || noOp,\n        [event.BUFFER]: options.onBuffer || noOp,\n        [event.STREAM]: options.onStream || noOp,\n        [event.STREAM_END]: options.onStreamEnd || noOp,\n        [event.METADATA]: options.onMetadata || noOp,\n        [event.METADATA_ENQUEUE]: options.onMetadataEnqueue || noOp,\n        [event.CODEC_UPDATE]: options.onCodecUpdate || noOp,\n        [event.STOP]: options.onStop || noOp,\n        [event.RETRY]: options.onRetry || noOp,\n        [event.RETRY_TIMEOUT]: options.onRetryTimeout || noOp,\n        [event.SWITCH]: options.onSwitch || noOp,\n        [event.WARN]: (...messages) => {\n          this[logError](console.warn, options.onWarn, messages);\n        },\n        [event.ERROR]: (...messages) => {\n          this[logError](console.error, options.onError, messages);\n        },\n        [event.PLAYBACK_ERROR]: (...messages) => {\n          if (this.state !== state.RETRYING) {\n            this[fireEvent](event.ERROR, ...messages);\n\n            this.stop();\n          } else {\n            p.get(this)[endPlayback]();\n          }\n        },\n      },\n      // variables\n      [endPlayback]: () => {\n        clearTimeout(p.get(this)[retryTimeoutId]);\n        this.removeEventListener(event.STREAM_START, p.get(this)[endPlayback]);\n        p.get(this)[audioElement].removeEventListener(\n          \"waiting\",\n          p.get(this)[onAudioWaiting],\n        );\n\n        try {\n          p.get(this)[audioElement].pause();\n        } catch (e) {\n          p.get(this)[onAudioError](e);\n        }\n\n        try {\n          p.get(this)[playerResetPromise] = p\n            .get(this)\n            [playerFactory].player.end();\n        } catch {}\n      },\n      // audio element event handlers\n      [onAudioPlay]: () => {\n        this.play();\n      },\n      [onAudioPause]: () => {\n        this.stop();\n      },\n      [onAudioError]: (e) => {\n        const errors = {\n          1: \" MEDIA_ERR_ABORTED The fetching of the associated resource was aborted by the user's request.\",\n          2: \" MEDIA_ERR_NETWORK Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available.\",\n          3: \" MEDIA_ERR_DECODE Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error.\",\n          4: \" MEDIA_ERR_SRC_NOT_SUPPORTED The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable.\",\n          5: \" MEDIA_ERR_ENCRYPTED\",\n        };\n\n        const error = e?.target?.error || e;\n\n        this[fireEvent](\n          event.PLAYBACK_ERROR,\n          \"The audio element encountered an error.\" +\n            (errors[error?.code] || \"\"),\n        );\n      },\n      [onPlayReady]: () => {\n        const audio = p.get(this)[audioElement];\n\n        if (\n          this.state === state.LOADING ||\n          (!audio.loop &&\n            this.state !== state.STOPPING &&\n            this.state !== state.STOPPED)\n        ) {\n          audio\n            .play()\n            .then(() => {\n              this[playerState] = state.PLAYING;\n            })\n            .catch((e) => {\n              this[fireEvent](event.PLAYBACK_ERROR, e, \"Playback failed.\");\n            });\n        }\n      },\n      [stopPlayback]: noOp,\n    });\n\n    this[attachAudioElement]();\n    this[playerState] = state.STOPPED;\n\n    p.get(this)[playerFactory] = new PlayerFactory(this);\n  }\n\n  /**\n   * @description Checks for MediaSource, WebAudio, and HTML5 support for a given codec\n   * @param {string} type Codec / mime-type to check\n   * @returns {mediasource: string, webaudio: string, html5: string} Object indicating if the codec is supported by the playback method\n   */\n  static canPlayType(type) {\n    return PlayerFactory.canPlayType(type);\n  }\n\n  /**\n   * @returns {HTMLAudioElement} The audio element associated with this instance\n   */\n  get audioElement() {\n    return p.get(this)[audioElement];\n  }\n\n  /**\n   * @returns {AudioContext} Statically initialized internal AudioContext\n   */\n  get [audioContext]() {\n    return IcecastMetadataPlayer.constructor[audioContext];\n  }\n\n  /**\n   * @returns {string} Current endpoint that is being played\n   */\n  get endpoint() {\n    return p.get(this)[playerFactory].endpoint;\n  }\n\n  /**\n   * @returns {number} The ICY metadata interval in number of bytes for this instance\n   */\n  get icyMetaInt() {\n    return p.get(this)[playerFactory].icyMetaInt;\n  }\n\n  /**\n   * @returns {Array<Metadata>} Array of enqueued metadata objects in FILO order\n   */\n  get metadataQueue() {\n    return p.get(this)[playerFactory].player.metadataQueue;\n  }\n\n  /**\n   * @returns {string} The current state (\"loading\", \"playing\", \"stopping\", \"stopped\", \"retrying\", \"switching\")\n   */\n  get state() {\n    return p.get(this)[playerState];\n  }\n\n  /**\n   * @returns {string} The playback method (\"mediasource\", \"webaudio\", \"html5\")\n   */\n  get playbackMethod() {\n    return p.get(this)[playerFactory].playbackMethod;\n  }\n\n  set [playerState](_state) {\n    this.dispatchEvent(new CustomEvent(_state));\n    p.get(this)[playerState] = _state;\n  }\n\n  [attachAudioElement]() {\n    // audio events\n    const audio = p.get(this)[audioElement];\n    audio.addEventListener(\"pause\", p.get(this)[onAudioPause]);\n    audio.addEventListener(\"play\", p.get(this)[onAudioPlay]);\n    audio.addEventListener(\"error\", p.get(this)[onAudioError]);\n\n    this.addEventListener(event.PLAY_READY, p.get(this)[onPlayReady]);\n  }\n\n  /**\n   * @description Remove event listeners from the audio element and this instance and stops playback\n   */\n  async detachAudioElement() {\n    const audio = p.get(this)[audioElement];\n    audio.removeEventListener(\"pause\", p.get(this)[onAudioPause]);\n    audio.removeEventListener(\"play\", p.get(this)[onAudioPlay]);\n    audio.removeEventListener(\"error\", p.get(this)[onAudioError]);\n\n    this.removeEventListener(event.PLAY_READY, p.get(this)[onPlayReady]);\n    await this.stop();\n  }\n\n  /**\n   * @description Plays the Icecast stream\n   * @async Resolves when the audio element is playing\n   */\n  async play() {\n    if (this.state === state.STOPPED) {\n      const playing = new Promise((resolve) => {\n        this.addEventListener(event.PLAY, resolve, { once: true });\n      });\n\n      const streamEnd = new Promise((resolve) => {\n        this.addEventListener(event.STREAM_END, resolve, { once: true });\n      });\n\n      p.get(this)[abortController] = new AbortController();\n      this[playerState] = state.LOADING;\n      this[fireEvent](event.LOAD);\n\n      // prettier-ignore\n      const tryFetching = async () =>\n        p.get(this)[playerFactory].playStream()\n          .then(async () => {\n            if (this.state === state.SWITCHING) {\n              this[fireEvent](event.SWITCH);\n              return tryFetching();\n            } else if (\n              this.state !== state.STOPPING &&\n              this.state !== state.STOPPED\n            ) {\n              // wait for any remaining audio to play through\n              await playing;\n              await streamEnd;\n              await p.get(this)[playerFactory].player.waiting;\n            }\n          })\n          .catch(async (e) => {\n            if (e && e.name !== \"AbortError\") {\n              if (await this[shouldRetry](e)) {\n                this[fireEvent](event.RETRY);\n                return tryFetching();\n              }\n\n              p.get(this)[abortController].abort(); // stop fetch if is wasn't aborted\n\n              if (\n                this.state !== state.STOPPING &&\n                this.state !== state.STOPPED\n              ) {\n                this[fireEvent](\n                  event.ERROR,\n                  e.message.match(/network|fetch|offline|codec/i) ? e : e.stack,\n                  e\n                );\n              }\n            }\n          });\n\n      new Promise((resolve, reject) => {\n        // stop any pending playback operation when stop is called\n        p.get(this)[stopPlayback] = reject;\n\n        tryFetching().then(resolve);\n      })\n        .catch((e) => {\n          if (this.state !== state.STOPPING) throw e;\n        })\n        .finally(() => {\n          p.get(this)[endPlayback]();\n\n          this[fireEvent](event.STOP);\n          this[playerState] = state.STOPPED;\n        });\n\n      await playing;\n    }\n  }\n\n  /**\n   * @description Stops playing the Icecast stream\n   * @async Resolves when the icecast stream has stopped\n   */\n  async stop() {\n    if (this.state !== state.STOPPED && this.state !== state.STOPPING) {\n      this[playerState] = state.STOPPING;\n      p.get(this)[abortController].abort();\n      p.get(this)[stopPlayback]();\n\n      await new Promise((resolve) => {\n        this.addEventListener(event.STOP, resolve, { once: true });\n      });\n    }\n  }\n\n  /**\n   * @description Switches the Icecast stream endpoint during playback\n   * @async Resolves when playback begins from the new source\n   */\n  async switchEndpoint(newEndpoints, newOptions) {\n    if (this.state !== state.STOPPED && this.state !== state.STOPPING) {\n      const instance = p.get(this);\n      Object.assign(\n        instance,\n        IcecastMetadataPlayer[getOptions](newEndpoints, newOptions, instance),\n      );\n\n      return instance[playerFactory].switchStream();\n    }\n  }\n\n  async [shouldRetry](error) {\n    if (p.get(this)[retryTimeout] === 0) return false;\n\n    if (p.get(this)[playerState] === state.RETRYING) {\n      // wait for retry interval\n      await new Promise((resolve) => {\n        this.addEventListener(state.STOPPING, resolve, { once: true });\n\n        const delay = Math.min(\n          p.get(this)[retryDelayMin] *\n            1000 *\n            (p.get(this)[retryDelayRate] + 1) ** p.get(this)[retryAttempt]++,\n          p.get(this)[retryDelayMax] * 1000,\n        ); // exponential backoff\n\n        setTimeout(\n          () => {\n            this.removeEventListener(state.STOPPING, resolve);\n            resolve();\n          },\n          delay + delay * 0.3 * Math.random(),\n        ); // jitter\n      });\n\n      // ensure the retry hasn't been cancelled while waiting\n      return p.get(this)[playerState] === state.RETRYING;\n    }\n\n    if (\n      p.get(this)[playerState] !== state.STOPPING &&\n      p.get(this)[playerState] !== state.STOPPED &&\n      (error.message.match(/network|fetch|offline|Error in body stream/i) ||\n        error.name === \"HTTP Response Error\")\n    ) {\n      this[fireEvent](event.ERROR, error.name, error);\n      this[playerState] = state.RETRYING;\n\n      if (p.get(this)[hasIcy]) {\n        this[fireEvent](\n          event.WARN,\n          \"This stream was requested with ICY metadata.\",\n          'If there is a CORS preflight failure, try removing \"icy\" from the metadataTypes option.',\n          \"See https://github.com/eshaz/icecast-metadata-js#cors for more details.\",\n        );\n      }\n\n      const audioWaiting = new Promise((resolve) => {\n        p.get(this)[onAudioWaiting] = resolve;\n        p.get(this)[audioElement].addEventListener(\n          \"waiting\",\n          p.get(this)[onAudioWaiting],\n          {\n            once: true,\n          },\n        );\n      });\n\n      // wait for whichever is longer, audio element waiting or retry timeout\n      p.get(this)[retryTimeoutId] = setTimeout(\n        () => {\n          audioWaiting.then(() => {\n            if (p.get(this)[playerState] === state.RETRYING) {\n              this[fireEvent](event.RETRY_TIMEOUT);\n              this.stop();\n            }\n          });\n        },\n        p.get(this)[retryTimeout] * 1000,\n      );\n\n      p.get(this)[retryAttempt] = 0;\n      return true;\n    }\n\n    return false;\n  }\n\n  [fireEvent](event, ...args) {\n    this.dispatchEvent(new CustomEvent(event, { detail: args }));\n    p.get(this)[events][event](...args);\n  }\n\n  [logError](consoleFunction, callback, messages) {\n    if (p.get(this)[enableLogging]) {\n      consoleFunction(\n        \"icecast-metadata-js\",\n        messages.reduce((acc, message) => acc + \"\\n  \" + message, \"\"),\n      );\n    }\n    if (callback) callback(...messages);\n  }\n}\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\n\n// statically initialize audio context and start using a DOM event\nif (AudioContext && !IcecastMetadataPlayer.constructor[audioContext]) {\n  IcecastMetadataPlayer.constructor[audioContext] = \"audio context pending\";\n\n  const audioCtxErrorHandler = (e) => {\n    console.error(\n      \"icecast-metadata-js\",\n      \"Failed to start the AudioContext. WebAudio playback will not be possible.\",\n      e,\n    );\n  };\n\n  // hack for iOS Audio element controls support\n  // iOS will only enable AudioContext.resume() when called directly from a UI event\n  // https://stackoverflow.com/questions/57510426\n  const events = [\"touchstart\", \"touchend\", \"mousedown\", \"keydown\"];\n\n  const unlock = () => {\n    events.forEach((e) => document.removeEventListener(e, unlock));\n\n    const audioCtx = new AudioContext({\n      latencyHint: \"interactive\",\n    });\n\n    audioCtx.destination.channelCount = audioCtx.destination.maxChannelCount;\n\n    audioCtx\n      .resume()\n      .then(() => {\n        // hack for iOS to continue playing while locked\n        audioCtx\n          .createScriptProcessor(2 ** 14, 2, 2)\n          .connect(audioCtx.destination);\n\n        audioCtx.onstatechange = () => {\n          if (audioCtx.state !== \"running\")\n            audioCtx.resume().catch(audioCtxErrorHandler);\n        };\n      })\n      .catch(audioCtxErrorHandler);\n\n    IcecastMetadataPlayer.constructor[audioContext] = audioCtx;\n  };\n\n  events.forEach((e) => document.addEventListener(e, unlock));\n}\n"],"names":["deferred","inProgress","dataWebpackPrefix","symbol","Symbol","channelMappings","left","center","right","front","side","rear","map","x","flatMap","y","z","join","lfe","monophonic","stereo","surround","getChannelMapping","channelCount","mappings","vorbisOpusChannelMapping","rate48000","rate44100","rate32000","rate24000","rate22050","rate16000","rate8000","absoluteGranulePosition","bandwidth","bitDepth","bitrate","bitrateMaximum","bitrateMinimum","bitrateNominal","buffer","bufferFullness","codec","codecFrames","coupledStreamCount","crc","crc16","crc32","data","description","duration","emphasis","hasOpusPadding","header","isContinuedPacket","isCopyrighted","isFirstPage","isHome","isLastPage","isOriginal","isPrivate","isVbr","mode","modeExtension","mpeg","mpegVersion","numberAACFrames","outputGain","preSkip","profile","profileBits","protection","rawData","segments","subarray","version","vorbis","vorbisComments","vorbisSetup","block","blockingStrategy","blockingStrategyBits","blockSize","blocksize0","blocksize1","blockSizeBits","channel","channelMappingFamily","channelMappingTable","channelMode","channelModeBits","channels","copyright","copyrightId","copyrightIdStart","frameCount","frameLength","frameNumber","framePadding","frameSize","Rate","inputSampleRate","page","pageChecksum","pageSegmentBytes","pageSegmentTable","pageSequenceNumber","sample","sampleNumber","sampleRate","sampleRateBits","samples","stream","streamCount","streamInfo","streamSerialNumber","streamStructureVersion","total","totalBytesOut","totalDuration","totalSamples","readRawData","incrementRawData","mapCodecFrameStats","mapFrameStats","logWarning","syncFrame","fixedLengthFrameSync","getHeader","setHeader","getFrame","parseFrame","parseOggPage","checkCodecUpdate","enable","getHeaderFromUint8Array","checkFrameFooterCrc16","uint8Array","Uint8Array","dataView","DataView","reserved","bad","free","none","sixteenBitCRC","getCrcTable","crcTable","crcInitialValueFunction","crcFunction","byte","bit","crc8Table","b","flacCrc16Table","Uint16Array","crc32Table","Uint32Array","i","push","j","crc32Function","dataLength","crcChunkSize","concatBuffers","buffers","reduce","acc","buf","offset","set","bytesToString","bytes","String","fromCharCode","reverseTable","reverse","val","BitReader","constructor","this","_data","_pos","position","read","bits","Math","floor","HeaderCache","onCodecHeader","onCodecUpdate","_onCodecHeader","_onCodecUpdate","_isEnabled","_headerCache","Map","_codecUpdateData","WeakMap","_codecHeaderSent","_codecShouldUpdate","_bitrate","codecData","get","_currentHeader","key","_updateCurrentHeader","codecUpdateFields","headerStore","frameStore","Parser","codecParser","headerCache","_codecParser","frameData","Frame","ignoreNextFrame","_flushing","Header","headerValue","dataValue","CodecFrame","readOffset","frameLengthValue","samplesValue","super","unsynchronizationFlag","extendedHeaderFlag","experimentalFlag","footerPresent","ID3v2","getID3v2Header","CodecHeader","bitrateMatrix","calcBitrate","idx","interval","intervalOffset","bands","to31","layer12ModeExtensions","bitrateIndex","v2","v1","intensityStereo","msStereo","on","off","layersValues","mpegVersionDescription","isoIec","mpegVersions","length","protectionValues","emphasisValues","channelModes","MPEGHeader","id3v2Header","cachedHeader","mpegVersionValues","layerBits","layerValues","MPEGFrame","frame","MPEGParser","onCodec","profileValues","sampleRates","channelModeValues","AACHeader","Object","assign","protectionBit","privateBit","bufferFullnessBits","audioSpecificConfig","setUint16","AACFrame","AACParser","FLACFrame","_getFrameFooterCrc16","expectedCrc16","actualCrc16","flacCrc16","streamInfoValue","getFromStreamInfo","blockingStrategyValues","blockSizeValues","sampleRateValues","channelAssignments","bitDepthValues","FLACHeader","_decodeUTF8Int","value","zeroMask","shift","codecParserStub","next","channelAssignment","decodedUtf8","crc8","FLACParser","_getNextFrameSyncOffset","secondByte","nextHeaderOffset","oggPage","_streamInfo","segment","filter","OggPageHeader","view","from","getBigInt64","getInt32","pageSegmentTableLength","segmentLength","segmentByte","OggPage","headerLength","totalLength","rawDataValue","OpusFrame","channelMappingFamilies","slice","silkOnly","celtOnly","hybrid","narrowBand","mediumBand","wideBand","superWideBand","fullBand","configTable","OpusHeader","packetData","Error","packetMode","packetLength","substr","getUint16","getUint32","getInt16","packetConfig","headerData","OpusParser","_identificationHeader","VorbisFrame","blockSizes","VorbisHeader","vorbisCommentsData","vorbisSetupData","VorbisParser","_setupComplete","_prevBlockSize","oggPageSegment","_vorbisComments","_vorbisSetup","_mode","_parseSetupHeader","_getSamples","logError","currentBlockSize","blockFlags","mask","setup","bitReader","count","modeBits","currentByte","unshift","log2","OggStream","_onCodec","_continuedPacket","_codec","_isSupported","_updateCodec","_parser","_checkCodecSupport","idString","test","_checkPageSequenceNumber","_pageSequenceNumber","_parsePage","oggPageStore","pop","OggParser","_streams","_currentSerialNumber","oggStream","delete","noOp","mimeType","enableLogging","enableFrameCRC32","_inputMimeType","_enableLogging","_crc32","_generator","_getGenerator","flush","parseChunk","chunk","parseAll","fileData","match","_frameNumber","_currentReadPosition","_totalBytesIn","_totalBytesOut","_totalSamples","_sampleRate","undefined","_rawData","minSize","increment","round","forEach","codecFrame","_log","logger","messages","stats","width","max","s","repeat","message","console","warn","error","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","splice","r","F","E","chunkId","d","definition","o","defineProperty","enumerable","f","e","Promise","all","promises","u","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","call","l","url","done","script","needAttach","scripts","document","getElementsByTagName","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","type","target","head","appendChild","toStringTag","scriptUrl","importScripts","location","currentScript","replace","p","installedChunks","installedChunkData","promise","resolve","reject","errorType","realSrc","name","request","link","rel","as","href","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","state","LOADING","PLAYING","STOPPING","STOPPED","RETRYING","SWITCHING","BUFFER","PLAY","PLAY_READY","LOAD","STREAM_START","STREAM","STREAM_END","METADATA","METADATA_ENQUEUE","CODEC_UPDATE","STOP","RETRY","RETRY_TIMEOUT","SWITCH","WARN","ERROR","PLAYBACK_ERROR","endpoints","endpointOrder","metadataTypes","playbackMethod","audioContext","audioElement","bufferLength","icyMetaInt","icyCharacterEncoding","icyDetectionTimeout","retryDelayRate","retryDelayMin","retryDelayMax","retryTimeout","enableCodecUpdate","getNextEndpointGenerator","getOptions","fireEvent","attachAudioElement","shouldRetry","endpointGenerator","hasIcy","abortController","playerState","SYNCED","SYNCING","PCM_SYNCED","NOT_SYNCED","EventTargetPolyfill","_listeners","hasEventListener","listener","item","addEventListener","options","removeEventListener","index","findIndex","removeEventListeners","dispatchEvent","evt","once","Stats","_totalBytesRead","_streamBytesRead","_metadataLengthBytesRead","_metadataBytesRead","_currentBytesRemaining","_currentStreamBytesRemaining","_currentMetadataBytesRemaining","totalBytesRead","streamBytesRead","metadataLengthBytesRead","metadataBytesRead","currentBytesRemaining","currentStreamBytesRemaining","currentMetadataBytesRemaining","addBytes","addStreamBytes","addMetadataLengthBytes","addMetadataBytes","addCurrentBytesRemaining","MetadataParser","params","_remainingData","_currentPosition","_buffer","_streamBuffer","_streamBufferLength","_stats","_onStream","onStream","_onMetadata","onMetadata","_onMetadataFailed","onMetadataFailed","_onError","onError","_onStreamPromise","_onMetadataPromise","_passThroughParser","_addStream","_getNextValue","_sendStream","_concatBuffers","_concatBuffersKnownLength","iterator","readAll","asyncIterator","asyncReadAll","_logError","streamPayload","_sendMetadata","metadata","metadataPayload","minLength","_readData","IcyMetadataParser","rest","_decoder","TextDecoder","_icyMetaInt","_icyDetectionTimeout","_icyParser","_hasIcyMetadata","_getStream","_getMetadataLength","_getMetadata","parseIcyMetadata","metadataString","metadataRegex","metadataElement","RegExp","METADATA_SEARCH","startTime","Date","now","metaInt","detectMetadata","decode","OggMetadataParser","_oggParser","_isContinuePacket","_hasOggPage","codecMatcher","_identifyCodec","_getUint32","_matchBytes","matchString","syncBytes","baseOggPage","oggPageSegments","octet","regex","_readVorbisComment","vendorStringLength","vendorString","commentListLength","comments","commentLength","comment","delimiter","indexOf","toUpperCase","VENDOR_STRING","DualMetadataParser","_oggMetadataParser","_icyMetadataParser","oggValue","IcecastMetadataReader","includes","hasOgg","_metadataParser","string","IcecastReadableStream","response","icecast","_readableStream","ReadableStream","start","controller","parseInt","headers","async","enqueue","body","close","_icecast","readableStream","startReading","reader","getReader","IcecastMetadataQueue","icyBr","onMetadataUpdate","onMetadataEnqueue","paused","_icyBr","_onMetadataUpdate","_onMetadataEnqueue","_initialPaused","_paused","_isInitialMetadata","_pendingMetadata","_metadataQueue","metadataQueue","_timeoutId","addMetadata","timestampOffset","timestamp","getTimeByBytes","currentStreamPosition","_enqueueMetadata","bytesRead","startQueue","purgeMetadataQueue","payload","_dequeueMetadata","canSpawnWorker","spawnWorkerTest","Worker","URL","createObjectURL","Blob","onmessage","terminate","postMessage","FrameQueue","player","CRC_DURATION","PCM_DURATION","_player","initSync","initQueue","_syncTimeout","_syncTimeoutReason","_crcSyncPending","_syncQueue","_syncQueueDuration","_synAudioResult","_a","_b","_queueIndex","_queueSamples","_queueSampleRate","_crcQueue","_crcQueueDuration","_crcQueueIndexes","_pcmQueue","_pcmQueueDuration","buffered","currentTime","add","indexes","addAll","frames","_addAllSyncQueue","sync","currentBuffered","_syncReject","toFixed","syncState","_crcSync","_pcmSync","catch","syncQueue","then","syncQueueCrc","crcSyncPoints","matched","outOfFrames","syncPoint","align_queues","absoluteSyncPoint","sliceIndex","correlationSyncLength","initialGranularity","samplesToDuration","rate","SynAudio","default","pcmQueueDecoded","syncQueueDecoded","_decodeQueues","correlationSampleSize","samplesDecoded","synAudio","syncWorkerConcurrent","navigator","hardwareConcurrency","syncWorker","offsetFromEnd","sampleOffset","correlation","delay","frameOverlap","t","queue","timeFromEnd","decodeAudioData","getDecodedAudio","decodedAudioData","decoded","channelData","numberOfChannels","Float32Array","getChannelData","Player","endpoint","inputMimeType","codecHeader","_endpoint","_codecHeader","instanceVariables","_audioElement","_bufferLength","_codecUpdateTimestamp","_codecUpdateOffset","_notSyncedHandler","parseMimeType","canPlayType","codecChecker","mapping","matches","checkCodecs","codecs","mime","groups","mimeMapping","Array","isArray","mimeCodecs","split","enablePlayButton","supportedSources","removeAttribute","srcObject","MediaSource","_mediaStream","MediaStream","loop","syncStateUpdate","_syncStatePromise","_syncState","newState","_syncStateResolve","isSupported","isAudioPlayer","metadataTimestamp","waiting","icecastMetadataQueue","_icecastMetadataQueue","codecUpdateQueue","_codecUpdateQueue","_startMetadataQueues","_metadataOffset","_init","syncFrames","syncDelay","_frameQueue","metadataOffset","playing","finally","end","updateTimestamp","HTML5Player","crossOrigin","preload","_playReady","Audio","Boolean","_frame","_metadataTimestampOffset","_audioLoadedTimestamp","performance","_metadataLoadedTimestamp","MediaSourcePlayer","_MSEAudioWrapper","isTypeSupported","aac","aacp","flac","ogg","opus","_mediaSource","sourceBuffers","_sourceBufferQueue","_processingLastPage","_mediaSourceCreated","_mediaSourceCreatedNotify","_mediaSourceOpen","_mediaSourceOpenNotify","_addFrames","_prepareMediaSource","_attachMediaSource","_createMediaSource","_appendSourceBuffer","_createMSEWrapper","_wrapper","fragments","preferredContainer","addSourceBuffer","_sourceBufferRemoved","_waitForSourceBuffer","sourceBuffer","updating","appendBuffer","BUFFER_INTERVAL","remove","WebAudioPlayer","_audioContext","WebAssembly","AudioContext","webkitAudioContext","_currentTime","_playbackStartTime","_waitingPromise","_updateWaiting","durationTimeout","_bufferedDuration","_durationTimeouts","size","_notifyWaiting","_waitingResolve","_resetWaiting","Set","_createDecoder","DecoderClass","_loadingDecoder","_decoderLoaded","MPEGDecoderWebWorker","OpusDecoderWebWorker","FLACDecoderWebWorker","OggVorbisDecoderWebWorker","_wasmDecoder","_decodedSample","_startSampleOffset","_playPromise","_playStart","getTracks","track","removeTrack","_decodeAndPlay","decodePromise","ready","decodeOggPages","decodeFrames","_play","createMediaStreamDestination","destination","maxChannelCount","audioBuffer","createBuffer","source","createBufferSource","connect","scalingFactor","startSamples","audioContextSamples","PlayerFactory","_enableCodecUpdate","_playbackMethod","_newMetadataQueues","supportedPlaybackMethods","_unprocessedFrames","_syncPromise","_syncCancel","mediasource","html5","webaudio","_icecastReadableStream","playStream","fetchStream","res","readIcecastResponse","switchStream","instance","abort","AbortController","fetch","method","signal","ok","status","codecHeaderPromise","codecPromise","args","appendedFrames","icecastPromise","_buildPlayer","_syncPlayer","delayTimeoutId","complete","canceled","playerStarted","oldPlayer","oldIcecastMetadataQueue","oldCodecUpdateQueue","startNewPlayer","handleSyncEvent","stoppingHandler","firstMethod","values","support","EventClass","EventTarget","playerFactory","playerResetPromise","events","onAudioPause","onAudioPlay","onPlayReady","onAudioError","onAudioWaiting","stopPlayback","endPlayback","retryAttempt","retryTimeoutId","IcecastMetadataPlayer","currentEndpoints","urls","newOptions","sort","random","onPlay","onLoad","onStreamStart","onBuffer","onStreamEnd","onStop","onRetry","onRetryTimeout","onSwitch","onWarn","stop","pause","play","code","audio","_state","CustomEvent","detachAudioElement","streamEnd","tryFetching","stack","switchEndpoint","newEndpoints","min","audioWaiting","detail","consoleFunction","callback","audioCtxErrorHandler","unlock","audioCtx","latencyHint","resume","createScriptProcessor","onstatechange"],"sourceRoot":""}