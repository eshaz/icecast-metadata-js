{"version":3,"file":"icecast-metadata-player-1.17.13.synaudio.min.js","mappings":"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","sources":["webpack://IcecastMetadataPlayer/./node_modules/simple-yenc/dist/esm.js","webpack://IcecastMetadataPlayer/./node_modules/@eshaz/web-worker/cjs/browser.js","webpack://IcecastMetadataPlayer/./node_modules/synaudio/src/SynAudio.js","webpack://IcecastMetadataPlayer/./node_modules/synaudio/index.js"],"sourcesContent":["const t=(t,n=4294967295,e=79764919)=>{const r=new Int32Array(256);let o,s,i,c=n;for(o=0;o<256;o++){for(i=o<<24,s=8;s>0;--s)i=2147483648&i?i<<1^e:i<<1;r[o]=i}for(o=0;o<t.length;o++)c=c<<8^r[255&(c>>24^t[o])];return c},n=t=>{const n=[];for(const e of t){let t=(e+42)%256;0===t||10===t||13===t||61===t?n.push(\"=\"+String.fromCharCode((t+64)%256)):n.push(String.fromCharCode(t))}return n.join(\"\")},e=(n,e=t)=>{const r=t=>new Uint8Array(t.length/2).map(((n,e)=>parseInt(t.substring(2*e,2*(e+1)),16))),o=t=>r(t)[0],s=new Map;[,8364,,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,,381,,,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,,382,376].forEach(((t,n)=>s.set(t,n)));const i=new Uint8Array(n.length);let c,a,l,f=!1,g=0,h=42,p=n.length>13&&\"dynEncode\"===n.substring(0,9),u=0;p&&(u=11,a=o(n.substring(9,u)),a<=1&&(u+=2,h=o(n.substring(11,u))),1===a&&(u+=8,l=(t=>new DataView(r(t).buffer).getInt32(0,!0))(n.substring(13,u))));const d=256-h;for(let t=u;t<n.length;t++)if(c=n.charCodeAt(t),61!==c||f){if(92===c&&t<n.length-5&&p){const e=n.charCodeAt(t+1);117!==e&&85!==e||(c=parseInt(n.substring(t+2,t+6),16),t+=5)}if(c>255){const t=s.get(c);t&&(c=t+127)}f&&(f=!1,c-=64),i[g++]=c<h&&c>0?c+d:c-h}else f=!0;const m=i.subarray(0,g);if(p&&1===a){const t=e(m);if(t!==l){const n=\"Decode failed crc32 validation\";throw console.error(\"`simple-yenc`\\n\",n+\"\\n\",\"Expected: \"+l+\"; Got: \"+t+\"\\n\",\"Visit https://github.com/eshaz/simple-yenc for more information\"),Error(n)}}return m},r=(n,e='\"',r=t,o)=>{const s=(t,n)=>(t%n+n)%n,i=(t,n)=>n.push(String.fromCharCode(61,(t+64)%256)),c=t=>t.map((t=>t.toString(16).padStart(2,\"0\")));let a,l,f=[],g=1/0,h=Array(256).fill(0);if('\"'===e?(l=[0,8,9,10,11,12,13,34,92,61],a=t=>0===t||8===t||9===t||10===t||11===t||12===t||13===t||34===t||92===t||61===t):\"'\"===e?(l=[0,8,9,10,11,12,13,39,92,61],a=t=>0===t||8===t||9===t||10===t||11===t||12===t||13===t||39===t||92===t||61===t):\"`\"===e&&(l=[13,61,96],f=[7,205,231],a=(t,n)=>13===t||36===t&&123===n||61===t||92===t&&(85===n||117===n)||96===t),void 0===o){o=0;for(let t=0;t<n.length;t++){const e=0|n[t];h[e]++;for(let r=0;r<f.length;r++){const o=f[r];s(e-n[t+1]|0,256)===o&&h[e]++}}for(let t=0;t<256;t++){let n=0;for(let e=0;e<l.length;e++)n+=h[s(l[e]-t,256)];n<g&&(g=n,o=t)}}const p=[\"dynEncode\",\"01\",c([o]),...c((t=>{const n=new Uint8Array(4);return new DataView(n.buffer).setInt32(0,t,!0),[...n]})(r(n)))];for(let t=0;t<n.length;t++){const e=(n[t]+o)%256;a(e,(n[t+1]+o)%256)?i(e,p):p.push(String.fromCharCode(e))}return\"\\\\\"===p[p.length-1]&&(p.pop(),i(92,p)),p.join(\"\")},o=t=>t.replace(/[\\\\]/g,\"\\\\\\\\\").replace(/[`]/g,\"\\\\`\").replace(/\\${/g,\"\\\\${\");export{t as crc32,e as decode,r as dynamicEncode,n as encode,o as stringify};\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;","/* Copyright 2022-2023 Ethan Halsall\n    \n    This file is part of synaudio.\n    \n    synaudio is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    synaudio is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport { decode } from \"simple-yenc\";\nimport Worker from \"@eshaz/web-worker\";\n\n// prettier-ignore\nconst simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]))\n\nconst wasmModule = new WeakMap();\nconst wasmHeapBase = new WeakMap();\n\n/* WASM strings are embedded during the build, do not manually edit the below */\n// BEGIN generated variables\nconst simdWasm = String.raw`dynEncode0164283d7f25dÅ×ÑedddereÄnããããããããããdfsegÉÒÚjÑÉÑÓÖÝfdfgfedjleãd¥äìhokfmÇÓÖÖÉÐÅØÉddoÃÃÌÉÅÔÃÆÅ×Égdn&e#inãoâlálàkßf¤¦bcccs¨ddddddT£¨ddddddddof¤f¤f¥f¬qdf¥eÏre\u0011e¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz\u000b¥fØy\u000b¥fØ¥¤ÕÏdÎue¥fØvr\u0011|d¥¤Ïsqg¤soqndf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdsu\u000bvÐfÎ­ufsÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz\u000b¥fØoÎndfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooqvÎqvwÎw¦eà|¶qdopeoe©qddde¥fØqÎ­hãdef¥fØ¥hÏÐdÎ­i¥doe¥h­Ös¦eá¦eç~d¥Îod¥Înd¥tÎp¦çxr\u0011}g¤ây¦dzf¤s©h¤ddadfddy\u000b¥fØfÎadfdaHeaofdf¤x¦hµqdppadfdfpÎadfdaHeaofdx¦lµqdnnadfdfnÎadfdaHeaofdx¦pµqdooadfdfoÎadfdaHeaofdoxzµqeo~´hâziz\u000b¥fØdÎfffdyzà\u000b¥fØdÎfdöfdz¦eèoyzµqdyázwy\u000b¥fØvÎudfg¤fvÎrrfdfuÎtfdöfdrrfhtfhöfhf¥lÎfz¦fáz¦d¶qdooqwÎw¦eà}¶qdoof¤i¥f¬qdi¥eÏfh\u0011h¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz\u000b¥fØy\u000b¥fØ¥¤ÕÏgÎsh¥fØif\u0011|¥dwg¥¤Ïhq¦dg¤hoqngf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdhs\u000biÐfÎ­sfhÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz\u000b¥fØoÎngfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooiqÎqiwÎw¦eà|¶qdopeoh©qdggh¥fØpÎ­hãghi¥fØ¥hÏÐgÎ­i¥doh¥h­Ör¦eá¦eç~g¥Îhg¥Îig¥tÎo¦çxf\u0011}¥dw¦dg¤ây¦dzf¤r©h¤ggadfdgy\u000b¥fØfÎadfdaHeaofdf¤x¦hµqdooadfdfoÎadfdaHeaofdx¦lµqdiiadfdfiÎadfdaHeaofdx¦pµqdhhadfdfhÎadfdaHeaofdoxzµqeo~´hâziz\u000b¥fØgÎfffdyzà\u000b¥fØgÎfdöfdz¦eèoyzµqdyázwy\u000b¥fØqÎsgfg¤fqÎnnfdfsÎvfdöfdnnfhvfhöfhf¥lÎfz¦fáz¦d¶qdoopwÎw¦eà}¶qdoo¥drm¥dfdl¥dfdj\u0011xfâj©h¤¦Ô¦dpeo¦df¤j¥e«h¤dfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz\u000b¥fØdÎfg¤ffd\u001f\u0004f¥hÎfz¦eáz¦d¶qdoo¦df¤j¥e«h¤apddddddddddddddddgfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz\u000b¥fØgÎfg¤ffd\u001f\u0004f¥hÎfz¦eáz¦d¶qdoox¦táj\u001c\u0007\u001a¦dj¥u­qd~aw¦dzgfg¤fadddaIeaJeaHefaddtaIeaJeaHefaddaIeaJeaHefaddaIeaJeaHef¥¤Ïfz¦tàz·qdo¥erx¦uá¦Ôç¦tàoyadaeöaföagöf¤xy»qdxxyá¦h¾hâapddddddddddddddddady\u000b¥fØgÎfaw¦àçzg¤fadfdaIeaJeaHef¥tÎfz¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadµqeyàiyoyázy\u000b¥fØgÎfg¤ffd÷øöf¥hÎfz¦eáz¦d¶qdooj\u001c\u0007\u001aj\u0017§ddä#ö¦dzrh¤awgfg¤ffadddaIeaoddffaddtaIeaodtffaddaIeaodffaddaIeaodf¥¤Ïfz¦tàz·qdooùf¤xz»qdxxzá¦gºhâz\u000b¥fØgÎfaw¦àçyg¤ffadfdaIeaofdf¥tÎfy¦háy¦d¶qdoµqezàizozáyz\u000b¥fØgÎfg¤fffd÷fdf¥hÎfy¦eáy¦d¶qdooejÏhõej«h¤h\u0011|k¥fØo\u0007§ddä£ùx¦uá¦Ôç¦tàlfdk\u0011{\u001fdn¦dg¤\u0006\u001afâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dz¥dfapddddddddddddddddapddddddddddddddddg¤fnÎeadddaIefgÎiadddaJeaHeeaddtaIeiaddtaJeaHeeaddaIeiaddaJeaHeeaddaIeiaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfz¦tàz·qdooy\u000be¥fØdÎifd\u001fadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady\u000b¥fØfaw~¦àç}zg¤fnÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy\u000b¥fØfg¤fnÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØiÎfd\u001f\u0005ø\u001fø\u001f\u0003\u0006\u0007\u001aÄ©hámefdlfdio\u0004noÎn{à|¸qdoof¤k¥e±qdmfdekkÐiÎfhfh­keiÏhf¤j©h¤peo¦dyj¥e«h¤h¥fØdÎfapddddddddddddddddxçyzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxyµqeoe¥fØy\u000b¥fØÎi¥fØÏdÎfxyázg¤ffd\u001f\u0004f¥hÎfz¦eáz¦d¶qdoohk³qdk\u0011|h\u0011e¥fØi¥fØÏdÎo\u0007§ddä£ùx¦uá¦Ôç¦tàlfd\u001fg¤\u0006\u001afâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dzofgpapddddddddddddddddapddddddddddddddddg¤fadddaIepadddaJeaHefaddtaIepaddtaJeaHefaddaIepaddaJeaHefaddaIepaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfp¥¤Ïpz¦tàz·qdooy\u000be¥fØdÎhfd\u001fadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady\u000b¥fØfaw~¦àç}zg¤foÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy\u000b¥fØfg¤foÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØhÎfd\u001f\u0005ø\u001fø\u001f\u0003\u0006\u0007\u001aÄ©hámefdlfdio\u0004o¥hÎo¦eà|¶qdoooo`;\nconst scalarWasm = String.raw`dynEncode0112b0cda4cc\u0012s\u0013\u0012\u0012\u0012\u0013/\u0015r\u0015\u0012r\u0017\u0013r\u001c\u0012\u0014!\u0013\u0015w\u0018w\u0014\u0012\u0014\u0015\u0016\u0015\u0012\u0013\u0014\u0018\u001a\u0013\u0012S\u0016\u001d\u0019-\u0014\u001buw~sw\u0012\u0014\u001dqqzwsqtsw\u0015\u0012\u001cå$\u0015­\u0015\u0015\u001a\u0016\u0013\u0014R2\u0014S\u0014Z\u001f\u00122\u0014S\u0013}3\u00142\u0013T\u0017k\u0016R2\u0013T\u00163\u001e2\u0013¹S\u00143\u001b2\u0014¿3\u001f2\u0012S\"|4\u001a3\u0018\u0015R2\u00183\u00152\u001a3\u00162\u00123\u0014T\u00123\u001d\u0015R2\u00142\u0014<\u0014\u00122\u00142\u001c|4\u0017<\u0014\u0012¤J\u0014\u00122\u00142\u0014<\u0014\u00162\u0017<\u0014\u0016¤J\u0014\u00162\u00142\u0014<\u0014\u001a2\u0017<\u0014\u001a¤J\u0014\u001a2\u00142\u0014<\u0014\u001e2\u0017<\u0014\u001e¤J\u0014\u001e2\u00154\u0019S\"|3\u00152\u00164\u0017S\"|3\u00162\u0014S\"|3\u00142\u001dT\u00164\u001d2\u001ee\u001f\u0012\u001d2\u00132\u001dg\u0016R\u0015R2\u00172\u0017<\u0014\u00122\u0019<\u0014\u0012¤J\u0014\u00122\u0019S\u0016|3\u00192\u0017S\u0016|3\u00172\u00132\u001dT\u00134\u001dg\u001f\u0012\u001d\u001d2\u00182\u001b|3\u00182\u001b2\u001c|3\u001c2\u001f2 T\u00134 d\u001f\u0012\u001d\u001e\u0013\u001d2\u0013T\u0012i\u001f\u00122\u0013¹S\u00143\u00152\u0012<\u0014\u00123!2\u0014¿3\u001d2\u00123\u0014\u0015R2\u00122!2\u0014<\u0014\u0012¤4!J\u0014\u0012\u0014R2\u0013T\u0013c\u001f\u00122\u00122\u0012<\u0014\u00162\u0014<\u0014\u0016¤J\u0014\u00162\u0013T\u0014c\u001f\u00122\u00122\u0012<\u0014\u001a2\u0014<\u0014\u001a¤J\u0014\u001a2\u0013T\u0015c\u001f\u00122\u00122\u0012<\u0014\u001e2\u0014<\u0014\u001e¤J\u0014\u001e\u001d2\u00142\u0015|3\u00142\u001dT\u00134\u001dT\u0012d\u001f\u0012\u001d\u001d\u001d \u0015\u0015\u0015\u0015\u0018\u0014R2\u00164\u0017T\u0017e\u0016T\u0012\u00172\u0017T\u00163\u00162\u0017T\u00173\u0018\u0015R2\u00122\u001a|4\u001b<\u0014\u00122\u0014¥4\u001d2\u00132\u001a|4\u001c<\u0014\u0012¦2\u001e¤2\u001b<\u0014\u00162\u0014¥4 2\u001c<\u0014\u0016¦¤2\u001b<\u0014\u001a2\u0014¥4!2\u001c<\u0014\u001a¦¤2\u001b<\u0014\u001e2\u0014¥4\"2\u001c<\u0014\u001e¦¤3\u001e2\u001d2\u001d¦2\u001f¤2 2 ¦¤2!2!¦¤2\"2\"¦¤3\u001f2\u001aS\"|3\u001a2\u0019T\u00164\u00192\u0016e\u001f\u0012\u001d2\u0018TT\u0016\u001d4\u00162\u0017k\u001f\u00122\u00172\u0016T\u0013b\u00162\u0016\u00172\u00122\u0016¹S\u00144\u001a|<\u0014\u00122\u0014¥4\u001d2\u00132\u001a|<\u0014\u0012¦2\u001e¤3\u001e2\u001d2\u001d¦2\u001f¤3\u001f2\u0016T\u0013\u001d3\u00182\u0017T\u00132\u0016c\u001f\u00122\u00172\u00183\u00192\u00122\u0018¹S\u00144\u0012|3\u001a2\u00122\u0013|3\u0012\u0015R2\u001a<\u0014\u00162\u0014¥4\u001d2\u001d¦2\u001a<\u0014\u00122\u0014¥4 2 ¦2\u001f¤¤3\u001f2\u001d2\u0012<\u0014\u0016¦2 2\u0012<\u0014\u0012¦2\u001e¤¤3\u001e2\u001aS\u001a|3\u001a2\u0012S\u001a|3\u00122\u0019T\u00144\u0019T\u0012d\u001f\u0012\u001d\u001d2\u001e2\u0017ÆU\u0012\u0012Ñ¤4\u0014§Í2\u001f2\u0014§Í±2\u0015Í´µÈ\u001dµ\u001e\u0016\u0018\u0016\u0019\u0014\u0014RT\u000e\u0011\u0011\u0011!3!V\u0012\u0012\u0012\u0012\u0012\u0012\u0002Q3+V\u0012\u0012\u0012\u0012\u0012\u0012\u0012\u00123,\u001d\u0014R2\u00122\u0013¿2\u0014\"\u00122\u00152\u0016¿2\u0017\"\u0012S\u00123\u00162\u001bS\u0012H\u0014\u00122\u001aS\u0012H\u0014\u00122\u0018¿3 \u00142\u0018W\u0016RT3\u001eT\u0012\u001e\u0013\u001d2 T\u00153\u001c2\u0018S\u0016a\u0016R2\u00123\u00142 2!4\u001d3\u001e\u0015R2&2\u0014<\u0014\u0012Í²2\u0014<\u0014\u0016Í²2\u0014<\u0014\u001aÍ²2\u0014<\u0014\u001eÍ²3&2\u0014S\"|3\u00142\u001eT\u00164\u001eT\u0012d\u001f\u0012\u001d\u001d2\u001cb4\u0017W\u0016R2\u001d¹S\u00142\u0012|3\u00142\u001c3\u001e\u0015R2&2\u0014<\u0014\u0012Í²3&2\u0014S\u0016|3\u00142\u001eT\u00134\u001eT\u0012d\u001f\u0012\u001d\u001d\u0014R2\u0018S\u0016[\u0016RT\u00123\u001d\u001e\u0013\u001d2\u00153\u00142 2!4\u001d3\u001e\u0015R2'2\u0014<\u0014\u0012Í²2\u0014<\u0014\u0016Í²2\u0014<\u0014\u001aÍ²2\u0014<\u0014\u001eÍ²3'2\u0014S\"|3\u00142\u001eT\u00164\u001eT\u0012d\u001f\u0012\u001d\u001d2\u0017W\u0016R2\u001d¹S\u00142\u0015|3\u0014\u0015R2'2\u0014<\u0014\u0012Í²3'2\u0014S\u0016|3\u00142\u001cT\u00134\u001cT\u0012d\u001f\u0012\u001d\u001d2 T\u00163\u001e2\u0018Å3%T\u00122\u0018S\u0017[\u001f\u0012,2'È2%§3\"T\u00123\u001c2\u00153\u0014\u0015R2\u0014<\u0014\u00122\"¥4$2$¦2#¤2\u0014<\u0014\u00162\"¥4#2#¦¤2\u0014<\u0014\u001a2\"¥4#2#¦¤2\u0014<\u0014\u001e2\"¥4#2#¦¤3#2\u0014S\"|3\u00142\u001cT\u00164\u001c2\u001ee\u001f\u0012\u001dS\u00133\u00162 T\u0017TT\u0016\u001d3\u001d2'2\u0018Ê4'µÈ3\"\u0014R2\u001d2 k\u001f\u00122 2\u001dT\u00154\u001fb\u00162\u001d\u00172\u001d¹S\u00142\u0015|3\u00142\u001f3\u001c\u0015R2\u0014<\u0014\u00122\"¥4$2$¦2#¤3#2\u0014S\u0016|3\u00142\u001cT\u00134\u001cT\u0012d\u001f\u0012\u001d2\u001d2\u001f\u001d3\u001c2\u001d2 Th\u001f\u00122 2\u001c3\u001c2\u00182\u001d¹4\u0014}S\u00152\u0014|S\u00142\u0015|3\u0014\u0015R2\u0014<\u0014\u001e2\"¥4$2$¦2\u0014<\u0014\u001a2\"¥4$2$¦2\u0014<\u0014\u00162\"¥4$2$¦2\u0014<\u0014\u00122\"¥4$2$¦2#¤¤¤¤3#2\u0014S\"|3\u00142\u001cT\u00164\u001cT\u0012d\u001f\u0012\u001d\u001d2%U\u0012\u0012Ñ¤3%T\u00123\u001c2\u0016\u0016R2\u00153\u0014\u0015R2\u00142\u0014<\u0014\u00122\"¥J\u0014\u00122\u00142\u0014<\u0014\u00162\"¥J\u0014\u00162\u00142\u0014<\u0014\u001a2\"¥J\u0014\u001a2\u00142\u0014<\u0014\u001e2\"¥J\u0014\u001e2\u0014S\"|3\u00142\u001cT\u00164\u001c2\u001ee\u001f\u0012\u001d\u001d2#2%§3#\u0014R2\u001c2 k\u001f\u00122\u001c3\u001d2 2\u001cT\u00154\u001ebW\u0016R2\u001c2\u001e3\u001d2\u001c¹S\u00142\u0015|3\u0014\u0015R2\u00142\u0014<\u0014\u00122\"¥J\u0014\u00122\u0014S\u0016|3\u00142\u001eT\u00134\u001eT\u0012d\u001f\u0012\u001d\u001d2\u001c2 Th\u001f\u00122 2\u001d3\u001c2\u001d¹S\u00142\u0015|3\u0014\u0015R2\u00142\u0014<\u0014\u00122\"¥J\u0014\u00122\u00142\u0014<\u0014\u00162\"¥J\u0014\u00162\u00142\u0014<\u0014\u001a2\"¥J\u0014\u001a2\u00142\u0014<\u0014\u001e2\"¥J\u0014\u001e2\u0014S\"|3\u00142\u001cT\u00164\u001cT\u0012d\u001f\u0012\u001d\u001d2\u00132\u0018}3-2#£3\"S\u00123\u00172\u00132\u0018Y\u0016R2-¿3\u001d2\u0018S\u00143\u00132\u0019S\u00143.2+2'µ3(2\u0019¿3\u001eT\u00123\u001cS\u00123\u00162\u00123\u0014\u0015R2&2\u0014<\u0014\u0012Í³3)2\u00132\u0014|<\u0014\u0012Í3*2\u001a<\u0014\u00123#2\u00142\u00152&2(´È2\"2 \"\u00134%2#qW\u00162\u001b2\u0016H\u0014\u00122\u001a2%J\u0014\u00122\u0016\u00172\u0017\u001d3\u00172)2*²3&2\u00142.|3\u00142\u00162\u0019|3\u00162\u001c2\u001e4\u001c2\u001df\u001f\u0012\u001d\u001d\u0014R2\u0019S\u0013_\u001f\u00122\u00172\u00192\u0019~4\u0013|4\u00142-2\u00142-[-3\u00192\u00172\u0013}3\u0016\u0014R2\u0018W\u0016R2,3&\u001e\u0013\u001d2 T\u00153\u001c\u0014R2\u0018S\u0016[\u0016R2,3&T\u00123\u001d\u001e\u0013\u001d2\u0016S\u00142\u0012|3\u00142,3&2 2!4\u001d3\u001e\u0015R2&2\u0014<\u0014\u0012Í²2\u0014<\u0014\u0016Í²2\u0014<\u0014\u001aÍ²2\u0014<\u0014\u001eÍ²3&2\u0014S\"|3\u00142\u001eT\u00164\u001eT\u0012d\u001f\u0012\u001d\u001d2\u001cb\u001f\u00122\u0017S\u00142\u001d¹S\u0014|2\u0013S\u0014}2\u0012|3\u0014\u0015R2&2\u0014<\u0014\u0012Í²3&2\u0014S\u0016|3\u00142\u001cT\u00134\u001cT\u0012d\u001f\u0012\u001d\u001d2\u00162\u0019a\u001f\u00122\u0017S\u00142\u0013S\u0014}2\u0012|3\u00142\u0018S\u00143\u00122\u0019¿2\u0016¿3\u001c2+2'µ3'\u0015R2&2\u0014<\u0014\u0012Í³3(2\u00122\u0014|<\u0014\u0012Í3)2\u001a<\u0014\u00123#2\u00142\u00152&2'´È2\"2 \"\u00134%2#qW\u0016R2\u001b2\u0016H\u0014\u00122\u001a2%J\u0014\u0012\u001d2(2)²3&2\u0014S\u0016|3\u00142\u0016S\u0013|3\u00162\u001cT\u00134\u001cT\u0012d\u001f\u0012\u001d\u001d\u001d\u001d`;\nconst sharedWasm = String.raw`dynEncode01643fb3d24fdÅ×ÑedddereÄnããããããããããdfvegÉÒÚjÑÉÑÓÖÝfgfäähgfedjleãd¥äìhokfmÇÓÖÖÉÐÅØÉddoÃÃÌÉÅÔÃÆÅ×Égdn&e#inãoâlálàkßf¤¦bcccs¨ddddddT£¨ddddddddof¤f¤f¥f¬qdf¥eÏre\u0011e¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz\u000b¥fØy\u000b¥fØ¥¤ÕÏdÎue¥fØvr\u0011|d¥¤Ïsqg¤soqndf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdsu\u000bvÐfÎ­ufsÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz\u000b¥fØoÎndfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooqvÎqvwÎw¦eà|¶qdopeoe©qddde¥fØqÎ­hãdef¥fØ¥hÏÐdÎ­i¥doe¥h­Ös¦eá¦eç~d¥Îod¥Înd¥tÎp¦çxr\u0011}g¤ây¦dzf¤s©h¤ddadfddy\u000b¥fØfÎadfdaHeaofdf¤x¦hµqdppadfdfpÎadfdaHeaofdx¦lµqdnnadfdfnÎadfdaHeaofdx¦pµqdooadfdfoÎadfdaHeaofdoxzµqeo~´hâziz\u000b¥fØdÎfffdyzà\u000b¥fØdÎfdöfdz¦eèoyzµqdyázwy\u000b¥fØvÎudfg¤fvÎrrfdfuÎtfdöfdrrfhtfhöfhf¥lÎfz¦fáz¦d¶qdooqwÎw¦eà}¶qdoof¤i¥f¬qdi¥eÏfh\u0011h¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz\u000b¥fØy\u000b¥fØ¥¤ÕÏgÎsh¥fØif\u0011|¥dwg¥¤Ïhq¦dg¤hoqngf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdhs\u000biÐfÎ­sfhÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz\u000b¥fØoÎngfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooiqÎqiwÎw¦eà|¶qdopeoh©qdggh¥fØpÎ­hãghi¥fØ¥hÏÐgÎ­i¥doh¥h­Ör¦eá¦eç~g¥Îhg¥Îig¥tÎo¦çxf\u0011}¥dw¦dg¤ây¦dzf¤r©h¤ggadfdgy\u000b¥fØfÎadfdaHeaofdf¤x¦hµqdooadfdfoÎadfdaHeaofdx¦lµqdiiadfdfiÎadfdaHeaofdx¦pµqdhhadfdfhÎadfdaHeaofdoxzµqeo~´hâziz\u000b¥fØgÎfffdyzà\u000b¥fØgÎfdöfdz¦eèoyzµqdyázwy\u000b¥fØqÎsgfg¤fqÎnnfdfsÎvfdöfdnnfhvfhöfhf¥lÎfz¦fáz¦d¶qdoopwÎw¦eà}¶qdoo¥drm¥dfdl¥dfdj\u0011xfâj©h¤¦Ô¦dpeo¦df¤j¥e«h¤dfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz\u000b¥fØdÎfg¤ffd\u001f\u0004f¥hÎfz¦eáz¦d¶qdoo¦df¤j¥e«h¤apddddddddddddddddgfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz\u000b¥fØgÎfg¤ffd\u001f\u0004f¥hÎfz¦eáz¦d¶qdoox¦táj\u001c\u0007\u001a¦dj¥u­qd~aw¦dzgfg¤fadddaIeaJeaHefaddtaIeaJeaHefaddaIeaJeaHefaddaIeaJeaHef¥¤Ïfz¦tàz·qdo¥erx¦uá¦Ôç¦tàoyadaeöaföagöf¤xy»qdxxyá¦h¾hâapddddddddddddddddady\u000b¥fØgÎfaw¦àçzg¤fadfdaIeaJeaHef¥tÎfz¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadµqeyàiyoyázy\u000b¥fØgÎfg¤ffd÷øöf¥hÎfz¦eáz¦d¶qdooj\u001c\u0007\u001aj\u0017§ddä#ö¦dzrh¤awgfg¤ffadddaIeaoddffaddtaIeaodtffaddaIeaodffaddaIeaodf¥¤Ïfz¦tàz·qdooùf¤xz»qdxxzá¦gºhâz\u000b¥fØgÎfaw¦àçyg¤ffadfdaIeaofdf¥tÎfy¦háy¦d¶qdoµqezàizozáyz\u000b¥fØgÎfg¤fffd÷fdf¥hÎfy¦eáy¦d¶qdooejÏhõej«h¤h\u0011|k¥fØo\u0007§ddä£ùx¦uá¦Ôç¦tàlfdk\u0011{\u001fdn¦dg¤\u0006\u001afâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dz¥dfapddddddddddddddddapddddddddddddddddg¤fnÎeadddaIefgÎiadddaJeaHeeaddtaIeiaddtaJeaHeeaddaIeiaddaJeaHeeaddaIeiaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfz¦tàz·qdooy\u000be¥fØdÎifd\u001fadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady\u000b¥fØfaw~¦àç}zg¤fnÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy\u000b¥fØfg¤fnÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØiÎfd\u001f\u0005ø\u001fø\u001f\u0003\u0006\u0007\u001aÄ©hámefdlfdio\u0004noÎn{à|¸qdoof¤k¥e±qdmfdekkÐiÎfhfh­keiÏhf¤j©h¤peo¦dyj¥e«h¤h¥fØdÎfapddddddddddddddddxçyzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxyµqeoe¥fØy\u000b¥fØÎi¥fØÏdÎfxyázg¤ffd\u001f\u0004f¥hÎfz¦eáz¦d¶qdoohk³qdk\u0011|h\u0011e¥fØi¥fØÏdÎo\u0007§ddä£ùx¦uá¦Ôç¦tàlfd\u001fg¤\u0006\u001afâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dzofgpapddddddddddddddddapddddddddddddddddg¤fadddaIepadddaJeaHefaddtaIepaddtaJeaHefaddaIepaddaJeaHefaddaIepaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfp¥¤Ïpz¦tàz·qdooy\u000be¥fØdÎhfd\u001fadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady\u000b¥fØfaw~¦àç}zg¤foÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy\u000b¥fØfg¤foÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØhÎfd\u001f\u0005ø\u001fø\u001f\u0003\u0006\u0007\u001aÄ©hámefdlfdio\u0004o¥hÎo¦eà|¶qdoooo`;\nconst simdHeapBase = 66560;\nconst scalarHeapBase = 66560;\nconst sharedHeapBase = 66560;\n// END generated variables\n\nexport default class SynAudio {\n  constructor(options = {}) {\n    this._correlationSampleSize =\n      options.correlationSampleSize > 0 ? options.correlationSampleSize : 11025;\n    this._initialGranularity =\n      options.initialGranularity > 0 ? options.initialGranularity : 16;\n    this._correlationThreshold =\n      options.correlationThreshold >= 0 ? options.correlationThreshold : 0.5;\n    this._useSharedMemory = options.shared === true ? true : false;\n\n    this._module = wasmModule.get(SynAudio);\n    this._heapBase = wasmHeapBase.get(SynAudio);\n    if (!this._module) {\n      if (this._useSharedMemory) {\n        this._module = WebAssembly.compile(decode(sharedWasm));\n        this._heapBase = Promise.resolve(sharedHeapBase);\n      } else {\n        this._module = simd().then((simdSupported) =>\n          simdSupported\n            ? WebAssembly.compile(decode(simdWasm))\n            : WebAssembly.compile(decode(scalarWasm)),\n        );\n        this._heapBase = simd().then((simdSupported) =>\n          simdSupported ? simdHeapBase : scalarHeapBase,\n        );\n      }\n      wasmModule.set(this._module);\n      wasmHeapBase.set(this._heapBase);\n    }\n\n    this.SynAudioWorker = function SynAudioWorker(\n      module,\n      heapBase,\n      useSharedMemory,\n      correlationSampleSize,\n      initialGranularity,\n    ) {\n      this._sourceCache = new Map();\n\n      // correlation sample size must not exceed the size of each audio clip\n      this._getCorrelationSampleSize = (a, b) =>\n        Math.min(\n          a.samplesDecoded,\n          b.samplesDecoded,\n          this._correlationSampleSize,\n        );\n\n      // initial granularity must not exceed the size of each audio clip\n      this._getInitialGranularity = (a, b) =>\n        Math.min(a.samplesDecoded, b.samplesDecoded, this._initialGranularity);\n\n      this._setAudioDataOnHeap = (input, memory, heapPos) => {\n        const output = new Float32Array(memory.buffer);\n        let floatPos = heapPos / this._floatByteLength;\n\n        // copy each channel\n        for (let i = 0; i < input.length; i++) {\n          heapPos += input[i].length * this._floatByteLength;\n          output.set(input[i], floatPos);\n          floatPos += input[i].length;\n        }\n\n        return heapPos;\n      };\n\n      /*\n       * Memory Map (starting at heapBase)\n       * float* varyingLength baseData\n       *\n       * for each comparisonData entry:\n       * float* varyingLength comparisonData\n       * float* 4 bytes       bestCorrelation\n       * long*  4 bytes       bestSampleOffset\n       */\n      this._initWasmMemory = (a, bArray, heapBase) => {\n        const aLen =\n          a.samplesDecoded * a.channelData.length * this._floatByteLength;\n        const bArrayLen = bArray.reduce(\n          (acc, b) =>\n            b.data.samplesDecoded *\n              b.data.channelData.length *\n              this._floatByteLength +\n            acc,\n          0,\n        );\n        const bestCorrelationLen = bArray.length * this._floatByteLength;\n        const bestSampleOffsetLen = bArray.length * this._unsignedIntByteLength;\n\n        const memoryPages =\n          4 +\n          (heapBase +\n            aLen +\n            bArrayLen +\n            bestCorrelationLen +\n            bestSampleOffsetLen) /\n            this._pageSize;\n\n        return new WebAssembly.Memory({\n          initial: memoryPages,\n          maximum: memoryPages,\n          shared: this._useSharedMemory,\n        });\n      };\n\n      this._setBaseAudioOnHeap = (a, memory, aPtr) => {\n        const nextPtr = this._setAudioDataOnHeap(a.channelData, memory, aPtr);\n        return [aPtr, nextPtr];\n      };\n\n      this._setComparisonAudioOnHeap = (b, memory, bPtr) => {\n        const bestCorrelationPtr = this._setAudioDataOnHeap(\n          b.channelData,\n          memory,\n          bPtr,\n        );\n        const bestSampleOffsetPtr = bestCorrelationPtr + this._floatByteLength;\n        const nextPtr = bestSampleOffsetPtr + this._floatByteLength;\n        return [bPtr, bestCorrelationPtr, bestSampleOffsetPtr, nextPtr];\n      };\n\n      this._executeAsWorker = (functionName, params) => {\n        let source = this._sourceCache.get(functionName);\n\n        if (!source) {\n          let type = \"text/javascript\",\n            isNode,\n            webworkerSourceCode =\n              \"'use strict';\" +\n              `(${((\n                SynAudioWorker,\n                functionName,\n                useSharedMemory,\n                correlationSampleSize,\n                initialGranularity,\n              ) => {\n                self.onmessage = (msg) => {\n                  const worker = new SynAudioWorker(\n                    Promise.resolve(msg.data.module),\n                    Promise.resolve(msg.data.heapBase),\n                    useSharedMemory,\n                    correlationSampleSize,\n                    initialGranularity,\n                  );\n\n                  worker._workerMethods\n                    .get(functionName)\n                    .apply(null, msg.data.params)\n                    .then((results) => {\n                      self.postMessage(results);\n                    });\n                };\n              }).toString()})(${SynAudioWorker.toString()}, \"${functionName}\", ${this._useSharedMemory}, ${\n                this._correlationSampleSize\n              }, ${this._initialGranularity})`;\n\n          try {\n            isNode = typeof process.versions.node !== \"undefined\";\n          } catch {}\n\n          source = isNode\n            ? `data:${type};base64,${Buffer.from(webworkerSourceCode).toString(\n                \"base64\",\n              )}`\n            : URL.createObjectURL(new Blob([webworkerSourceCode], { type }));\n\n          this._sourceCache.set(functionName, source);\n        }\n\n        const worker = new (globalThis.Worker || Worker)(source, {\n          name: \"SynAudio\",\n        });\n\n        const result = new Promise((resolve) => {\n          worker.onmessage = (message) => {\n            worker.terminate();\n            resolve(message.data);\n          };\n        });\n\n        Promise.all([this._module, this._heapBase]).then(\n          ([module, heapBase]) => {\n            worker.postMessage({\n              module,\n              heapBase,\n              params,\n            });\n          },\n        );\n\n        return result;\n      };\n\n      this._runCorrelate = (\n        memory,\n        aPtr,\n        aSamplesDecoded,\n        aChannelDataLength,\n        bPtr,\n        bSamplesDecoded,\n        bChannelDataLength,\n        correlationSampleSize,\n        initialGranularity,\n        bestCorrelationPtr,\n        bestSampleOffsetPtr,\n      ) => {\n        return this._module\n          .then((module) =>\n            WebAssembly.instantiate(module, {\n              env: { memory },\n            }),\n          )\n          .then(({ exports }) => {\n            const instanceExports = new Map(Object.entries(exports));\n\n            const correlate = instanceExports.get(\"correlate\");\n            const heapView = new DataView(memory.buffer);\n\n            correlate(\n              aPtr,\n              aSamplesDecoded,\n              aChannelDataLength,\n              bPtr,\n              bSamplesDecoded,\n              bChannelDataLength,\n              correlationSampleSize,\n              initialGranularity,\n              bestCorrelationPtr,\n              bestSampleOffsetPtr,\n            );\n\n            const bestCorrelation = heapView.getFloat32(\n              bestCorrelationPtr,\n              true,\n            );\n            const bestSampleOffset = heapView.getUint32(\n              bestSampleOffsetPtr,\n              true,\n            );\n\n            return {\n              correlation: bestCorrelation,\n              sampleOffset: bestSampleOffset,\n            };\n          });\n      };\n\n      this._sync = (a, b) => {\n        return this._heapBase.then((heapBase) => {\n          const memory = this._initWasmMemory(a, [{ data: b }], heapBase);\n\n          let aPtr, bPtr, bestCorrelationPtr, bestSampleOffsetPtr, heapPosition;\n          [aPtr, heapPosition] = this._setBaseAudioOnHeap(a, memory, heapBase);\n          [bPtr, bestCorrelationPtr, bestSampleOffsetPtr, heapPosition] =\n            this._setComparisonAudioOnHeap(b, memory, heapPosition);\n\n          const correlationSampleSize = this._getCorrelationSampleSize(a, b);\n          const initialGranularity = this._getInitialGranularity(a, b);\n\n          return this._runCorrelate(\n            memory,\n            aPtr,\n            a.samplesDecoded,\n            a.channelData.length,\n            bPtr,\n            b.samplesDecoded,\n            b.channelData.length,\n            correlationSampleSize,\n            initialGranularity,\n            bestCorrelationPtr,\n            bestSampleOffsetPtr,\n          );\n        });\n      };\n\n      this._syncOneToMany = (\n        a,\n        bArray,\n        threads = 1,\n        onProgressUpdate = () => {},\n      ) => {\n        return this._heapBase.then((heapBase) => {\n          const memory = this._initWasmMemory(a, bArray, heapBase);\n\n          // build the parameters, copy the data to the heap\n          let aPtr, bPtr, bestCorrelationPtr, bestSampleOffsetPtr, heapPosition;\n          [aPtr, heapPosition] = this._setBaseAudioOnHeap(a, memory, heapBase);\n\n          const syncParameters = bArray.map((b) => {\n            [bPtr, bestCorrelationPtr, bestSampleOffsetPtr, heapPosition] =\n              this._setComparisonAudioOnHeap(b.data, memory, heapPosition);\n\n            const correlationSampleSize = this._getCorrelationSampleSize(\n              a,\n              b.data,\n            );\n            const initialGranularity = this._getInitialGranularity(a, b.data);\n\n            // optionally set boundaries for the base data\n            let syncStart = b.syncStart || 0;\n            let syncEnd = b.syncEnd || a.samplesDecoded;\n            if (syncEnd - syncStart < b.data.samplesDecoded) {\n              syncStart = 0;\n              syncEnd = a.samplesDecoded;\n            }\n\n            const baseOffset = Math.min(\n              a.samplesDecoded,\n              Math.max(0, syncStart),\n            );\n            const baseSampleLength = Math.min(\n              a.samplesDecoded,\n              Math.max(0, syncEnd),\n            );\n\n            const params = [\n              memory,\n              aPtr + baseOffset * a.channelData.length * this._floatByteLength,\n              baseSampleLength - baseOffset,\n              a.channelData.length,\n              bPtr,\n              b.data.samplesDecoded,\n              b.data.channelData.length,\n              correlationSampleSize,\n              initialGranularity,\n              bestCorrelationPtr,\n              bestSampleOffsetPtr,\n            ];\n            return [params, baseOffset, b.name];\n          });\n\n          a = null;\n          bArray = null;\n\n          // start tasks concurrently, limiting the number of threads\n          let taskIndex = 0;\n          let activeCount = 0;\n          let doneCount = 0;\n          const results = new Array(syncParameters.length);\n          const running = [];\n\n          return new Promise((resolve, reject) => {\n            onProgressUpdate(0);\n            const runNext = () => {\n              // All tasks have been started\n              if (taskIndex >= syncParameters.length) {\n                if (activeCount === 0) resolve(results);\n                return;\n              }\n\n              // Start a new task\n              const currentIndex = taskIndex++;\n              activeCount++;\n\n              const promise = this._executeAsWorker(\n                \"_runCorrelate\",\n                syncParameters[currentIndex][0],\n              )\n                .then((result) => {\n                  result.sampleOffset += syncParameters[currentIndex][1];\n                  result.name = syncParameters[currentIndex][2];\n                  results[currentIndex] = result;\n                })\n                .catch(reject)\n                .finally(() => {\n                  activeCount--;\n                  doneCount++;\n                  onProgressUpdate(doneCount / results.length);\n                  runNext(); // Start the next task\n                });\n\n              running.push(promise);\n\n              // If we haven't reached the limit, start another one\n              if (activeCount < threads) runNext();\n            };\n\n            runNext();\n          });\n        });\n      };\n\n      this._syncWorkerConcurrent = (a, b, threads) => {\n        const promises = [];\n        const lengths = [0];\n\n        // |-----------|       |-----------|     \"end\"\n        // \"start\"   |-|---------|       |-----------|\n        //           | |\n        //           | |correlationSampleSize\n\n        // split a buffer into equal chunks for threads\n        // overlap at the start of the buffer by correlation sample size\n        // overlap at the end of the buffer by correlation sample size\n\n        // initial granularity  low -> high, more -> less threads\n        // correlation sample   low -> high, less -> more threads\n        // file size            low -> high, less -> more threads\n\n        const correlationSampleSize = this._getCorrelationSampleSize(a, b);\n\n        // rough estimate for a good max thread count for performance\n        const maxThreads =\n          (Math.log(a.samplesDecoded * correlationSampleSize) /\n            Math.log(this._initialGranularity + 1)) *\n          Math.log(correlationSampleSize / 10000 + 1);\n\n        threads = Math.max(\n          Math.round(\n            Math.min(\n              threads,\n              maxThreads,\n              a.samplesDecoded / correlationSampleSize / 4,\n            ),\n          ),\n          1,\n        );\n\n        const aLength = Math.ceil(a.samplesDecoded / threads);\n\n        let offset = 0;\n        for (let t = 0; t < threads; t++) {\n          const aSplit = {\n            channelData: [],\n          };\n\n          for (let i = 0; i < a.channelData.length; i++) {\n            const cutChannel = a.channelData[i].subarray(\n              offset,\n              offset + aLength + correlationSampleSize,\n            );\n            aSplit.channelData.push(cutChannel);\n            aSplit.samplesDecoded = cutChannel.length;\n          }\n\n          offset += aLength - correlationSampleSize;\n          lengths.push(offset);\n\n          promises.push(this._syncWorker(aSplit, b));\n        }\n\n        return Promise.all(promises).then((results) => {\n          // find the result with the highest correlation and calculate the offset relative to the input data\n          let bestResultIdx = 0;\n          let bestCorrelation = -1;\n          for (let i = 0; i < results.length; i++)\n            if (results[i].correlation > bestCorrelation) {\n              bestResultIdx = i;\n              bestCorrelation = results[i].correlation;\n            }\n\n          return {\n            correlation: results[bestResultIdx].correlation,\n            sampleOffset:\n              results[bestResultIdx].sampleOffset + lengths[bestResultIdx],\n          };\n        });\n      };\n\n      this._syncWorker = (a, b) => {\n        return this._executeAsWorker(\"_sync\", [a, b]);\n      };\n\n      this._syncWorkerConcurrentMain = (a, b, threads) => {\n        // can't serialize the webworker polyfill in nodejs\n        return globalThis.Worker\n          ? this._executeAsWorker(\"_syncWorkerConcurrent\", [a, b, threads])\n          : this._syncWorkerConcurrent(a, b, threads);\n      };\n\n      // constructor\n\n      // needed to serialize minified code when methods are referenced as a string\n      // prettier-ignore\n      this._workerMethods = new Map([\n        [\"_sync\", this._sync],\n        [\"_runCorrelate\", this._runCorrelate],\n        [\"_syncOneToMany\", this._syncOneToMany],\n        [\"_syncWorker\", this._syncWorker],\n        [\"_syncWorkerConcurrent\", this._syncWorkerConcurrent],\n      ]);\n\n      this._module = module;\n      this._heapBase = heapBase;\n      this._useSharedMemory = useSharedMemory;\n      this._correlationSampleSize = correlationSampleSize;\n      this._initialGranularity = initialGranularity;\n\n      this._pageSize = 64 * 1024;\n      this._floatByteLength = Float32Array.BYTES_PER_ELEMENT;\n      this._unsignedIntByteLength = Uint32Array.BYTES_PER_ELEMENT;\n    };\n\n    this._instance = new this.SynAudioWorker(\n      this._module,\n      this._heapBase,\n      this._useSharedMemory,\n      this._correlationSampleSize,\n      this._initialGranularity,\n    );\n  }\n\n  async syncWorkerConcurrent(a, b, threads) {\n    return this._instance._syncWorkerConcurrentMain(\n      a,\n      b,\n      threads >= 1 ? threads : 1,\n    );\n  }\n\n  async syncWorker(a, b) {\n    return this._instance._syncWorker(a, b);\n  }\n\n  async sync(a, b) {\n    return this._instance._sync(a, b);\n  }\n\n  async syncOneToMany(a, bArray, threads, onProgressUpdate) {\n    const result = this._instance._syncOneToMany(\n      a,\n      bArray,\n      threads,\n      onProgressUpdate,\n    );\n    a = null;\n    bArray = null;\n    return result;\n  }\n\n  async syncMultiple(clips, threads) {\n    threads = threads >= 1 ? threads : 8;\n\n    const workers = [];\n    const graph = [];\n\n    let notify = () => {},\n      wait = Promise.resolve(),\n      runningThreads = 0;\n\n    const resetNotify = () => {\n      wait = new Promise((resolve) => {\n        notify = resolve;\n      });\n    };\n\n    for (let i = 0; i < clips.length; i++) graph.push({ vertex: {} });\n\n    for (let v = 0; v < clips.length; v++) {\n      const vertexClip = clips[v];\n      const vertex = graph[v].vertex;\n\n      vertex.name = vertexClip.name;\n      vertex.samplesDecoded = vertexClip.data.samplesDecoded;\n      vertex.edges = new Set();\n\n      for (let e = 0; e < clips.length; e++) {\n        if (v === e) continue;\n\n        const edgeClip = clips[e];\n        const edge = graph[e];\n\n        runningThreads++;\n        workers.push(\n          this.syncWorker(vertexClip.data, edgeClip.data).then(\n            (correlationResult) => {\n              if (correlationResult.correlation > this._correlationThreshold) {\n                vertex.edges.add({\n                  parent: vertex,\n                  vertex: edge.vertex,\n                  samplesDecoded: edgeClip.data.samplesDecoded,\n                  ...correlationResult,\n                });\n              }\n              runningThreads--;\n              notify();\n            },\n          ),\n        );\n\n        if (runningThreads >= threads) {\n          resetNotify();\n          await wait;\n        }\n      }\n    }\n\n    await Promise.all(workers);\n\n    // prettier-ignore\n    const weighResults = (a, b) => {\n      if (a.parent && b.parent && a.parent.samplesDecoded !== b.parent.samplesDecoded) return a.parent.samplesDecoded > b.parent.samplesDecoded;\n      if (a.correlation !== b.correlation) return a.correlation > b.correlation;\n      if (a.sampleOffset !== b.sampleOffset) return a.sampleOffset > b.sampleOffset;\n      return a.vertex && b.vertex && a.vertex.name.localeCompare(b.vertex.name) < 0;\n    };\n\n    // detect cycles and weigh for which edge to remove\n    const path = new Map();\n    const cycles = new Set();\n\n    const detectCycle = (vertex) => {\n      for (const edge of vertex.edges.values()) {\n        if (path.has(vertex)) return path.get(vertex);\n\n        path.set(vertex, edge);\n\n        const cycleStartEdge = detectCycle(edge.vertex);\n        const cycleEndEdge = edge;\n\n        if (cycleStartEdge) {\n          let keep, remove;\n          if (weighResults(cycleStartEdge, cycleEndEdge)) {\n            keep = cycleStartEdge;\n            remove = cycleEndEdge;\n          } else {\n            keep = cycleEndEdge;\n            remove = cycleStartEdge;\n          }\n\n          if (!remove.cycleWith) {\n            remove.cycleWith = new Set();\n            cycles.add(remove);\n          }\n\n          remove.cycleWith.add(keep);\n\n          if (keep.cycleWith) {\n            keep.cycleWith.delete(remove);\n          }\n        }\n\n        path.delete(vertex);\n      }\n    };\n\n    for (const { vertex } of graph) detectCycle(vertex);\n\n    // delete any cycles\n    for (const edge of cycles)\n      if (edge.cycleWith.size) edge.parent.edges.delete(edge);\n\n    // find the root elements\n    const roots = new Set();\n    for (const v of graph) roots.add(v.vertex);\n    for (const v of graph)\n      for (const edge of v.vertex.edges) roots.delete(edge.vertex);\n\n    // build a unique sequence of matches for each root\n    const traverseRoot = (path, root, edges, sampleOffsetFromRoot = 0) => {\n      for (const edge of edges) {\n        if (\n          !(path.has(edge.vertex) && weighResults(path.get(edge.vertex), edge))\n        )\n          path.set(edge.vertex, {\n            name: edge.vertex.name,\n            correlation: edge.correlation,\n            sampleOffset: sampleOffsetFromRoot + edge.sampleOffset,\n          });\n\n        traverseRoot(\n          path,\n          root,\n          edge.vertex.edges,\n          sampleOffsetFromRoot + edge.sampleOffset,\n        );\n      }\n    };\n\n    const results = [];\n\n    for (const root of roots) {\n      const path = new Map();\n      path.set(root, {\n        name: root.name,\n        sampleOffset: 0,\n      });\n      traverseRoot(path, root, root.edges);\n\n      results.push(\n        [...path.values()].sort(\n          (a, b) =>\n            a.sampleOffset - b.sampleOffset ||\n            (a.correlation || 0) - (b.correlation || 0) ||\n            b.name.localeCompare(a.name),\n        ),\n      );\n    }\n\n    return results;\n  }\n}\n","import SynAudio from \"./src/SynAudio.js\";\n\nexport default SynAudio;\n"],"names":["t","n","e","r","Int32Array","o","s","i","c","length","Uint8Array","map","parseInt","substring","Map","forEach","set","a","l","f","g","h","p","u","DataView","buffer","getInt32","d","charCodeAt","get","m","subarray","console","error","Error","module","exports","Worker","simd","async","WebAssembly","validate","wasmModule","WeakMap","wasmHeapBase","simdWasm","String","raw","scalarWasm","sharedWasm","SynAudio","constructor","options","this","_correlationSampleSize","correlationSampleSize","_initialGranularity","initialGranularity","_correlationThreshold","correlationThreshold","_useSharedMemory","shared","_module","_heapBase","compile","Promise","resolve","then","simdSupported","SynAudioWorker","heapBase","useSharedMemory","_sourceCache","_getCorrelationSampleSize","b","Math","min","samplesDecoded","_getInitialGranularity","_setAudioDataOnHeap","input","memory","heapPos","output","Float32Array","floatPos","_floatByteLength","_initWasmMemory","bArray","memoryPages","channelData","reduce","acc","data","_unsignedIntByteLength","_pageSize","Memory","initial","maximum","_setBaseAudioOnHeap","aPtr","_setComparisonAudioOnHeap","bPtr","bestCorrelationPtr","bestSampleOffsetPtr","_executeAsWorker","functionName","params","source","isNode","type","webworkerSourceCode","self","onmessage","msg","_workerMethods","apply","results","postMessage","toString","process","versions","node","Buffer","from","URL","createObjectURL","Blob","worker","globalThis","name","result","message","terminate","all","_runCorrelate","aSamplesDecoded","aChannelDataLength","bSamplesDecoded","bChannelDataLength","instantiate","env","correlate","Object","entries","heapView","correlation","getFloat32","sampleOffset","getUint32","_sync","heapPosition","_syncOneToMany","threads","onProgressUpdate","syncParameters","syncStart","syncEnd","baseOffset","max","baseSampleLength","taskIndex","activeCount","doneCount","Array","running","reject","runNext","currentIndex","promise","catch","finally","push","_syncWorkerConcurrent","promises","lengths","maxThreads","log","round","aLength","ceil","offset","aSplit","cutChannel","_syncWorker","bestResultIdx","bestCorrelation","_syncWorkerConcurrentMain","BYTES_PER_ELEMENT","Uint32Array","_instance","syncWorkerConcurrent","syncWorker","sync","syncOneToMany","syncMultiple","clips","workers","graph","notify","wait","runningThreads","resetNotify","vertex","v","vertexClip","edges","Set","edgeClip","edge","correlationResult","add","parent","weighResults","localeCompare","path","cycles","detectCycle","values","has","cycleStartEdge","cycleEndEdge","keep","remove","cycleWith","delete","size","roots","traverseRoot","root","sampleOffsetFromRoot","sort"],"sourceRoot":""}