{"version":3,"file":"icecast-metadata-stats-0.1.7.min.js","mappings":"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","sources":["webpack://IcecastMetadataStats/webpack/bootstrap","webpack://IcecastMetadataStats/webpack/runtime/define property getters","webpack://IcecastMetadataStats/webpack/runtime/hasOwnProperty shorthand","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/Stats.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/MetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/IcyMetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/OggMetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/DualMetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/IcecastMetadataReader.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/IcecastReadableStream.js","webpack://IcecastMetadataStats/./src/IcecastMetadataStats.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class Stats {\n  constructor() {\n    this._totalBytesRead = 0;\n    this._streamBytesRead = 0;\n    this._metadataLengthBytesRead = 0;\n    this._metadataBytesRead = 0;\n\n    this._currentBytesRemaining = 0;\n    this._currentStreamBytesRemaining = 0;\n    this._currentMetadataBytesRemaining = 0;\n  }\n\n  get stats() {\n    return {\n      totalBytesRead: this._totalBytesRead,\n      streamBytesRead: this._streamBytesRead,\n      metadataLengthBytesRead: this._metadataLengthBytesRead,\n      metadataBytesRead: this._metadataBytesRead,\n      currentBytesRemaining: this._currentBytesRemaining,\n      currentStreamBytesRemaining: this._currentStreamBytesRemaining,\n      currentMetadataBytesRemaining: this._currentMetadataBytesRemaining,\n    };\n  }\n\n  set currentStreamBytesRemaining(bytes) {\n    this._currentStreamBytesRemaining += bytes;\n  }\n\n  set currentMetadataBytesRemaining(bytes) {\n    this._currentMetadataBytesRemaining = bytes;\n  }\n\n  addBytes(bytes) {\n    this._totalBytesRead += bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  addStreamBytes(bytes) {\n    this._streamBytesRead += bytes;\n    this._currentStreamBytesRemaining -= bytes;\n  }\n\n  addMetadataLengthBytes(bytes) {\n    this._metadataLengthBytesRead += bytes;\n  }\n\n  addMetadataBytes(bytes) {\n    this._metadataBytesRead += bytes;\n    this._currentMetadataBytesRemaining -= bytes;\n  }\n\n  addCurrentBytesRemaining(bytes) {\n    this._currentBytesRemaining += bytes;\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport Stats from \"./Stats.js\";\n\nconst noOp = () => {};\n\n/**\n * @description Passthrough parser\n * @protected\n * @see IcecastMetadataReader\n */\n\nexport default class MetadataParser {\n  constructor(params) {\n    this._remainingData = 0;\n    this._currentPosition = 0;\n    this._buffer = new Uint8Array(0);\n    this._streamBuffer = [];\n    this._streamBufferLength = 0;\n    this._stats = new Stats();\n\n    this._onStream = params.onStream || noOp;\n    this._onMetadata = params.onMetadata || noOp;\n    this._onMetadataFailed = params.onMetadataFailed || noOp;\n    this._onError = params.onError || noOp;\n    this._enableLogging = params.enableLogging || false;\n\n    this._onStreamPromise = Promise.resolve();\n    this._onMetadataPromise = Promise.resolve();\n    this._generator = this._passThroughParser();\n    this._generator.next();\n  }\n\n  *_passThroughParser() {\n    this._remainingData = Infinity;\n    while (true) {\n      this._addStream(yield* this._getNextValue());\n      yield* this._sendStream();\n    }\n  }\n\n  static _concatBuffers(...buffers) {\n    const length = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n    return this._concatBuffersKnownLength(buffers, length);\n  }\n\n  static _concatBuffersKnownLength(buffers, length) {\n    const buffer = new Uint8Array(length);\n\n    buffers.reduce((offset, buf) => {\n      buffer.set(buf, offset);\n      return offset + buf.length;\n    }, 0);\n\n    return buffer;\n  }\n\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  readAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {}\n  }\n\n  async *asyncIterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n      yield i.value;\n    }\n  }\n\n  async asyncReadAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n    }\n  }\n\n  _logError(...messages) {\n    if (this._enableLogging) {\n      console.warn(\n        \"icecast-metadata-js\",\n        messages.reduce((acc, message) => acc + \"\\n  \" + message, \"\")\n      );\n    }\n    this._onError(...messages);\n  }\n\n  _addStream(stream) {\n    this._streamBuffer.push(stream);\n    this._streamBufferLength += stream.length;\n  }\n\n  *_sendStream() {\n    if (this._streamBuffer.length) {\n      const stream = MetadataParser._concatBuffersKnownLength(\n        this._streamBuffer,\n        this._streamBufferLength\n      );\n      this._streamBuffer = [];\n      this._streamBufferLength = 0;\n\n      this._stats.addStreamBytes(stream.length);\n\n      const streamPayload = { stream, stats: this._stats.stats };\n\n      this._onStreamPromise = this._onStream(streamPayload);\n      yield streamPayload;\n    }\n  }\n\n  *_sendMetadata(metadata) {\n    yield* this._sendStream();\n\n    const metadataPayload = {\n      metadata,\n      stats: this._stats.stats,\n    };\n\n    this._onMetadataPromise = this._onMetadata(metadataPayload);\n    yield metadataPayload;\n  }\n\n  *_getNextValue(minLength = 0) {\n    if (this._currentPosition === this._buffer.length) {\n      this._buffer = yield* this._readData();\n      this._currentPosition = 0;\n    }\n\n    while (this._buffer.length - this._currentPosition < minLength) {\n      this._buffer = MetadataParser._concatBuffers(\n        this._buffer,\n        yield* this._readData()\n      );\n    }\n\n    const value = this._buffer.subarray(\n      this._currentPosition,\n      (minLength || this._remainingData) + this._currentPosition\n    );\n\n    this._stats.addBytes(value.length);\n    this._remainingData =\n      value.length < this._remainingData\n        ? this._remainingData - value.length\n        : 0;\n\n    this._currentPosition += value.length;\n\n    return value;\n  }\n\n  *_readData() {\n    yield* this._sendStream();\n\n    let data;\n\n    do {\n      data = yield; // if out of data, accept new data in the .next() call\n    } while (!data || data.length === 0);\n\n    this._stats.addCurrentBytesRemaining(data.length);\n    return data;\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataParser from \"./MetadataParser.js\";\n\n/**\n * @description Parses ICY metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\n\nexport default class IcyMetadataParser extends MetadataParser {\n  constructor({\n    icyMetaInt,\n    icyDetectionTimeout = 2000,\n    icyCharacterEncoding = \"utf-8\",\n    ...rest\n  }) {\n    super(rest);\n\n    this._decoder = new globalThis.TextDecoder(icyCharacterEncoding);\n    this._icyMetaInt = icyMetaInt;\n    this._icyDetectionTimeout = icyDetectionTimeout;\n\n    this._generator = this._icyParser();\n    this._generator.next();\n  }\n\n  *_icyParser() {\n    if (yield* this._hasIcyMetadata()) {\n      do {\n        this._remainingData = this._icyMetaInt;\n        yield* this._getStream();\n        yield* this._getMetadataLength();\n        if (this._remainingData) yield* this._getMetadata();\n      } while (true);\n    }\n\n    this._remainingData = Infinity;\n    yield* this._getStream();\n  }\n\n  static parseIcyMetadata(metadataString) {\n    /**\n     * Metadata is a string of key='value' pairs delimited by a semicolon.\n     * The string is a fixed length and any unused bytes at the end are 0x00.\n     * i.e. \"StreamTitle='The Stream Title';StreamUrl='https://example.com';\\0\\0\\0\\0\\0\\0\"\n     */\n\n    const metadataRegex = /(?<key>[^\\0]+?)='(?<val>[^\\0]*?)(;$|';|'$|$)/;\n    const metadata = {};\n\n    // [{key: \"StreamTitle\", val: \"The Stream Title\"}, {key: \"StreamUrl\", val: \"https://example.com\"}]\n    for (const metadataElement of metadataString.match(\n      new RegExp(metadataRegex, \"g\")\n    ) || []) {\n      const match = metadataElement.match(metadataRegex);\n      if (match) metadata[match[\"groups\"][\"key\"]] = match[\"groups\"][\"val\"];\n    }\n\n    // {StreamTitle: \"The Stream Title\", StreamUrl: \"https://example.com\"}\n    return metadata;\n  }\n\n  get icyMetaInt() {\n    return this._icyMetaInt;\n  }\n\n  *_hasIcyMetadata() {\n    if (this._icyMetaInt > 0) return true;\n    if (!this._icyDetectionTimeout) return false;\n\n    this._logError(\n      \"Passed in Icy-MetaInt is invalid. Attempting to detect ICY Metadata.\",\n      \"See https://github.com/eshaz/icecast-metadata-js for information on how to properly request ICY Metadata.\"\n    );\n\n    // prettier-ignore\n    const METADATA_SEARCH = [null,83,116,114,101,97,109,84,105,116,108,101,61]; // StreamTitle=\n    const startTime = Date.now();\n    let metaInt = 0;\n\n    while (startTime + this._icyDetectionTimeout > Date.now()) {\n      this._buffer = MetadataParser._concatBuffers(\n        this._buffer,\n        yield* this._readData()\n      );\n\n      // search for metadata\n      detectMetadata: while (\n        metaInt <\n        this._buffer.length - METADATA_SEARCH.length\n      ) {\n        for (let i = 1; i < METADATA_SEARCH.length; i++) {\n          if (this._buffer[i + metaInt] !== METADATA_SEARCH[i]) {\n            metaInt++;\n            continue detectMetadata;\n          }\n        }\n\n        // found metadata\n        // prettier-ignore\n        this._logError(`Found ICY Metadata! Setting Icy-MetaInt to ${metaInt}.`);\n        this._icyMetaInt = metaInt;\n\n        return true;\n      }\n    }\n\n    // prettier-ignore\n    this._logError(\n      \"ICY Metadata not detected, but continuing anyway. Audio errors will occur if there is ICY metadata.\",\n      `Searched ${this._buffer.length} bytes for ${(Date.now() - startTime) / 1000} seconds.`,\n      \"Try increasing the `icyDetectionTimeout` value if ICY metadata is present in the stream.\"\n    );\n    this._onMetadataFailed(\"icy\");\n\n    return false;\n  }\n\n  *_getStream() {\n    this._stats.currentStreamBytesRemaining = this._remainingData;\n\n    while (this._remainingData) {\n      this._addStream(yield* super._getNextValue());\n    }\n  }\n\n  *_getMetadataLength() {\n    this._remainingData = 1;\n\n    do {\n      this._remainingData = (yield* this._getNextValue())[0] * 16;\n    } while (this._remainingData === 1);\n\n    this._stats.addMetadataLengthBytes(1);\n  }\n\n  *_getMetadata() {\n    this._stats.currentMetadataBytesRemaining = this._remainingData;\n\n    const metadata = yield* this._getNextValue(this._remainingData);\n    this._stats.addMetadataBytes(metadata.length);\n\n    yield* this._sendMetadata(\n      IcyMetadataParser.parseIcyMetadata(this._decoder.decode(metadata))\n    );\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataParser from \"./MetadataParser.js\";\n\n/**\n * @description Parses Ogg metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\nexport default class OggMetadataParser extends MetadataParser {\n  constructor(params) {\n    super(params);\n\n    this._decoder = new globalThis.TextDecoder(\"utf-8\");\n    this._generator = this._oggParser();\n    this._generator.next();\n    this._isContinuePacket = false;\n  }\n\n  *_oggParser() {\n    if (yield* this._hasOggPage()) {\n      const codecMatcher = yield* this._identifyCodec();\n      if (codecMatcher) {\n        while (yield* this._hasOggPage()) {\n          if (!this._isContinuePacket) yield* this._getMetadata(codecMatcher);\n          yield* this._getStream();\n        }\n      }\n    }\n\n    this._remainingData = Infinity;\n    yield* this._getStream();\n  }\n\n  _getUint32(data, offset = 0) {\n    return new DataView(\n      Uint8Array.from([...data.subarray(offset, offset + 4)]).buffer\n    ).getUint32(0, true);\n  }\n\n  _matchBytes(matchString, bytes) {\n    return String.fromCharCode(...bytes).match(matchString);\n  }\n\n  *_hasOggPage() {\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    // Byte (5 of 28) stream_structure_version\n    // Byte (6 of 28)\n    // * `00000...`: All zeros\n    // * `.....C..`: (0 no, 1 yes) last page of logical bitstream (eos)\n    // * `......D.`: (0 no, 1 yes) first page of logical bitstream (bos)\n    // * `.......E`: (0 no, 1 yes) continued packet\n    let syncBytes = [];\n    while (syncBytes.length <= 65307) {\n      // max ogg page size\n      const bytes = yield* super._getNextValue(6); // Sync with Ogg page without sending stream data\n      if (\n        bytes[0] === 0x4f &&\n        bytes[1] === 0x67 &&\n        bytes[2] === 0x67 &&\n        bytes[3] === 0x53 &&\n        !(bytes[5] & 0b11111000)\n      ) {\n        this._isContinuePacket = bytes[5] & 0b00000001;\n        this._currentPosition -= 6;\n        this._remainingData += 6;\n        this._stats._totalBytesRead -= 6;\n        this._stats._currentBytesRemaining += 6;\n        break;\n      }\n      // not synced, rewind to the next offset to continue syncing\n      syncBytes.push(bytes[0]);\n\n      this._currentPosition -= 5;\n      this._stats._totalBytesRead -= 5;\n      this._stats._currentBytesRemaining += 5;\n    }\n\n    if (syncBytes.length) this._addStream(Uint8Array.from(syncBytes));\n\n    if (syncBytes.length > 65307) {\n      this._logError(\n        \"This stream is not an Ogg stream. No Ogg metadata will be returned.\",\n        \"See https://github.com/eshaz/icecast-metadata-js for information on Ogg metadata.\"\n      );\n      this._onMetadataFailed(\"ogg\");\n      return false;\n    }\n\n    const baseOggPage = yield* this._getNextValue(27);\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    const oggPageSegments = yield* this._getNextValue(baseOggPage[26]);\n\n    this._remainingData = oggPageSegments.reduce(\n      (acc, octet) => acc + octet,\n      0\n    );\n    return true;\n  }\n\n  *_identifyCodec() {\n    const data = yield* this._getNextValue(8);\n\n    yield* this._getStream();\n\n    if (this._matchBytes(/\\x7fFLAC/, data.subarray(0, 5))) {\n      return { regex: /^[\\x84|\\x04]/, length: 4 };\n    } else if (this._matchBytes(/OpusHead/, data.subarray(0, 8))) {\n      return { regex: /OpusTags/, length: 8 };\n    } else if (this._matchBytes(/\\x01vorbis/, data.subarray(0, 7))) {\n      return { regex: /\\x03vorbis/, length: 7 };\n    }\n  }\n\n  *_getMetadata({ regex, length }) {\n    if (this._matchBytes(regex, yield* this._getNextValue(length))) {\n      yield* this._sendMetadata(yield* this._readVorbisComment());\n    }\n  }\n\n  *_getStream() {\n    while (this._remainingData) {\n      yield* this._getNextValue();\n    }\n  }\n\n  *_getNextValue(length) {\n    const value = yield* super._getNextValue(length);\n\n    this._addStream(value);\n    return value;\n  }\n\n  *_readData() {\n    const data = yield* super._readData();\n    this._stats.currentStreamBytesRemaining = data.length;\n    return data;\n  }\n\n  *_readVorbisComment() {\n    /*\n    1) [vendor_length] = read an unsigned integer of 32 bits\n    2) [vendor_string] = read a UTF-8 vector as [vendor_length] octets\n    3) [user_comment_list_length] = read an unsigned integer of 32 bits\n    4) iterate [user_comment_list_length] times {\n       5) [length] = read an unsigned integer of 32 bits\n       6) this iteration's user comment = read a UTF-8 vector as [length] octets\n    }\n    7) [framing_bit] = read a single bit as boolean\n    8) if ( [framing_bit] unset or end of packet ) then ERROR\n    9) done.\n    */\n    const vendorStringLength = this._getUint32(yield* this._getNextValue(4));\n    this._stats.addMetadataBytes(4);\n\n    const vendorString = this._decoder.decode(\n      yield* this._getNextValue(vendorStringLength)\n    );\n    this._stats.addMetadataBytes(vendorStringLength);\n\n    const commentListLength = this._getUint32(yield* this._getNextValue(4));\n    this._stats.addMetadataBytes(4);\n\n    const comments = [];\n    for (let i = 0; i < commentListLength; i++) {\n      const commentLength = yield* this._getNextValue(4);\n      this._stats.addMetadataBytes(4);\n\n      comments.push(yield* this._getNextValue(this._getUint32(commentLength)));\n      this._stats.addMetadataBytes(comments[comments.length - 1].length);\n    }\n\n    this._stats.currentMetadataBytesRemaining = 0;\n\n    return comments.reduce(\n      (metadata, comment) => {\n        const delimiter = comment.indexOf(0x3d);\n        // prettier-ignore\n        const key = String.fromCharCode(...comment.subarray(0, delimiter)).toUpperCase();\n        const val = this._decoder.decode(comment.subarray(delimiter + 1));\n\n        metadata[key] = metadata[key] ? `${metadata[key]}; ${val}` : val;\n        return metadata;\n      },\n      { VENDOR_STRING: vendorString }\n    );\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcyMetadataParser from \"./IcyMetadataParser.js\";\nimport OggMetadataParser from \"./OggMetadataParser.js\";\n\n/**\n * @description Parses ICY and Ogg metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\n\nexport default class DualMetadataParser {\n  constructor(params) {\n    const { onStream, ...rest } = params;\n    this._oggMetadataParser = new OggMetadataParser(params);\n    this._icyMetadataParser = new IcyMetadataParser(rest);\n  }\n\n  get icyMetaInt() {\n    return this._icyMetadataParser.icyMetaInt;\n  }\n\n  *iterator(chunk) {\n    for (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        yield* this._oggMetadataParser.iterator(value.stream);\n      } else {\n        yield value;\n      }\n    }\n  }\n\n  readAll(chunk) {\n    for (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        this._oggMetadataParser.readAll(value.stream);\n      }\n    }\n  }\n\n  async *asyncIterator(chunk) {\n    for await (const value of this._icyMetadataParser.asyncIterator(chunk)) {\n      if (value.stream) {\n        for await (const oggValue of this._oggMetadataParser.asyncIterator(\n          value.stream\n        )) {\n          yield oggValue;\n        }\n      } else {\n        yield value;\n      }\n    }\n  }\n\n  async asyncReadAll(chunk) {\n    for await (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        await this._oggMetadataParser.asyncReadAll(value.stream);\n      }\n    }\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataParser from \"./MetadataParser/MetadataParser.js\";\nimport IcyMetadataParser from \"./MetadataParser/IcyMetadataParser.js\";\nimport OggMetadataParser from \"./MetadataParser/OggMetadataParser.js\";\nimport DualMetadataParser from \"./MetadataParser/DualMetadataParser.js\";\n\nexport default class IcecastMetadataReader {\n  /**\n   * @description Splits Icecast raw response into stream bytes and metadata key / value pairs.\n   * @param {number} IcecastMetadataReader.icyMetaInt Interval in bytes of metadata updates returned by the Icecast server\n   * @param {number} IcecastMetadataReader.icyCharacterEncoding Character encoding to use for ICY metadata (defaults to \"utf-8\")\n   * @param {number} IcecastMetadataReader.icyDetectionTimeout Duration in milliseconds to search for metadata if icyMetaInt isn't passed in\n   * @param {Array} IcecastMetadataReader.metadataTypes Types of metadata to capture: \"icy\" and/or \"ogg\"\n   *\n   * @callback onMetadata\n   * @param {object} value Object containing Metadata and Statistics\n   * @param {object} metadata Object containing the metadata received.\n   * @param {string} [metadata.StreamTitle] (ICY) Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] (ICY) Url (usually album art) of the metadata update.\n   * @param {string} [metadata.TITLE] (Ogg) Url Title of the metadata update.\n   * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n   *\n   * @callback onStream\n   * @param {object} value Object containing Stream data and Statistics\n   * @param {Uint8Array} stream Object containing the stream buffer.\n   * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n   *\n   * @callback onMetadataFailed Called when metadata detection has failed and no metadata will be returned\n   * @param {string} metadataType Metadata type that failed (\"icy\" or \"ogg\")\n   *\n   * @callback onError Called when an error is encountered\n   * @param {string} message Error message\n   */\n  constructor({ metadataTypes = [\"icy\"], ...rest } = {}) {\n    const hasIcy = metadataTypes.includes(\"icy\");\n    const hasOgg = metadataTypes.includes(\"ogg\");\n\n    if (hasIcy && hasOgg) this._metadataParser = new DualMetadataParser(rest);\n    else if (hasOgg) this._metadataParser = new OggMetadataParser(rest);\n    else if (hasIcy) this._metadataParser = new IcyMetadataParser(rest);\n    else this._metadataParser = new MetadataParser(rest);\n  }\n\n  /**\n   * @description Parses an already decoded ICY metadata string into key value pairs.\n   * @param {string} metadataString ICY formatted metadata string. (i.e. \"StreamTitle='A Title';\")\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  static parseIcyMetadata(string) {\n    return IcyMetadataParser.parseIcyMetadata(string);\n  }\n\n  /**\n   * @description Gets the ICY metadata interval for this instance.\n   * @returns {number} ICY metadata interval in bytes.\n   */\n  get icyMetaInt() {\n    return this._metadataParser.icyMetaInt;\n  }\n\n  /**\n   * @description Returns an iterator that yields stream or metadata.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {Iterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  *iterator(chunk) {\n    yield* this._metadataParser.iterator(chunk);\n  }\n\n  /**\n   * @description Reads all data in the passed in chunk and calls the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  readAll(chunk) {\n    this._metadataParser.readAll(chunk);\n  }\n\n  /**\n   * @description Returns an async iterator that yields stream or metadata and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  async *asyncIterator(chunk) {\n    return yield* this._metadataParser.asyncIterator(chunk);\n  }\n\n  /**\n   * @description Reads all data in the chunk and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  async asyncReadAll(chunk) {\n    return this._metadataParser.asyncReadAll(chunk);\n  }\n}\n","/* Copyright 2020-2021 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcecastMetadataReader from \"./IcecastMetadataReader.js\";\n\nconst noOp = () => {};\n\n/**\n * @description Browser ReadableStream wrapper for IcecastMetadataReader\n */\nexport default class IcecastReadableStream {\n  /**\n   * @param {ReadableStream} response ReadableStream for raw Icecast response data\n   * @param {object} options Configuration options for IcecastMetadataReader\n   * @see IcecastMetadataReader for information on the options parameter\n   */\n  constructor(response, { onStream = noOp, ...rest }) {\n    let icecast;\n\n    this._readableStream = new ReadableStream({\n      async start(controller) {\n        icecast = new IcecastMetadataReader({\n          icyMetaInt: parseInt(response.headers.get(\"Icy-MetaInt\")),\n          ...rest,\n          onStream: async (value) => {\n            controller.enqueue(value.stream);\n            return onStream(value);\n          },\n        });\n\n        for await (const chunk of IcecastReadableStream.asyncIterator(\n          response.body\n        )) {\n          await icecast.asyncReadAll(chunk);\n        }\n\n        controller.close();\n      },\n    });\n\n    this._icecast = icecast;\n  }\n\n  /**\n   * @returns Icecast Metadata Interval if it is present on this stream\n   */\n  get icyMetaInt() {\n    return this._icecast.icyMetaInt;\n  }\n\n  /**\n   * @returns The ReadableStream instance\n   */\n  get readableStream() {\n    return this._readableStream;\n  }\n\n  /**\n   * @description Starts reading from the response and processing stream and metadata.\n   */\n  async startReading() {\n    try {\n      for await (const i of IcecastReadableStream.asyncIterator(\n        this._readableStream\n      )) {\n      }\n    } catch (e) {\n      if (e.name !== \"AbortError\") throw e;\n    }\n  }\n\n  /**\n   * @description Wraps a ReadableStream as an Async Iterator.\n   * @param {ReadableStream} readableStream ReadableStream to convert to AsyncIterator\n   * @returns {Symbol.asyncIterator} Async Iterator that wraps the ReadableStream\n   */\n  static asyncIterator(readableStream) {\n    const reader = readableStream.getReader();\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => reader.read(),\n      }),\n    };\n  }\n}\n","/**\n * @license\n * @see https://github.com/eshaz/icecast-metadata-js\n * @copyright 2021 Ethan Halsall\n *  This file is part of icecast-metadata-stats.\n *\n *  icecast-metadata-stats free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Lesser General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  icecast-metadata-stats distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>\n */\n\nimport { IcecastReadableStream } from \"icecast-metadata-js\";\n\nconst noOp = () => {};\n\nconst STOPPED = \"stopped\";\nconst RUNNING = \"running\";\nconst FETCHING = \"fetching\";\n\nconst p = new WeakMap();\n\n// variables\nconst icyController = Symbol();\nconst icyFetchStatus = Symbol();\n\nconst oggController = Symbol();\nconst oggFetchStatus = Symbol();\n\nconst icestatsEndpoint = Symbol();\nconst icestatsController = Symbol();\nconst icestatsFetchStatus = Symbol();\n\nconst statsEndpoint = Symbol();\nconst statsController = Symbol();\nconst statsFetchStatus = Symbol();\n\nconst nextsongsEndpoint = Symbol();\nconst nextsongsController = Symbol();\nconst nextsongsFetchStatus = Symbol();\n\nconst sevenhtmlEndpoint = Symbol();\nconst sevenhtmlController = Symbol();\nconst sevenhtmlFetchStatus = Symbol();\n\nconst streamEndpoint = Symbol();\nconst icyMetaInt = Symbol();\nconst icyCharacterEncoding = Symbol();\nconst icyDetectionTimeout = Symbol();\nconst sources = Symbol();\nconst interval = Symbol();\nconst onStats = Symbol();\nconst onStatsFetch = Symbol();\n\nconst state = Symbol();\nconst intervalId = Symbol();\n\n// methods\nconst fetchStats = Symbol();\nconst getStreamMetadata = Symbol();\n\nexport default class IcecastMetadataStats {\n  /**\n   * @constructor\n   * @param {URL} endpoint Stream endpoint\n   * @param {object} [options] Options object\n   *\n   * @callback [options.onStats] Called when the automatic query completes\n   * @callback [options.onStatsFetch] Called when the automatic query begins\n   * @param {Array} [options.sources] List of sources to automatically query [\"icy\", \"ogg\", \"icestats\", \"stats\", \"sevenhtml\", \"nextsongs\"]\n   * @param {number} [options.interval] Time in seconds to wait between automatically queries\n   * @param {URL} [options.icestatsEndpoint] Endpoint for the `status-json.xsl` source\n   * @param {URL} [options.statsEndpoint] Endpoint for the `stats` source\n   * @param {URL} [options.nextsongsEndpoint] Endpoint for the `nextsongs` source\n   * @param {URL} [options.sevenhtmlEndpoint] Endpoint for the `7.html` source\n   * @param {number} [options.icyMetaInt] Manually sets the ICY metadata interval\n   * @param {string} [options.icyCharacterEncoding] Character encoding to use for ICY metadata (defaults to \"utf-8\")\n   * @param {number} [options.icyDetectionTimeout] Time in milliseconds to search for ICY metadata\n   */\n  constructor(endpoint, options = {}) {\n    const serverPath = endpoint.split(\"/\").slice(0, -1).join(\"/\");\n\n    // prettier-ignore\n    p.set(this, {\n      [streamEndpoint]: endpoint,\n      [icestatsEndpoint]: options.icestatsEndpoint || `${serverPath}/status-json.xsl`,\n      [statsEndpoint] : options.statsEndpoint || `${serverPath}/stats`,\n      [nextsongsEndpoint] : options.nextsongsEndpoint || `${serverPath}/nextsongs`,\n      [sevenhtmlEndpoint] : options.sevenhtmlEndpoint || `${serverPath}/7.html`,\n      [sources]: options.sources || [],\n      [interval]: (options.interval || 30) * 1000,\n      [onStats]: options.onStats || noOp,\n      [onStatsFetch]: options.onStatsFetch || noOp,\n      [icyMetaInt]: options.icyMetaInt,\n      [icyCharacterEncoding]: options.icyCharacterEncoding,\n      [icyDetectionTimeout]: options.icyDetectionTimeout,\n      [icyController]: new AbortController(),\n      [oggController]: new AbortController(),\n      [icestatsController]: new AbortController(),\n      [statsController]: new AbortController(),\n      [nextsongsController]: new AbortController(),\n      [sevenhtmlController]: new AbortController(),\n      [state]: STOPPED,\n    });\n  }\n\n  static xml2Json(xml) {\n    const deserialize = (xml) =>\n      new DOMParser().parseFromString(xml, \"application/xml\");\n\n    const serialize = (element) => {\n      if (!element.children.length) {\n        return Number.isNaN(Number(element.innerHTML))\n          ? element.innerHTML\n          : Number(element.innerHTML);\n      }\n\n      const json = {};\n\n      for (const child of element.children) {\n        if (child.nodeName in json) {\n          if (Array.isArray(json[child.nodeName])) {\n            json[child.nodeName].push(serialize(child));\n          } else {\n            json[child.nodeName] = [json[child.nodeName], serialize(child)];\n          }\n        } else {\n          json[child.nodeName] = serialize(child);\n        }\n      }\n\n      return json;\n    };\n\n    return serialize(deserialize(xml));\n  }\n\n  /**\n   * @returns The current state [\"stopped\", \"running\", \"fetching\"]\n   */\n  get state() {\n    return p.get(this)[state];\n  }\n\n  /**\n   * @returns The generated `status-json.xsl` endpoint\n   */\n  get icestatsEndpoint() {\n    return p.get(this)[icestatsEndpoint];\n  }\n\n  /**\n   * @returns The generated `stats` endpoint\n   */\n  get statsEndpoint() {\n    return p.get(this)[statsEndpoint];\n  }\n\n  /**\n   * @returns The generated `nextsongs` endpoint\n   */\n  get nextsongsEndpoint() {\n    return p.get(this)[nextsongsEndpoint];\n  }\n\n  /**\n   * @returns The generated `7.html` endpoint\n   */\n  get sevenhtmlEndpoint() {\n    return p.get(this)[sevenhtmlEndpoint];\n  }\n\n  /**\n   * @description Starts automatically fetching stats\n   */\n  start() {\n    if (p.get(this)[state] === STOPPED) {\n      p.get(this)[state] = RUNNING;\n\n      this.fetch().then(p.get(this)[onStats]);\n\n      p.get(this)[intervalId] = setInterval(() => {\n        this.fetch().then(p.get(this)[onStats]);\n      }, p.get(this)[interval]);\n    }\n  }\n\n  /**\n   * @description Stops automatically fetching stats and cancels any inprogress stats\n   */\n  stop() {\n    if (p.get(this)[state] !== STOPPED) {\n      p.get(this)[state] = STOPPED;\n\n      clearInterval(p.get(this)[intervalId]);\n      p.get(this)[icyController].abort();\n      p.get(this)[oggController].abort();\n      p.get(this)[icestatsController].abort();\n      p.get(this)[statsController].abort();\n      p.get(this)[sevenhtmlController].abort();\n    }\n  }\n\n  /**\n   * @description Manually fetches stats from the sources passed in to the `options.sources` parameter\n   * @async\n   * @returns {object} Object containing the stats from the sources\n   */\n  async fetch() {\n    if (p.get(this)[state] !== FETCHING) {\n      const oldState = p.get(this)[state];\n\n      p.get(this)[state] = FETCHING;\n      p.get(this)[onStatsFetch](p.get(this)[sources]);\n\n      const promises = [];\n      if (p.get(this)[sources].includes(\"icestats\"))\n        promises.push(this.getIcestats());\n      if (p.get(this)[sources].includes(\"sevenhtml\"))\n        promises.push(this.getSevenhtml());\n      if (p.get(this)[sources].includes(\"stats\"))\n        promises.push(this.getStats());\n      if (p.get(this)[sources].includes(\"nextsongs\"))\n        promises.push(this.getNextsongs());\n      if (p.get(this)[sources].includes(\"icy\"))\n        promises.push(this.getIcyMetadata());\n      if (p.get(this)[sources].includes(\"ogg\"))\n        promises.push(this.getOggMetadata());\n\n      const stats = await Promise.all(promises).then((stats) =>\n        stats.reduce((acc, stat) => ({ ...acc, ...stat }), {})\n      );\n\n      p.get(this)[state] =\n        p.get(this)[state] !== FETCHING ? p.get(this)[state] : oldState;\n\n      return stats;\n    }\n  }\n\n  /**\n   * @description Fetches the data from the `/status-json.xsl` endpoint\n   * @async\n   * @returns {object} Object containing results of `/status-json.xsl`\n   */\n  async getIcestats() {\n    return this[fetchStats]({\n      status: icestatsFetchStatus,\n      endpoint: icestatsEndpoint,\n      controller: icestatsController,\n      mapper: (res) => res.json(),\n    }).then((stats) => ({ icestats: stats && stats.icestats }));\n  }\n\n  /*\n  <HTML><meta http-equiv=\"Pragma\" content=\"no-cache\"></head><body>350,1,132,1000,41,128,Dj Mixes Sety</body></html>\n  ,141,1000,50,128,Gra AutoPilot audycje Energy 2000</body></html>\n  ,27,1000,8,128,Gra Wavelogic audycje Rave With The Wave</body></html>\n  ,578,1000,233,128,youtube.com/RadioPartyOfficial</body></html>\n  ,15,1000,5,64,youtube.com/RadioPartyOfficial</body></html>\n  */\n\n  // http://wiki.winamp.com/wiki/SHOUTcast_DNAS_Server_2_XML_Reponses#Equivalent_of_7.html\n  // CURRENTLISTENERS STREAMSTATUS PEAKLISTENERS MAXLISTENERS UNIQUELISTENERS BITRATE SONGTITLE\n\n  /**\n   * @description Fetches the data from the `/7.html` endpoint\n   * @async\n   * @returns {object} Object containing results of `/7.html`\n   */\n  async getSevenhtml() {\n    return this[fetchStats]({\n      status: sevenhtmlFetchStatus,\n      endpoint: sevenhtmlEndpoint,\n      controller: sevenhtmlController,\n      mapper: async (res) =>\n        (await res.text()).match(/(.*?)<\\/body>/gi).map((s) => {\n          const stats = s\n            .match(/(<body>|,)(?<stats>.*)<\\/body>/i)\n            .groups.stats.split(\",\");\n\n          return stats.length === 7\n            ? {\n                StreamTitle: stats[6],\n                currentListeners: parseInt(stats[4]),\n                peakListeners: parseInt(stats[2]),\n                maxListeners: parseInt(stats[3]),\n                bitrate: parseInt(stats[5]),\n                status: parseInt(stats[1]),\n                serverListeners: parseInt(stats[0]),\n              }\n            : {\n                StreamTitle: stats[4],\n                currentListeners: parseInt(stats[2]),\n                peakListeners: parseInt(stats[0]),\n                maxListeners: parseInt(stats[1]),\n                bitrate: parseInt(stats[3]),\n              };\n        }),\n    }).then((sevenhtml) => ({\n      sevenhtml,\n    }));\n  }\n\n  // http://wiki.winamp.com/wiki/SHOUTcast_DNAS_Server_2_XML_Reponses#General_Server_Summary\n  /**\n   * @description Fetches the data from the `/stats` endpoint\n   * @async\n   * @returns {object} Object containing results of `/stats`\n   */\n  async getStats() {\n    return this[fetchStats]({\n      status: statsFetchStatus,\n      endpoint: statsEndpoint,\n      controller: statsController,\n      mapper: async (res) =>\n        IcecastMetadataStats.xml2Json(await res.text()).SHOUTCASTSERVER\n          .STREAMSTATS,\n    }).then((stats) => ({\n      stats,\n    }));\n  }\n\n  // http://wiki.winamp.com/wiki/SHOUTcast_DNAS_Server_2_XML_Reponses#Nextsongs\n  /**\n   * @description Fetches the data from the `/nextsongs` endpoint\n   * @async\n   * @returns {object} Object containing results of `/nextsongs`\n   */\n  async getNextsongs() {\n    return this[fetchStats]({\n      status: nextsongsFetchStatus,\n      endpoint: nextsongsEndpoint,\n      controller: nextsongsController,\n      mapper: async (res) =>\n        IcecastMetadataStats.xml2Json(await res.text()).SHOUTCASTSERVER\n          .NEXTSONGS,\n    }).then((nextsongs) => ({\n      nextsongs,\n    }));\n  }\n\n  /**\n   * @description Fetches the first ICY metadata update from the stream\n   * @async\n   * @returns {object} Object containing ICY metadata\n   */\n  async getIcyMetadata() {\n    return this[getStreamMetadata]({\n      status: icyFetchStatus,\n      endpoint: streamEndpoint,\n      controller: icyController,\n      metadataType: \"icy\",\n      headers: { \"Icy-MetaData\": 1 },\n    });\n  }\n\n  /**\n   * @description Fetches the first Ogg metadata update from the stream\n   * @async\n   * @returns {object} Object containing Ogg metadata\n   */\n  async getOggMetadata() {\n    return this[getStreamMetadata]({\n      status: oggFetchStatus,\n      endpoint: streamEndpoint,\n      controller: oggController,\n      metadataType: \"ogg\",\n    });\n  }\n\n  async [getStreamMetadata]({\n    status,\n    endpoint,\n    controller,\n    headers,\n    metadataType,\n  }) {\n    return this[fetchStats]({\n      status,\n      endpoint,\n      controller,\n      headers,\n      mapper: async (res) =>\n        new Promise((resolve) => {\n          new IcecastReadableStream(res, {\n            onMetadata: ({ metadata }) => {\n              p.get(this)[controller].abort();\n              resolve(metadata);\n            },\n            onMetadataFailed: () => {\n              p.get(this)[controller].abort();\n              resolve();\n            },\n            metadataTypes: metadataType,\n            icyMetaInt: p.get(this)[icyMetaInt],\n            icyCharacterEncoding: p.get(this)[icyCharacterEncoding],\n            icyDetectionTimeout: p.get(this)[icyDetectionTimeout],\n          }).startReading();\n        }),\n    }).then((metadata) => ({ [metadataType]: metadata }));\n  }\n\n  async [fetchStats]({ status, endpoint, controller, mapper, headers = {} }) {\n    if (!p.get(this)[status]) {\n      p.get(this)[status] = true;\n      return fetch(p.get(this)[endpoint], {\n        method: \"GET\",\n        headers,\n        signal: p.get(this)[controller].signal,\n      })\n        .then((res) => {\n          if (!res.ok) throw new Error(`HTTP Error ${res.status}`);\n          return res;\n        })\n        .then(mapper)\n        .catch((e) => {\n          if (e.name !== \"AbortError\") {\n            console.warn(`Failed to fetch ${p.get(this)[endpoint]}`, e);\n          }\n        })\n        .finally(() => {\n          p.get(this)[status] = false;\n          p.get(this)[controller] = new AbortController();\n        });\n    }\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Stats","constructor","this","_totalBytesRead","_streamBytesRead","_metadataLengthBytesRead","_metadataBytesRead","_currentBytesRemaining","_currentStreamBytesRemaining","_currentMetadataBytesRemaining","stats","totalBytesRead","streamBytesRead","metadataLengthBytesRead","metadataBytesRead","currentBytesRemaining","currentStreamBytesRemaining","currentMetadataBytesRemaining","bytes","addBytes","addStreamBytes","addMetadataLengthBytes","addMetadataBytes","addCurrentBytesRemaining","noOp","MetadataParser","params","_remainingData","_currentPosition","_buffer","Uint8Array","_streamBuffer","_streamBufferLength","_stats","_onStream","onStream","_onMetadata","onMetadata","_onMetadataFailed","onMetadataFailed","_onError","onError","_enableLogging","enableLogging","_onStreamPromise","Promise","resolve","_onMetadataPromise","_generator","_passThroughParser","next","Infinity","_addStream","_getNextValue","_sendStream","static","buffers","length","reduce","acc","buf","_concatBuffersKnownLength","buffer","offset","set","chunk","i","value","readAll","async","_logError","messages","console","warn","message","stream","push","streamPayload","metadata","metadataPayload","minLength","_readData","_concatBuffers","subarray","data","IcyMetadataParser","icyMetaInt","icyDetectionTimeout","icyCharacterEncoding","rest","super","_decoder","globalThis","TextDecoder","_icyMetaInt","_icyDetectionTimeout","_icyParser","_hasIcyMetadata","_getStream","_getMetadataLength","_getMetadata","metadataString","metadataRegex","metadataElement","match","RegExp","METADATA_SEARCH","startTime","Date","now","metaInt","detectMetadata","_sendMetadata","parseIcyMetadata","decode","OggMetadataParser","_oggParser","_isContinuePacket","_hasOggPage","codecMatcher","_identifyCodec","_getUint32","DataView","from","getUint32","_matchBytes","matchString","String","fromCharCode","syncBytes","baseOggPage","oggPageSegments","octet","regex","_readVorbisComment","vendorStringLength","vendorString","commentListLength","comments","commentLength","comment","delimiter","indexOf","toUpperCase","val","VENDOR_STRING","DualMetadataParser","_oggMetadataParser","_icyMetadataParser","iterator","asyncIterator","oggValue","asyncReadAll","IcecastMetadataReader","metadataTypes","hasIcy","includes","hasOgg","_metadataParser","string","IcecastReadableStream","response","icecast","_readableStream","ReadableStream","controller","parseInt","headers","enqueue","body","close","_icecast","readableStream","e","name","reader","getReader","Symbol","read","STOPPED","FETCHING","p","WeakMap","icyController","icyFetchStatus","oggController","oggFetchStatus","icestatsEndpoint","icestatsController","icestatsFetchStatus","statsEndpoint","statsController","statsFetchStatus","nextsongsEndpoint","nextsongsController","nextsongsFetchStatus","sevenhtmlEndpoint","sevenhtmlController","sevenhtmlFetchStatus","streamEndpoint","sources","interval","onStats","onStatsFetch","state","intervalId","fetchStats","getStreamMetadata","IcecastMetadataStats","endpoint","options","serverPath","split","slice","join","AbortController","xml","serialize","element","children","Number","isNaN","innerHTML","json","child","nodeName","Array","isArray","DOMParser","parseFromString","deserialize","start","fetch","then","setInterval","stop","clearInterval","abort","oldState","promises","getIcestats","getSevenhtml","getStats","getNextsongs","getIcyMetadata","getOggMetadata","all","stat","status","mapper","res","icestats","text","map","s","groups","StreamTitle","currentListeners","peakListeners","maxListeners","bitrate","serverListeners","sevenhtml","xml2Json","SHOUTCASTSERVER","STREAMSTATS","NEXTSONGS","nextsongs","metadataType","startReading","method","signal","ok","Error","catch","finally"],"sourceRoot":""}